<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ajax</title>
    <url>/2022/11/09/Ajax/</url>
    <content><![CDATA[<h1 id="Ajax：把页面是否跳转的决定权交给了前段"><a href="#Ajax：把页面是否跳转的决定权交给了前段" class="headerlink" title="Ajax：把页面是否跳转的决定权交给了前段"></a>Ajax：把页面是否跳转的决定权交给了前段</h1><p>AJAX &#x3D; Asynchronous JavaScript and XML.</p>
<p>AJAX 是一种用于创建快速动态网页的技术。</p>
<span id="more"></span>

<p>AJAX 通过在后台与服务器进行少量数据交换，使网页实现异步更新。这意味着可以在不重载整个页面的情况下，对网页的某些部分进行更新。</p>
<h3 id="下面是Ajax的固定语法，但是必要的只有二个"><a href="#下面是Ajax的固定语法，但是必要的只有二个" class="headerlink" title="下面是Ajax的固定语法，但是必要的只有二个"></a>下面是Ajax的固定语法，但是必要的只有二个</h3><p>$.ajax({  </p>
<p>​	url: ‘’, </p>
<p>​	type: ‘post’,  </p>
<p>​	data : {‘name’: ‘sgt’, ‘pwd’: ‘123’},  ，这里的数据就是需要携带回去给后台判断的参数</p>
<p>​	</p>
<p>​	success:function (data) {</p>
<p>​	swal({</p>
<p>​	title: ‘AJAX’,</p>
<p>​	text: ‘模拟这里显示了返回的数据’,</p>
<p>​	icon: ‘success’,</p>
<p>​	button: ‘OK’,</p>
<p>})</p>
<h3 id="必要的三个"><a href="#必要的三个" class="headerlink" title="必要的三个"></a>必要的三个</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;  </span><br><span class="line"></span><br><span class="line">	url: &#x27;&#x27;, &#123;#不写默认朝当前页面发请求#&#125;</span><br><span class="line"></span><br><span class="line">	type: &#x27;post&#x27;,  &#123;#请求方式#&#125;</span><br><span class="line"></span><br><span class="line">	data : &#123;&#x27;name&#x27;: &#x27;sgt&#x27;, &#x27;pwd&#x27;: &#x27;123&#x27;&#125;,  &#123;#发送的请求数据#&#125;</span><br><span class="line"></span><br><span class="line">	&#123;#这里的data就是回调函数success获取到的后端响应返回的数据#&#125;</span><br><span class="line"></span><br><span class="line">	回调函数：就是要发挥的数据(个人理解)</span><br><span class="line"></span><br><span class="line">&#125;）</span><br></pre></td></tr></table></figure>



<p><strong>或者</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$.post(&#123;  </span><br><span class="line"></span><br><span class="line">	url: <span class="string">&#x27;&#x27;</span>&#123;<span class="comment">#不写默认朝当前页面发请求#&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">	data : &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;sgt&#x27;</span>, <span class="string">&#x27;pwd&#x27;</span>: <span class="string">&#x27;123&#x27;</span>&#125;,  &#123;<span class="comment">#发送的请求数据#&#125;，这里可以默认为空</span></span><br><span class="line"></span><br><span class="line">	&#123;<span class="comment">#这里的data就是回调函数success获取到的后端响应返回的数据#&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用jQuery就导jQUery，使用Vue就导入Vue，两个都用，自己原生态实现</span><br></pre></td></tr></table></figure>

<h3 id="使用Ajax三部曲："><a href="#使用Ajax三部曲：" class="headerlink" title="使用Ajax三部曲："></a>使用Ajax三部曲：</h3><h4 id="1-编写对应的Controller，返回消息或字符串或者json格式数据；"><a href="#1-编写对应的Controller，返回消息或字符串或者json格式数据；" class="headerlink" title="1.编写对应的Controller，返回消息或字符串或者json格式数据；"></a>1.编写对应的Controller，返回消息或字符串或者json格式数据；</h4><h4 id="2-编写ajax请求"><a href="#2-编写ajax请求" class="headerlink" title="2.编写ajax请求"></a>2.编写ajax请求</h4><h4 id="1-url-controller请求"><a href="#1-url-controller请求" class="headerlink" title="1.url:controller请求"></a>1.url:controller请求</h4><h4 id="2-data：键值对，可以不定义undefined"><a href="#2-data：键值对，可以不定义undefined" class="headerlink" title="2.data：键值对，可以不定义undefined"></a>2.data：键值对，可以不定义undefined</h4><h4 id="3-success：回调函数"><a href="#3-success：回调函数" class="headerlink" title="3.success：回调函数"></a>3.success：回调函数</h4><h3>
</h3>

<h4 id="3-给Ajax绑定事件，点击-click，失去焦点onblur，键盘弹起keyup"><a href="#3-给Ajax绑定事件，点击-click，失去焦点onblur，键盘弹起keyup" class="headerlink" title="3.给Ajax绑定事件，点击.click，失去焦点onblur，键盘弹起keyup"></a>3.给Ajax绑定事件，点击.click，失去焦点onblur，键盘弹起keyup</h4><h2 id="下面是一个ajax案例"><a href="#下面是一个ajax案例" class="headerlink" title="下面是一个ajax案例"></a>下面是一个ajax案例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AjaxController</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/t2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        userList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>,<span class="string">&quot;kuaihua&quot;</span>,<span class="string">&quot;123456&quot;</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>,<span class="string">&quot;kuaihua1&quot;</span>,<span class="string">&quot;1234516&quot;</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>,<span class="string">&quot;kuaihua2&quot;</span>,<span class="string">&quot;1234536&quot;</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">4</span>,<span class="string">&quot;kuaihua3&quot;</span>,<span class="string">&quot;1234563&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">    &lt;script&gt;</span><br><span class="line">        $(function ()&#123;</span><br><span class="line"></span><br><span class="line">            $(<span class="string">&quot;#btn&quot;</span>).click(function () &#123;</span><br><span class="line">                    <span class="comment">// 这里的function(data)代表的数据就是t2中返回的userList数据</span></span><br><span class="line">                    $.post(<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/t2&quot;</span>,function(data) &#123;</span><br><span class="line">                        console.log(data)</span><br><span class="line">                        <span class="type">var</span> <span class="variable">html</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">let</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">                            html +=<span class="string">&quot;&lt;tr&gt;&quot;</span>+</span><br><span class="line">                                <span class="string">&quot;&lt;td&gt;&quot;</span> +data[i].id+<span class="string">&quot;&lt;/td&gt;&quot;</span>+</span><br><span class="line">                                <span class="string">&quot;&lt;td&gt;&quot;</span> +data[i].name+<span class="string">&quot;&lt;/td&gt;&quot;</span>+</span><br><span class="line">                                <span class="string">&quot;&lt;td&gt;&quot;</span> +data[i].password+<span class="string">&quot;&lt;/td&gt;&quot;</span>+</span><br><span class="line">                                <span class="string">&quot;&lt;/tr&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                        $(<span class="string">&quot;#context&quot;</span>).html(html);</span><br><span class="line">                    &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;加载数据&quot;</span> id=<span class="string">&quot;btn&quot;</span>&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;id&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;密码&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tbody id=<span class="string">&quot;context&quot;</span>&gt;</span><br><span class="line">			&lt;%--        这里就显得很空--%&gt;</span><br><span class="line">            &lt;%--        这里显示从后台加载的数据--%&gt;</span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Ajax</category>
      </categories>
  </entry>
  <entry>
    <title>Druid数据源springboot相关依赖与配置</title>
    <url>/2022/11/09/Druid/</url>
    <content><![CDATA[<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="xxxxxxxxxx30-1spring-2-datasource-3-username-root4-password-8888885-url-jdbc-mysql-x2F-x2F-localhost-3306-x2F-mybatis-useUnicode-x3D-true-amp-characterEncoding-x3D-UTF-8-amp-serverTimezone-x3D-Asia-x2F-Shanghai6-driver-class-name-com-mysql-cj-jdbc-Driver7-type-com-alibaba-druid-pool-DruidDataSource8​9​10-SpringBoot默认是不注入这些的，需要自己绑定11-druid数据源专有配置12-initialSize-513-minIdle-514-maxActive-2015-maxWait-6000016-timeBetweenEvictionRunsMillis-6000017-minEvictableIdleTimeMillis-30000018-validationQuery-SELECT-1-FROM-DUAL19-testWhileIdle-true20-testOnBorrow-false21-testOnReturn-false22-poolPreparedStatements-true23​24-配置监控统计拦截的filters，stat：监控统计、log4j：日志记录、wall：防御sql注入25-如果允许报错，java-lang-ClassNotFoundException-org-apache-Log4j-Properity26-则导入log4j-依赖就行27-filters-stat-wall-log4j28-maxPoolPreparedStatementPerConnectionSize-2029-useGlobalDataSourceStat-true30-connectionoProperties-druid-stat-mergeSql-x3D-true-druid-stat-slowSqlMillis-x3D-500yml"><a href="#xxxxxxxxxx30-1spring-2-datasource-3-username-root4-password-8888885-url-jdbc-mysql-x2F-x2F-localhost-3306-x2F-mybatis-useUnicode-x3D-true-amp-characterEncoding-x3D-UTF-8-amp-serverTimezone-x3D-Asia-x2F-Shanghai6-driver-class-name-com-mysql-cj-jdbc-Driver7-type-com-alibaba-druid-pool-DruidDataSource8​9​10-SpringBoot默认是不注入这些的，需要自己绑定11-druid数据源专有配置12-initialSize-513-minIdle-514-maxActive-2015-maxWait-6000016-timeBetweenEvictionRunsMillis-6000017-minEvictableIdleTimeMillis-30000018-validationQuery-SELECT-1-FROM-DUAL19-testWhileIdle-true20-testOnBorrow-false21-testOnReturn-false22-poolPreparedStatements-true23​24-配置监控统计拦截的filters，stat：监控统计、log4j：日志记录、wall：防御sql注入25-如果允许报错，java-lang-ClassNotFoundException-org-apache-Log4j-Properity26-则导入log4j-依赖就行27-filters-stat-wall-log4j28-maxPoolPreparedStatementPerConnectionSize-2029-useGlobalDataSourceStat-true30-connectionoProperties-druid-stat-mergeSql-x3D-true-druid-stat-slowSqlMillis-x3D-500yml" class="headerlink" title="xxxxxxxxxx30 1spring:2  datasource:3    username: root4    password: 8888885    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&amp;serverTimezone&#x3D;Asia&#x2F;Shanghai6    driver-class-name: com.mysql.cj.jdbc.Driver7    type: com.alibaba.druid.pool.DruidDataSource8​9​10    #SpringBoot默认是不注入这些的，需要自己绑定11    #druid数据源专有配置12    initialSize: 513    minIdle: 514    maxActive: 2015    maxWait: 6000016    timeBetweenEvictionRunsMillis: 6000017    minEvictableIdleTimeMillis: 30000018    validationQuery: SELECT 1 FROM DUAL19    testWhileIdle: true20    testOnBorrow: false21    testOnReturn: false22    poolPreparedStatements: true23​24    #配置监控统计拦截的filters，stat：监控统计、log4j：日志记录、wall：防御sql注入25    #如果允许报错，java.lang.ClassNotFoundException: org.apache.Log4j.Properity26    #则导入log4j 依赖就行27    filters: stat,wall,log4j28    maxPoolPreparedStatementPerConnectionSize: 2029    useGlobalDataSourceStat: true30    connectionoProperties: druid.stat.mergeSql&#x3D;true;druid.stat.slowSqlMillis&#x3D;500yml"></a>xxxxxxxxxx30 1spring:2  datasource:3    username: root4    password: 8888885    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&amp;serverTimezone&#x3D;Asia&#x2F;Shanghai6    driver-class-name: com.mysql.cj.jdbc.Driver7    type: com.alibaba.druid.pool.DruidDataSource8​9​10    #SpringBoot默认是不注入这些的，需要自己绑定11    #druid数据源专有配置12    initialSize: 513    minIdle: 514    maxActive: 2015    maxWait: 6000016    timeBetweenEvictionRunsMillis: 6000017    minEvictableIdleTimeMillis: 30000018    validationQuery: SELECT 1 FROM DUAL19    testWhileIdle: true20    testOnBorrow: false21    testOnReturn: false22    poolPreparedStatements: true23​24    #配置监控统计拦截的filters，stat：监控统计、log4j：日志记录、wall：防御sql注入25    #如果允许报错，java.lang.ClassNotFoundException: org.apache.Log4j.Properity26    #则导入log4j 依赖就行27    filters: stat,wall,log4j28    maxPoolPreparedStatementPerConnectionSize: 2029    useGlobalDataSourceStat: true30    connectionoProperties: druid.stat.mergeSql&#x3D;true;druid.stat.slowSqlMillis&#x3D;500yml</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">888888</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span>		<span class="comment"># Druid数据源</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#SpringBoot默认是不注入这些的，需要自己绑定</span></span><br><span class="line">    <span class="comment">#druid数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#配置监控统计拦截的filters，stat：监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment">#如果允许报错，java.lang.ClassNotFoundException: org.apache.Log4j.Properity</span></span><br><span class="line">    <span class="comment">#则导入log4j 依赖就行</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionoProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>JSR303注解的简单使用</title>
    <url>/2022/11/09/JSR303/</url>
    <content><![CDATA[<h2 id="JSR303中含有的注解"><a href="#JSR303中含有的注解" class="headerlink" title="JSR303中含有的注解"></a>JSR303中含有的注解</h2><span id="more"></span>

<p> @Null	被注释的元素必须为 null  </p>
<p>@NotNull    </p>
<pre><code>被注释的元素必须不为 null  
</code></pre>
<p>@AssertTrue  </p>
<pre><code> 被注释的元素必须为 true  
</code></pre>
<p>@AssertFalse</p>
<pre><code> 被注释的元素必须为 false 
</code></pre>
<p>@Min(value)    	被注释的元素必须是一个数字，其值必须                大于等于指定的最小值  </p>
<p>@Max(value)    </p>
<pre><code>被注释的元素必须是一个数字，其值必须小于等于指定的最大值
</code></pre>
<p>@DecimalMin(value) </p>
<pre><code>被注释的元素必须是一个数字，其值必须大于等于指定的最小值  
</code></pre>
<p>@DecimalMax(value)  </p>
<pre><code>被注释的元素必须是一个数字，其值必须小于等于指定的最大值  
</code></pre>
<p>@Size(max&#x3D;, min&#x3D;)  </p>
<pre><code>被注释的元素的大小必须在指定的范围内
</code></pre>
<p>@Digits (integer, fraction)    </p>
<pre><code>被注释的元素必须是一个数字，其值必须在可接受的范围内  
</code></pre>
<p>@Past  </p>
<pre><code>被注释的元素必须是一个过去的日期 
</code></pre>
<p>@Future    </p>
<pre><code>被注释的元素必须是一个将来的日期 
</code></pre>
<p> @Pattern(regex&#x3D;,flag&#x3D;)</p>
<pre><code> 被注释的元素必须符合指定的正则表达式  
</code></pre>
<p>@NotBlank(message &#x3D;)        	</p>
<p>验证字符串非null，且长度必须大于0  </p>
<p>@Email  	</p>
<p>被注释的元素必须是电子邮箱地址  </p>
<p>@Length(min&#x3D;,max&#x3D;)	</p>
<p>被注释的字符串的大小必须在指定的范围内  </p>
<p>@NotEmpty	</p>
<p>  被注释的字符串的必须非空  </p>
<p>@Range(min&#x3D;,max&#x3D;,message&#x3D;)	</p>
<p>被注释的元素必须在合适的范围内</p>
<h2 id="相关依赖"><a href="#相关依赖" class="headerlink" title="相关依赖"></a>相关依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// 依赖</span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
  </entry>
  <entry>
    <title>Linux相关笔记</title>
    <url>/2022/11/08/Linux/</url>
    <content><![CDATA[<h1 id="Linux学习"><a href="#Linux学习" class="headerlink" title="Linux学习"></a>Linux学习</h1><h2 id="常用命令-一般都是命令的组合使用"><a href="#常用命令-一般都是命令的组合使用" class="headerlink" title="常用命令:(一般都是命令的组合使用)"></a>常用命令:(一般都是命令的组合使用)</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">ls	:  列出目录</span><br><span class="line">-a 所有文件,包括隐藏文件,]</span><br><span class="line">-l 文件目录,不包括隐藏文件</span><br><span class="line">ls ll 查看文件</span><br><span class="line">ls -al 查看全部的文件(包括隐藏)以及目录跟用法	(all)</span><br><span class="line">pwd 	显示当前用户所在目录</span><br><span class="line">mkdir -p /test/test1/test2/test3		单次创建多层级目录</span><br><span class="line"></span><br><span class="line">rmdir test 		删除test目录</span><br><span class="line"></span><br><span class="line">cp 需要拷贝的文件名  需要拷贝到的地方   cp拷贝文件</span><br><span class="line"></span><br><span class="line">rm -rf test.sh	删除test.sh文件</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<blockquote>
<p>以下是对这些目录的解释：</p>
<ul>
<li><p><strong>&#x2F;bin</strong>：<br> bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。</p>
</li>
<li><p><strong>&#x2F;boot：</strong><br>&#x3D;&#x3D;这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。&#x3D;&#x3D;</p>
</li>
<li><p><strong>&#x2F;dev ：</strong><br>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</p>
</li>
<li><p><strong>&#x2F;etc：</strong><br>&#x3D;&#x3D;etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。&#x3D;&#x3D;</p>
</li>
<li><p><strong>&#x2F;home</strong>：<br>用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</p>
</li>
<li><p><strong>&#x2F;lib</strong>：<br>lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p>
</li>
<li><p>xxxxxxxxxx31 1<!DOCTYPE html>2&lt;html lang&#x3D;”en” xmlns:th&#x3D;”<a href="http://www.thymeleaf.org&quot;/">http://www.thymeleaf.org&quot;</a> 3      xmlns:shiro&#x3D;”<a href="http://www.pollix.at/thymeleaf/shiro&quot;&gt;4">http://www.pollix.at/thymeleaf/shiro&quot;&gt;4</a><head>5    <meta charset="UTF-8">6    <title>Title</title>7</head>8<body>9​10<p>首页</p>11<h1 th:text="${msg}"></h1>12<!--<div th:if="session.loginUser==null">-->13<div shiro:notauthenticated>14    <a  th:href="@{/toLogin}"> 登录</a>15</div>16<hr>17​18​19<div shiro:haspermission="user:add">20​21    <a th:href="@{/user/add}">添加</a>22​23</div>24​25<div shiro:haspermission="user:update">26    <a th:href="@{/user/update}">修改</a>27</div>28​29​30</body>31html</p>
</li>
<li><p><strong>&#x2F;media</strong>：<br> linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</p>
</li>
<li><p><strong>&#x2F;mnt</strong>：<br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 &#x2F;mnt&#x2F; 上，然后进入该目录就可以查看光驱里的内容了。</p>
</li>
<li><p><strong>&#x2F;opt</strong>：<br>opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p>
</li>
<li><p><strong>&#x2F;proc</strong>：<br>proc 是 Processes(进程) 的缩写，&#x2F;proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p>
</li>
</ul>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>&#x2F;root</strong>：<br>&#x3D;&#x3D;该目录为系统管理员，也称作超级权限者的用户主目录。&#x3D;&#x3D;</p>
</li>
<li><p><strong>&#x2F;sbin</strong>：<br> s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</p>
</li>
<li><p><strong>&#x2F;selinux</strong>：<br> 这个目录是 Redhat&#x2F;CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p>
</li>
<li><p><strong>&#x2F;srv</strong>：<br> 该目录存放一些服务启动之后需要提取的数据。</p>
</li>
<li><p><strong>&#x2F;sys</strong>：</p>
</li>
</ul>
<p> 这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。</p>
<p> sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。</p>
<p> 该文件系统是内核设备树的一个直观反映。</p>
<p> 当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p>
<ul>
<li><p><strong>&#x2F;tmp</strong>：<br> tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。</p>
</li>
<li><p><strong>&#x2F;usr</strong>：<br>&#x3D;&#x3D;usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录&#x3D;&#x3D;</p>
</li>
<li><p><strong>&#x2F;usr&#x2F;bin：</strong><br>系统用户使用的应用程序。</p>
</li>
<li><p><strong>&#x2F;usr&#x2F;sbin：</strong><br>超级用户使用的比较高级的管理程序和系统守护程序。</p>
</li>
<li><p><strong>&#x2F;usr&#x2F;src：</strong><br>内核源代码默认的放置目录。</p>
</li>
<li><p><strong>&#x2F;var</strong>：<br> &#x3D;&#x3D;var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。&#x3D;&#x3D;</p>
</li>
<li><p><strong>&#x2F;run</strong>：<br>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 &#x2F;var&#x2F;run 目录，应该让它指向 run。</p>
</li>
</ul>
</blockquote>
<p><img src="/2022/11/08/Linux/%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A401.png" alt="image-20220922123756617"></p>
<p><img src="/2022/11/08/Linux/%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF.png"><br><img src="/2022/11/08/Linux/%E6%9D%83%E9%99%90%E8%AF%BB%E5%86%99%E6%9F%A5%E8%AF%A2.png" alt="image-20220923085154812"></p>
<p><img src="/2022/11/08/Linux/%E6%9D%83%E9%99%90%E8%AF%BB%E5%86%9901.png" alt="image-20220923085303363"></p>
<h2 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h2><p><img src="/2022/11/08/Linux/cat.png" alt="image-20220923085746933"></p>
<p><img src="/2022/11/08/Linux/cat01.png"></p>
<p><img src="/2022/11/08/Linux/head%E6%93%8D%E4%BD%9C.png" alt="image-20220923091325882"></p>
<h2 id="硬链接和软连接"><a href="#硬链接和软连接" class="headerlink" title="硬链接和软连接"></a>硬链接和软连接</h2><p><img src="/2022/11/08/Linux/%E7%A1%AC%E9%93%BE%E6%8E%A5%E5%92%8C%E8%BD%AF%E8%BF%9E%E6%8E%A5.png" alt="image-20220923091834385"></p>
<p><img src="/2022/11/08/Linux/%E7%A1%AC%E9%93%BE%E6%8E%A5%E5%92%8C%E8%BD%AF%E8%BF%9E%E6%8E%A5%E5%8C%BA%E5%88%AB02.png" alt="image-20220923092003642"></p>
<p><img src="/2022/11/08/Linux/%E7%A1%AC%E9%93%BE%E6%8E%A5%E5%92%8C%E8%BD%AF%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%8C%BA%E5%88%AB.png" alt="image-20220923092011582"></p>
<p><img src="/2022/11/08/Linux/vim%E9%94%AE%E7%9B%98%E5%9B%BE.png" alt="image-20220923092255788"></p>
<h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><p><img src="/2022/11/08/Linux/image-20220923093723149.png" alt="image-20220923093723149"> </p>
<p><img src="/2022/11/08/Linux/image-20220923102502438.png" alt="image-20220923102502438"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-l</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="创建用户组"><a href="#创建用户组" class="headerlink" title="创建用户组"></a>创建用户组</h2><p><img src="/2022/11/08/Linux/image-20220923103040405.png" alt="image-20220923103040405"></p>
<p><img src="/2022/11/08/Linux/image-20220924092352742.png" alt="image-20220924092352742"></p>
<p><img src="/2022/11/08/Linux/image-20220924093736386.png" alt="image-20220924093736386"></p>
<p><img src="/2022/11/08/Linux/image-20220924095525955.png" alt="image-20220924095525955"></p>
<h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><h3 id="rpm安装"><a href="#rpm安装" class="headerlink" title="rpm安装"></a>rpm安装</h3><h4 id="jdk安装"><a href="#jdk安装" class="headerlink" title="jdk安装"></a>jdk安装</h4><p><img src="/2022/11/08/Linux/image-20220924102322089.png" alt="image-20220924102322089"></p>
<h4 id="环境变量配置-etc-profile"><a href="#环境变量配置-etc-profile" class="headerlink" title="环境变量配置/etc/profile"></a>环境变量配置<code>/etc/profile</code></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">JAVA_HOME=/usr/java/jdk1.8.0_202-amd64</span><br><span class="line">CLASSPATH=%JAVA_HOME%/lib:%JAVA_HOME%/jre/lib </span><br><span class="line">PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/jre/lib</span><br><span class="line"><span class="built_in">export</span> PATH CLASSPATH JAVA_HOME</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">soure /etc/profile		# 使一个目录生效</span><br></pre></td></tr></table></figure>



<h4 id="查看端口是否开启"><a href="#查看端口是否开启" class="headerlink" title="查看端口是否开启"></a>查看端口是否开启</h4><p><img src="/2022/11/08/Linux/image-20220924104320612.png" alt="image-20220924104320612"></p>
<h4 id="开启防火墙端口"><a href="#开启防火墙端口" class="headerlink" title="开启防火墙端口"></a>开启防火墙端口</h4><p><img src="/2022/11/08/Linux/image-20220924104426859.png" alt="image-20220924104426859"></p>
<h4 id="重启防火墙"><a href="#重启防火墙" class="headerlink" title="重启防火墙"></a>重启防火墙</h4><p><img src="/2022/11/08/Linux/image-20220924104527924.png" alt="image-20220924104527924"></p>
<h3 id="解压缩安装"><a href="#解压缩安装" class="headerlink" title="解压缩安装"></a>解压缩安装</h3><ol>
<li><p>解压</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-tomcat-9.0.43.tar.gz </span><br></pre></td></tr></table></figure>
</li>
<li><p>启动tomcat测试 .&#x2F;xxx.sh 脚本就可以运行了(绿色是可以执行的,红色是不可以执行的)</p>
<p> <img src="/2022/11/08/Linux/image-20220924121309547.png" alt="image-20220924121309547"></p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./startup.sh 	<span class="comment"># 开启tomcat</span></span><br><span class="line">./shutdown.sh 	<span class="comment"># 关闭tomcat</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>关于8080端口</p>
<p> <img src="/2022/11/08/Linux/image-20220924121638184.png" alt="image-20220924121638184"></p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kuaihua linux]<span class="comment"># ls</span></span><br><span class="line">apache-tomcat-9.0.43.tar.gz  jdk-8u202-linux-x64.rpm  公共  环境  模板  视频  图片  文档  下载  音乐  桌面</span><br><span class="line">[root@kuaihua linux]<span class="comment"># tar -zxvf apache-tomcat-9.0.43.tar.gz  # 解压文件</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2022/11/08/Linux/image-20220924120703270.png" alt="image-20220924120703270"></p>
<p>解压过后就会多一个蓝色的apache-tomcat-9.0.43 文件夹</p>
<p>开启防火墙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、开启防火墙 </span><br><span class="line">    systemctl start firewalld</span><br><span class="line"></span><br><span class="line">2、开放指定端口</span><br><span class="line">  firewall-cmd --zone=public --add-port=1935/tcp --permanent</span><br><span class="line">3、重启后才可以看到开放端口</span><br><span class="line"> systemctl restart firewalld.service</span><br><span class="line">firewall-cmd --list-ports </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2022/11/08/Linux/image-20220924124227974.png" alt="image-20220924124227974"></p>
<h3 id="在线安装-yum安装"><a href="#在线安装-yum安装" class="headerlink" title="在线安装(yum安装)"></a>在线安装(yum安装)</h3><p>Dockerl安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install gcc		安装gcc</span><br><span class="line"></span><br><span class="line">yum -y install gcc-c++		安装gcc-c++</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">yum remove docker /							卸载以前的docker版本</span><br><span class="line">                  docker-client /</span><br><span class="line">                  docker-client-latest /</span><br><span class="line">                  docker-common /</span><br><span class="line">                  docker-latest /</span><br><span class="line">                  docker-latest-logrotate /</span><br><span class="line">                  docker-logrotate /</span><br><span class="line">                  docker-engine</span><br><span class="line"></span><br><span class="line">yum install -y yum-utils /</span><br><span class="line">   device-mapper-persistent-data /</span><br><span class="line">   lvm2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> yum-config-manager /</span><br><span class="line">     --add-repo /</span><br><span class="line">     http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.rep</span><br><span class="line">     </span><br><span class="line">yum -y  install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br><span class="line"></span><br><span class="line">systemctl start docker		开启docker</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ps -ef|grep docker <span class="comment"># 查看docker进程</span></span><br><span class="line"></span><br><span class="line">docker run hello-world 		<span class="comment"># docker跑hello-world程序,没有就从官网拉去</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker run hello-world			# 跑hello-world</span></span><br><span class="line">Unable to find image <span class="string">&#x27;hello-world:latest&#x27;</span> locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">2db29710123e: Pull complete </span><br><span class="line">Digest: sha256:62af9efd515a25f84961b70f973a798d2eca956b1b2b026d0a4a63a3b0b6a3f2</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h3 id="rpm卸载"><a href="#rpm卸载" class="headerlink" title="rpm卸载"></a>rpm卸载</h3><p><img src="/2022/11/08/Linux/image-20220924102439131.png" alt="image-20220924102439131"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Mysql相关笔记</title>
    <url>/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Mysql笔记"><a href="#Mysql笔记" class="headerlink" title="Mysql笔记"></a>Mysql笔记</h1><h2 id="1-关于时间的数据类型"><a href="#1-关于时间的数据类型" class="headerlink" title="1.关于时间的数据类型"></a>1.关于时间的数据类型</h2><p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20221013091604863.png" alt="image-20221013091604863"></p>
<span id="more"></span>


<h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">创建数据库:</span><br><span class="line">	<span class="keyword">create</span> database 数据库名称;</span><br><span class="line">选中数据库操作:</span><br><span class="line">	use 数据库名称;</span><br><span class="line">查看某个数据库中的数据表</span><br><span class="line">	<span class="keyword">show</span> tables;</span><br><span class="line">创建数据表操作:</span><br><span class="line">	crate <span class="keyword">table</span> 数据表名称(</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">	owner <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">	species <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">	sex <span class="type">char</span>(<span class="number">1</span>),</span><br><span class="line">	birth <span class="type">date</span>,</span><br><span class="line">	death <span class="type">DATE</span>;</span><br><span class="line">	)</span><br><span class="line">查看创建好的数据表的结构:</span><br><span class="line">	<span class="keyword">describe</span> 数据表名称;</span><br><span class="line"></span><br><span class="line">查看表中的数据</span><br><span class="line">	<span class="keyword">select</span> <span class="operator">*</span> form 数据表;</span><br><span class="line"></span><br><span class="line">往数据表中添加数据</span><br><span class="line">	<span class="keyword">INSERT</span> <span class="keyword">INTO</span>	数据表</span><br><span class="line">	<span class="keyword">VALUES</span>(<span class="string">&#x27;Puffball&#x27;</span>,<span class="string">&#x27;Diane&#x27;</span>,<span class="string">&#x27;hamster&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;1990-3-8&#x27;</span>,<span class="keyword">NULL</span>)</span><br><span class="line"></span><br><span class="line">删除数据表的特定内容</span><br><span class="line">	<span class="keyword">delete</span> form 数据表 <span class="keyword">where</span> 要删除的数据的某一个符号 <span class="operator">=</span> <span class="string">&#x27;符号的值&#x27;</span></span><br><span class="line"></span><br><span class="line">修改i数据库的内容:</span><br><span class="line">	<span class="keyword">update</span> 数据表 <span class="keyword">set</span>要修改为的值 <span class="keyword">where</span> 要修改的那一条数据的判别符号,如name,的</span><br><span class="line"></span><br><span class="line">限制下标</span><br><span class="line">	<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">0</span>,<span class="number">3</span>		# 查询<span class="keyword">user</span>表第<span class="number">0</span>到<span class="number">3</span>,用来分页的时候,<span class="number">0</span>和<span class="number">3</span>可以使用map来存储,实现分页操作</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20221125212901913.png" alt="image-20221125212901913"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1-主键约束: 它可以唯一确定一张表中的一条记录,使得该字段不重复且不为空</span><br><span class="line">	create table user(</span><br><span class="line">		<span class="built_in">id</span> int primary key,</span><br><span class="line">		name varchar(20)</span><br><span class="line">		);</span><br><span class="line">2-联合主键约束:	</span><br><span class="line">	create table user2(</span><br><span class="line">		<span class="built_in">id</span> int,</span><br><span class="line">		name varchar(20),</span><br><span class="line">		password varchar(20),</span><br><span class="line">		primary key(<span class="built_in">id</span>, name)</span><br><span class="line">		);</span><br><span class="line">3- 自增约束:</span><br><span class="line">create table user3(</span><br><span class="line">	<span class="built_in">id</span> int primary key auto_increment, //在数据表中<span class="built_in">id</span>自动增加</span><br><span class="line">	name varchar(20)</span><br><span class="line">	);</span><br><span class="line"></span><br><span class="line">插入方式:insert into user3(name) values(<span class="string">&quot;zhangsna&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">修改表的结构</span><br><span class="line">	添加主键约束</span><br><span class="line">		alter table 表的名称 add 约束形式(在哪里添加);</span><br><span class="line">	删除主键约束</span><br><span class="line">		alter tabla 表的名称 drop 约束形式(在哪里删除);</span><br><span class="line">	修改主键约束</span><br><span class="line">		alter table 表的名称 modify 修改的字段 修改的约束形式;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4-唯一约束:约束修饰字段的值不可以重复,组合起来不重复就可以</span><br><span class="line">	create table user5(</span><br><span class="line">		<span class="built_in">id</span> int,</span><br><span class="line">		name varchar(20),</span><br><span class="line">		unique(name)		//修饰字段不可以重复</span><br><span class="line">		);</span><br><span class="line">	或者 create table user5(</span><br><span class="line">			<span class="built_in">id</span> int,</span><br><span class="line">			name varchar(20)</span><br><span class="line">			);</span><br><span class="line">		alter table user5 add unique(name);</span><br><span class="line"></span><br><span class="line">5-非空约束:约束值不能为空</span><br><span class="line"> crate table 表的名称(</span><br><span class="line">	<span class="built_in">id</span> int,</span><br><span class="line">	name varchar(20) not null</span><br><span class="line">	);</span><br><span class="line"></span><br><span class="line">6-默认约束:插入字段值时如果没有传值就会使用默认值</span><br><span class="line">	create table user(</span><br><span class="line">		<span class="built_in">id</span> int ,</span><br><span class="line">		name varchar(20),</span><br><span class="line">		age int dafault 19	// age 的默认就是19</span><br><span class="line">		);</span><br><span class="line">7-外键约束:</span><br><span class="line">最起码需要两张表,主表和副标</span><br><span class="line">	create table classes(</span><br><span class="line">		<span class="built_in">id</span> int primary key,</span><br><span class="line">		name varchar(20)</span><br><span class="line">		);</span><br><span class="line">	create table student(</span><br><span class="line">		<span class="built_in">id</span> int primary key,</span><br><span class="line">		name varchar(20),</span><br><span class="line">		class_id int,</span><br><span class="line">		foreign key(class_id) references classes(<span class="built_in">id</span>)	// 说明class_id必选是来之classes表中的<span class="built_in">id</span></span><br><span class="line">		);</span><br></pre></td></tr></table></figure>

<h2 id="数据库类别"><a href="#数据库类别" class="headerlink" title="数据库类别"></a>数据库类别</h2><p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20221125192514776.png" alt="image-20221125192514776"></p>
<p>关系型数据库:		类似于excel表</p>
<p>非关系型数据库:		类似键值对,k-v存储,存的是对象,可以扩展的对象</p>
<hr>
<p>数据库不区分大小写</p>
<h1 id="2-数据库中相关操作"><a href="#2-数据库中相关操作" class="headerlink" title="2. 数据库中相关操作"></a>2. 数据库中相关操作</h1><p>&#x3D;&#x3D;操作数据库&gt;操作数据库中的表&gt;表中的数据&#x3D;&#x3D;</p>
<h2 id="操作数据库-show-Drop-Create-Use"><a href="#操作数据库-show-Drop-Create-Use" class="headerlink" title="操作数据库(show Drop Create Use)"></a>操作数据库(show Drop Create Use)</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">show</span> databases </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE (IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>) westos</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> westos</span><br><span class="line"></span><br><span class="line">USE db03</span><br><span class="line"><span class="comment">-- `可以使用让数据库名字不高亮,同时两个&quot;-&quot;是注释符</span></span><br><span class="line">use `db02`</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student`(</span><br><span class="line">	`id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT	<span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">	`name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span>  COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">	`age` <span class="type">VARCHAR</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;18&#x27;</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">	`sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;女&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">	`brithday` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY(`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure>



<h2 id="操作数据库中的表"><a href="#操作数据库中的表" class="headerlink" title="操作数据库中的表"></a>操作数据库中的表</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20221125210054507.png" alt="image-20221125210054507"><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20221125211524636.png" alt="image-20221125211524636"></p>
<p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20221125211711271.png" alt="image-20221125211711271"></p>
<p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20221125211744198.png" alt="image-20221125211744198"></p>
<p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20221125213352095.png" alt="image-20221125213352095"></p>
<p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20221125213602112.png" alt="image-20221125213602112"></p>
<h3 id="数据表的类型"><a href="#数据表的类型" class="headerlink" title="数据表的类型"></a>数据表的类型</h3><p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20221125220551605.png" alt="image-20221125220551605"></p>
<p>&#x3D;&#x3D;实际&#x3D;&#x3D;</p>
<p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20221125222417095.png" alt="image-20221125222417095"></p>
<p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20221125222540633.png" alt="image-20221125222540633"></p>
<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20221125215333937.png" alt="image-20221125215333937"></p>
<p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20221125220037877.png" alt="image-20221125220037877"></p>
<h2 id="操作表中数据"><a href="#操作表中数据" class="headerlink" title="操作表中数据"></a>操作表中数据</h2><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20221203113416662.png" alt="image-20221203113416662"></p>
<h4 id="去重distant"><a href="#去重distant" class="headerlink" title="去重distant"></a>去重distant</h4><p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20221203113652502.png" alt="image-20221203113652502"></p>
<h1 id="3-数据引擎MyIsam与InnoDb-常用"><a href="#3-数据引擎MyIsam与InnoDb-常用" class="headerlink" title="3. 数据引擎MyIsam与InnoDb(常用)"></a>3. 数据引擎MyIsam与InnoDb(常用)</h1><p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20221231211423088.png" alt="image-20221231211423088"></p>
<p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20221231211858525.png" alt="image-20221231211858525"></p>
<p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20221231211950795.png" alt="image-20221231211950795"></p>
<h1 id="4-数据库级别外键"><a href="#4-数据库级别外键" class="headerlink" title="4. 数据库级别外键"></a>4. 数据库级别外键</h1><h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一:"></a>方式一:</h2><p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20230101154248939.png" alt="image-20230101154248939"></p>
<h2 id="方式二-创建标成功后添加外键约束"><a href="#方式二-创建标成功后添加外键约束" class="headerlink" title="方式二:创建标成功后添加外键约束"></a>方式二:创建标成功后添加外键约束</h2><p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20230101154530108.png" alt="image-20230101154530108"></p>
<h1 id="5-DML语言"><a href="#5-DML语言" class="headerlink" title="5. DML语言:"></a>5. DML语言:</h1><h2 id="INSERT-插入"><a href="#INSERT-插入" class="headerlink" title="INSERT(插入)"></a>INSERT(插入)</h2><p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20230101155247672.png" alt="image-20230101155247672"></p>
<h2 id="UPDATE-更改"><a href="#UPDATE-更改" class="headerlink" title="UPDATE(更改)"></a>UPDATE(更改)</h2><p>语法:</p>
<p>​	Update 表 set 修改因素 where 修改条件</p>
<p>如果不指定条件的话,就会执行全部,然后就得跑路了</p>
<h2 id="Delete-删除"><a href="#Delete-删除" class="headerlink" title="Delete(删除)"></a>Delete(删除)</h2><p>语法:</p>
<p>delete from 表 where 删除条件</p>
<p>不加删除条件会把所有的数据都删掉</p>
<h2 id="Truncate-清空"><a href="#Truncate-清空" class="headerlink" title="Truncate(清空)"></a>Truncate(清空)</h2><p>语法:</p>
<p>Truncate <code>表明</code></p>
<h3 id="Delete与Truncate的区别"><a href="#Delete与Truncate的区别" class="headerlink" title="Delete与Truncate的区别:"></a>Delete与Truncate的区别:</h3><ul>
<li>相同点:都能删除数据,都不会影响表的结构</li>
<li>不同点:<ul>
<li>Truncate重新设置,自增数列清零</li>
<li>Truncate不影响事务</li>
</ul>
</li>
</ul>
<h2 id="SELECT-查询"><a href="#SELECT-查询" class="headerlink" title="SELECT(查询)"></a>SELECT(查询)</h2><p>语法:</p>
<p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20230105110318389.png" alt="image-20230105110318389"></p>
<p>select <code>字段</code>1 ,<code>字段2</code> from <code>表</code></p>
<p>select <code>字段</code> as<code>别名</code> from <code>表</code></p>
<p>函数:concat(a,b)  拼接字符串</p>
<p>select concat(‘姓名:’,字段) as 别名 from <code>表</code>	</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有的字段不是那么的见名知意基于可以起别名</span><br></pre></td></tr></table></figure>

<h2 id="Distinct-去重"><a href="#Distinct-去重" class="headerlink" title="Distinct(去重)"></a>Distinct(去重)</h2><p>取出select语句中重复的数据</p>
<p>语法:</p>
<p>select distinct <code>字段</code> from 表</p>
<h2 id="其它不常用功能"><a href="#其它不常用功能" class="headerlink" title="其它不常用功能"></a>其它不常用功能</h2><p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20230103111059879.png" alt="image-20230103111059879"></p>
<p>select <code>表达式</code> from <code>表</code></p>
<h2 id="where条件字句与模糊查询-逻辑运算符"><a href="#where条件字句与模糊查询-逻辑运算符" class="headerlink" title="where条件字句与模糊查询(逻辑运算符)"></a>where条件字句与模糊查询(逻辑运算符)</h2><p>&#x3D;&#x3D;逻辑运算符&#x3D;&#x3D;</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>and &amp;&amp;</td>
<td>a&amp;&amp;b</td>
<td>&#x3D;&#x3D;逻辑与,两个为真才是真&#x3D;&#x3D;</td>
</tr>
<tr>
<td>or ||</td>
<td>a||b</td>
<td>&#x3D;&#x3D;逻辑或,一个是真就是真&#x3D;&#x3D;</td>
</tr>
<tr>
<td>not !</td>
<td>!a</td>
<td>&#x3D;&#x3D;逻辑非,真为假,假为真&#x3D;&#x3D;</td>
</tr>
</tbody></table>
<p>&#x3D;&#x3D;尽量使用英文字母,而不是符号&#x3D;&#x3D;</p>
<p>&#x3D;&#x3D;比较运算符&#x3D;&#x3D;</p>
<p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20230103120530899.png" alt="image-20230103120530899"></p>
<p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20230103120644235.png" alt="image-20230103120644235"><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20230103120936755.png" alt="image-20230103120936755"></p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>IS NULL</td>
<td>a is null</td>
<td>如果操作符为null,则是真</td>
</tr>
<tr>
<td>IS NOT NULL</td>
<td>a is not null</td>
<td>如果操作符不是null,则是真</td>
</tr>
<tr>
<td>between</td>
<td>a between b and c</td>
<td>如果a在b和c之间,则是真</td>
</tr>
<tr>
<td>&#x3D;&#x3D;in&#x3D;&#x3D;</td>
<td>a in(‘a’,’b’,’c’…)</td>
<td>若果a在a,b,c其中的一个或者多个值中,则是真</td>
</tr>
<tr>
<td>&#x3D;&#x3D;like&#x3D;&#x3D;</td>
<td>a like b</td>
<td>Sql匹配,如果a匹配b,则是真</td>
</tr>
</tbody></table>
<p>比较重要的就是&#x3D;&#x3D;in&#x3D;&#x3D;和&#x3D;&#x3D;like&#x3D;&#x3D;</p>
<p>&#x3D;&#x3D;%&#x3D;&#x3D;表示0到任意字符</p>
<p>&#x3D;&#x3D;_&#x3D;&#x3D;表示一个字符</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">其中比较重要的就是模糊查询,<span class="keyword">like</span>与<span class="string">&#x27;%&#x27;</span>和<span class="string">&#x27;_&#x27;</span>搭配</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">	<span class="comment">-- 从student表中查找studentName姓刘的同学</span></span><br><span class="line">	<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> studentName <span class="keyword">like</span> <span class="string">&#x27;刘%&#x27;</span> </span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- 从student表中查找studentName姓刘的,并且名字只有两个字的同学</span></span><br><span class="line">	<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> studentName <span class="keyword">like</span> <span class="string">&#x27;刘_&#x27;</span> </span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- 从student表中查找studentName中名字带&#x27;瑞&#x27;字的同学</span></span><br><span class="line">	<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> studentName <span class="keyword">like</span> <span class="string">&#x27;%瑞%&#x27;</span> </span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- 从student表中查找studentName中名字带&#x27;瑞&#x27;字的并且必须是三个字的同学</span></span><br><span class="line">	<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> studentName <span class="keyword">like</span> <span class="string">&#x27;_瑞_&#x27;</span> </span><br></pre></td></tr></table></figure>

<h2 id="连表查询-注意需要反复用到表去别名的方式"><a href="#连表查询-注意需要反复用到表去别名的方式" class="headerlink" title="连表查询(注意需要反复用到表去别名的方式)"></a>连表查询(注意需要反复用到表去别名的方式)</h2><p>&#x3D;&#x3D;关键点&#x3D;&#x3D;:两个表之间一定是要有交叉点的,没有交叉点是没有办法进行查询的</p>
<p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20230103202711088.png" alt="image-20230103202711088"></p>
<p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20230103202808391.png" alt="image-20230103202808391"></p>
<p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20230103203007491.png" alt="image-20230103203007491"></p>
<p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20230103212326766.png" alt="image-20230103212326766"></p>
<h2 id="自连接-一张表当做两张表来用-这必须器别名"><a href="#自连接-一张表当做两张表来用-这必须器别名" class="headerlink" title="自连接(一张表当做两张表来用),这必须器别名"></a>自连接(一张表当做两张表来用),这必须器别名</h2><p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20230103215715116.png" alt="image-20230103215715116"></p>
<h2 id="分页-limit-和排序-Order-by"><a href="#分页-limit-和排序-Order-by" class="headerlink" title="分页(limit)和排序(Order by)"></a>分页(limit)和排序(Order by)</h2><p>分页原因:</p>
<p>​	缓解数据库压力,给人更好的体验,没有分页的是瀑布流.</p>
<p>​	语法: limit 起始值,页面大小  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- limit 0,5  实际是从0+1开始,1,2,3,4,5 所以是1~5</span></span><br><span class="line"><span class="comment">-- limit 1,6  实际从1+1开始,2,3,4,5,6,7 所以说是2~7</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20230105111020457.png" alt="image-20230105111020457">		<img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20230105111235590.png" alt="image-20230105111235590"></p>
<p> 升序(asc):</p>
<p> 降序(desc):</p>
<h2 id="分组和过滤"><a href="#分组和过滤" class="headerlink" title="分组和过滤"></a>分组和过滤</h2><p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20230105124038815.png" alt="image-20230105124038815"></p>
<h2 id="子查询-由里及外"><a href="#子查询-由里及外" class="headerlink" title="子查询(由里及外)"></a>子查询(由里及外)</h2><p>​	<img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20230105113442200.png" alt="image-20230105113442200"></p>
<p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20230105113414282.png" alt="image-20230105113414282"></p>
<p>&#x3D;&#x3D;总结&#x3D;&#x3D;:</p>
<p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20230105155446165.png" alt="image-20230105155446165"></p>
<h1 id="6-Mysql函数"><a href="#6-Mysql函数" class="headerlink" title="6. Mysql函数"></a>6. Mysql函数</h1><p><a href="http://c.biancheng.net/mysql/function/">常用函数地址</a></p>
<h3 id="常用到的函数"><a href="#常用到的函数" class="headerlink" title="常用到的函数"></a>常用到的函数</h3><table>
<thead>
<tr>
<th><a href="http://c.biancheng.net/mysql/concat.html">CONCAT</a></th>
<th>合并字符串函数，返回结果为连接参数产生的字符串，参数可以使一个或多个</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><a href="http://c.biancheng.net/mysql/ceil_celing.html">CEIL 和 CEILING</a></th>
<th>两个函数功能相同，都是返回不小于参数的最小整数，即向上取整</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://c.biancheng.net/mysql/floor.html">FLOOR</a></td>
<td>向下取整，返回值转化为一个BIGINT</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/rand.html">RAND</a></td>
<td>生成一个0~1之间的随机数，传入整数参数是，用来产生重复序列</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/round.html">ROUND</a></td>
<td>对所传参数进行四舍五入</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><a href="http://c.biancheng.net/mysql/max.html">MAX</a></th>
<th>查询指定列的最大值</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://c.biancheng.net/mysql/min.html">MIN</a></td>
<td>查询指定列的最小值</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/count.html">COUNT</a></td>
<td>统计查询结果的行数</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/sum.html">SUM</a></td>
<td>求和，返回指定列的总和</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/avg.html">AVG</a></td>
<td>求平均值，返回指定列数据的平均值</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><a href="http://c.biancheng.net/mysql/if.html">IF</a></th>
<th>判断，流程控制</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://c.biancheng.net/mysql/ifnull.html">IFNULL</a></td>
<td>判断是否为空</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/case.html">CASE</a></td>
<td>搜索语句</td>
</tr>
</tbody></table>
<h3 id="关于时间的"><a href="#关于时间的" class="headerlink" title="关于时间的"></a>关于时间的</h3><p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20230105122208751.png" alt="image-20230105122208751"></p>
<p>聚合函数(常用)</p>
<p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20230105122735760.png" alt="image-20230105122735760"></p>
<h1 id="7-MD5加密"><a href="#7-MD5加密" class="headerlink" title="7. MD5加密"></a>7. MD5加密</h1><p>什么是MD5:</p>
<p><strong>MD5信息摘要算法</strong>（英语：MD5 Message-Digest Algorithm），一种被广泛使用的<a href="https://baike.baidu.com/item/%E5%AF%86%E7%A0%81%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0/14937715?fromModule=lemma_inlink">密码散列函数</a>，可以产生出一个128位（16<a href="https://baike.baidu.com/item/%E5%AD%97%E8%8A%82/1096318?fromModule=lemma_inlink">字节</a>）的散列值（hash value），用于确保信息传输完整一致.</p>
<p>主要是增加算法的复杂性和不可逆性</p>
<p>MD5不可逆,但是具体的值的MD5是一致的</p>
<p>MD5破解原理是有一个MD5字典,字典存放的是MD5加密后的在值,然后进行加密后的值的比对.</p>
<p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20230105154916227.png" alt="image-20230105154916227"></p>
<h1 id="8-事务"><a href="#8-事务" class="headerlink" title="8. 事务:"></a>8. 事务:</h1><p>&#x3D;&#x3D;要么都成功,要么都失败&#x3D;&#x3D;</p>
<h2 id="8-1四大原则-ACID"><a href="#8-1四大原则-ACID" class="headerlink" title="8.1四大原则(ACID)"></a>8.1四大原则(ACID)</h2><p><strong>ACID</strong>，是指<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F?fromModule=lemma_inlink">数据库管理系统</a>（<a href="https://baike.baidu.com/item/DBMS?fromModule=lemma_inlink">DBMS</a>）在写入或更新资料的过程中，为保证<a href="https://baike.baidu.com/item/%E4%BA%8B%E5%8A%A1?fromModule=lemma_inlink">事务</a>（transaction）是正确可靠的，所必须具备的四个特性：<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%AD%90%E6%80%A7?fromModule=lemma_inlink">原子性</a>（atomicity，或称不可分割性）、<a href="https://baike.baidu.com/item/%E4%B8%80%E8%87%B4%E6%80%A7?fromModule=lemma_inlink">一致性</a>（consistency）、<a href="https://baike.baidu.com/item/%E9%9A%94%E7%A6%BB%E6%80%A7?fromModule=lemma_inlink">隔离性</a>（isolation，又称独立性）、<a href="https://baike.baidu.com/item/%E6%8C%81%E4%B9%85%E6%80%A7?fromModule=lemma_inlink">持久性</a>（durability）。</p>
<p><strong>原子性</strong></p>
<p>要么成功要么失败</p>
<p><strong>一致性</strong></p>
<p>无论如何操作数据的最终结果都要保持一致性,即最终一致性</p>
<p><strong>持久性</strong></p>
<p>事务一旦提交就会持久化到数据库中,不可以逆转,但是没提交就会回到断电前的状态,数据不会发生改变</p>
<p><strong>隔离性</strong></p>
<p>为了防止多个用户**并发	**访问数据库,为了防止数据受到干扰,数据库回味每一个用户开启事务,防止数据丢失.</p>
<p>数据隔离发生的一些问题</p>
<p><strong>脏读</strong></p>
<p>一个事务读取了另一个事务未提交的数据</p>
<p><strong>虚读</strong></p>
<p>一个事务读取到另一个事务插入的数据,导致前后数据不一致</p>
<p><strong>不可重复读</strong></p>
<p>一个事务读取某一行数据的时候,多次读取数据不同,也不一定是数据错误,也可能是某些场合不同</p>
<p>&#x3D;&#x3D;mysql的事务默认是开启的,但是也可以手动关闭&#x3D;&#x3D;</p>
<p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20230105161307067.png" alt="image-20230105161307067"></p>
<h1 id="9-索引"><a href="#9-索引" class="headerlink" title="9. 索引"></a>9. 索引</h1><p>在<a href="https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/1237340?fromModule=lemma_inlink">关系数据库</a>中，索引是一种单独的、物理的对数据库表中一列或多列的值进行排序的一种<a href="https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/350782?fromModule=lemma_inlink">存储结构</a>，它是某个表中一列或若干列值的集合和相应的指向表中物理标识这些值的数据页的逻辑<a href="https://baike.baidu.com/item/%E6%8C%87%E9%92%88/2878304?fromModule=lemma_inlink">指针</a>清单。索引的作用相当于图书的<a href="https://baike.baidu.com/item/%E7%9B%AE%E5%BD%95/96183?fromModule=lemma_inlink">目录</a>，可以根据目录中的<a href="https://baike.baidu.com/item/%E9%A1%B5%E7%A0%81/7716178?fromModule=lemma_inlink">页码</a>快速找到所需的内容。</p>
<p>类似于一本书的目录</p>
<p>&#x3D;&#x3D;索引是可以帮助mysql高效获取数据的数据结构&#x3D;&#x3D;</p>
<p>&#x3D;&#x3D;索引是数据结构&#x3D;&#x3D;</p>
<h2 id="9-1-索引分类"><a href="#9-1-索引分类" class="headerlink" title="9.1 索引分类"></a>9.1 索引分类</h2><ol>
<li>主键索引 primary key<ul>
<li>唯一的标识,主键不可以重复,只能有一个列作为主键</li>
</ul>
</li>
<li>唯一索引 UNIQUE KEY<ul>
<li>不是唯一,但是它避免重复的列出现,唯一索引可以重复,多个列都可以标识为唯一索引</li>
</ul>
</li>
<li><h2 id="常规索引-KEY-x2F-INDEX"><a href="#常规索引-KEY-x2F-INDEX" class="headerlink" title="常规索引  KEY&#x2F;INDEX"></a>常规索引  KEY&#x2F;INDEX</h2></li>
<li><h2 id="全文索引-FULLtEXT"><a href="#全文索引-FULLtEXT" class="headerlink" title="全文索引 FULLtEXT"></a>全文索引 FULLtEXT</h2></li>
</ol>
<h2 id="9-2-explain-分析sql执行情况"><a href="#9-2-explain-分析sql执行情况" class="headerlink" title="9.2 explain 分析sql执行情况"></a>9.2 explain 分析sql执行情况</h2><h2 id="9-3-测试索引-sql是可以编程的-插入100w数据试试-不要求掌握"><a href="#9-3-测试索引-sql是可以编程的-插入100w数据试试-不要求掌握" class="headerlink" title="9.3 测试索引(sql是可以编程的,插入100w数据试试)不要求掌握"></a>9.3 测试索引(sql是可以编程的,插入100w数据试试)不要求掌握</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `STUDENT`(</span><br><span class="line">	`id` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT  COMMENT <span class="string">&#x27;学生id&#x27;</span>,</span><br><span class="line">	`name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">	`email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">	`phone` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;电话&#x27;</span>,</span><br><span class="line">	`age` TINYINT(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">	`<span class="built_in">current_time</span>` datetime <span class="keyword">DEFAULT</span>(<span class="built_in">CURRENT_TIME</span>) COMMENT <span class="string">&#x27;现在时间&#x27;</span>,</span><br><span class="line">	`update_time` <span class="type">TIMESTAMP</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span>(<span class="built_in">CURRENT_TIME</span>) COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY(`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;学生表&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--下面是写自己的还书</span></span><br><span class="line"></span><br><span class="line">delimiter $$				<span class="comment">-- 写函数前必须写的,标志后面是函数</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mock_data()			<span class="comment">-- 创建一个函数叫做mock_data()</span></span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">INT</span> <span class="keyword">DETERMINISTIC</span>		<span class="comment">--DETERMINISTIC这个在mysql8.0后才需要加的,8前是不需要加的</span></span><br><span class="line"><span class="keyword">BEGIN</span>		<span class="comment">-- 标志函数开始写了</span></span><br><span class="line"><span class="comment">-- 下面是函数体</span></span><br><span class="line">	<span class="keyword">DECLARE</span> num <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">100000</span>;</span><br><span class="line">	<span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;	</span><br><span class="line">	WHILE i<span class="operator">&lt;</span>num DO</span><br><span class="line">		<span class="keyword">insert</span> <span class="keyword">into</span> school.student(name,email,phone,age)</span><br><span class="line">		<span class="keyword">values</span> (concat(<span class="string">&#x27;用户&#x27;</span>,i),<span class="string">&#x27;123123@qq.com&#x27;</span>,<span class="built_in">floor</span>(concat(<span class="string">&#x27;18&#x27;</span>,rand()<span class="operator">*</span>(<span class="number">999999999</span><span class="number">-100000000</span>)<span class="operator">+</span><span class="number">1000000000</span>)),<span class="built_in">floor</span>(rand()<span class="operator">*</span><span class="number">100</span>)); 	<span class="comment">--concat(&#x27;z&#x27;,&#x27;b&#x27;)拼接字符&#x27;zb&#x27;</span></span><br><span class="line">		<span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">	<span class="keyword">END</span> WHILE;</span><br><span class="line">	<span class="keyword">RETURN</span> i;</span><br><span class="line"><span class="keyword">END</span>;		<span class="comment">-- 表示函数结束了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> mock_data();		<span class="comment">-- 执行我们自己写的函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> index id_school_name <span class="keyword">on</span> student(`name`)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 这样可以查结果查的更快,这就是索引的作用</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> name <span class="operator">=</span><span class="string">&#x27;用户12312&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h2 id="9-4-索引原则"><a href="#9-4-索引原则" class="headerlink" title="9.4 索引原则"></a>9.4 索引原则</h2><ul>
<li>索引不是越多越好</li>
<li>不要对进程变动小的数据添加索引</li>
<li>小数据了不需要加索引</li>
<li>索引一般加在常用来查询的数据的字段上(&#x3D;&#x3D;create index id_school_name on student(<code>name</code>)&#x3D;&#x3D;)</li>
</ul>
<h2 id="9-5索引的数据结构"><a href="#9-5索引的数据结构" class="headerlink" title="9.5索引的数据结构"></a>9.5索引的数据结构</h2><p>hash 类型的索引</p>
<p>Btree: innodb 的默认数据结构</p>
<h1 id="10-权限管理和备份"><a href="#10-权限管理和备份" class="headerlink" title="10.权限管理和备份"></a>10.权限管理和备份</h1><h2 id="10-1创建用户和改变用户权限"><a href="#10-1创建用户和改变用户权限" class="headerlink" title="10.1创建用户和改变用户权限"></a>10.1创建用户和改变用户权限</h2><p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20230110221503332.png" alt="image-20230110221503332"></p>
<h2 id="10-2-数据库备份"><a href="#10-2-数据库备份" class="headerlink" title="10.2 数据库备份"></a>10.2 数据库备份</h2><p>数据备份的原因:</p>
<ul>
<li>保证数据不丢失</li>
<li>数据转移</li>
</ul>
<p>Mysql数据备份的方式:</p>
<ol>
<li><p>物理层面的导出,直接拷贝磁盘上mysql中的data文件夹中需要的数据</p>
</li>
<li><p>在程序上想要拷贝的表或者数据库中点击右键,点击备份或者数据</p>
</li>
<li><p>使用mysqldump在命令行导入(cmd)</p>
<p> <img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20230111121658298.png" alt="image-20230111121658298"></p>
</li>
</ol>
<h1 id="11-规范数据库设计"><a href="#11-规范数据库设计" class="headerlink" title="11.规范数据库设计\"></a>11.规范数据库设计\</h1><p><strong>为什么要对数据库进行设计?</strong></p>
<p>单个数据库比较简单是时候我们就需要对数据库进行设计,但是对于复杂的数据库我们就要进行设计了</p>
<p><strong>糟糕的数据库设计</strong></p>
<ul>
<li>数据冗余</li>
<li>数据的插入和删除都比较麻烦<strong>屏蔽使用物理外键</strong></li>
<li>程序的性能 差</li>
</ul>
<p><strong>好的数据库设计</strong></p>
<ul>
<li>节省内存空间</li>
<li>方便开发</li>
<li>提高程序的性能</li>
<li>方便开发系统</li>
</ul>
<p><strong>软件开发的数据库设计经历的步骤</strong></p>
<ul>
<li>需求分析:分析业务和需求处理的数据库的需求</li>
<li>概要设计:设计关系图E_R图</li>
</ul>
<p><strong>举例(个人博客为例)</strong></p>
<p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20230111122807933.png" alt="image-20230111122807933"></p>
<ul>
<li><p>需求分析:</p>
<ul>
<li>用户表(用户登录注销,用户的个人信息填写,写博客,创建分类)</li>
<li>分类的表(文章的分类,谁写的文章)</li>
<li>文章表(文章的信息)</li>
<li>友情链接表</li>
<li>自定义表(系统信息,某个关键字,或者一些字段) key:value</li>
</ul>
</li>
<li><p>标识实体类(把需求落地到每一个字段)</p>
</li>
<li><p>标识实体之间的关系</p>
<ul>
<li>写博客  user–&gt;blog</li>
<li>创建分类 user–&gt;category</li>
<li>关注  user–&gt;user</li>
<li>友情链接  links</li>
<li>评论 user–user–blog</li>
</ul>
</li>
</ul>
<h1 id="12-数据库的归约-三大范式"><a href="#12-数据库的归约-三大范式" class="headerlink" title="12.数据库的归约,三大范式"></a>12.数据库的归约,三大范式</h1><p><strong>为什么需要有效的数据范式化</strong></p>
<ul>
<li><p>信息重复</p>
</li>
<li><p>更新异常</p>
</li>
<li><p>插入异常</p>
<ul>
<li>无法正常显示信息</li>
</ul>
</li>
<li><p>删除异常</p>
<ul>
<li>丢失有效信息</li>
</ul>
<p>  <strong>第一范式(1NF)：</strong>属性不可分割，即每个属性都是不可分割的原子项。(实体的属性即表中的列) &#x3D;&#x3D;理解:原子性,不可以拆分&#x3D;&#x3D;</p>
<p>  第二范式(2NF)：满足第一范式；且不存在部分依赖，即非主属性必须完全依赖于主属性。(主属性即主键；完全依赖是针对于联合主键的情况，非主键列不能只依赖于主键的一部分)</p>
<p>  &#x3D;&#x3D;理解:每张表只做一件事情,比如,一张订单表,可以记录订单的金额,数量,单价,但是不能记录订单的时间,订单的总额&#x3D;&#x3D;</p>
<p>  **第三范式(3NF)**：满足第二范式；且不存在传递依赖，即非主属性不能与非主属性之间有依赖关系，非主属性必须直接依赖于主属性，不能间接依赖主属性。（A -&gt; B, B -&gt;C, A -&gt; C）</p>
<p>  &#x3D;&#x3D;理解:保证每一列数据与主键都是直接相关的,不能是间接相关的,这样才符合。&#x3D;&#x3D;</p>
</li>
</ul>
<p>&#x3D;&#x3D;总结&#x3D;&#x3D;：</p>
<p>​	<strong>需要在规范化和性能之间做出取舍</strong></p>
<p>关联的数据表不得超过三张：</p>
<ul>
<li>考虑商业话的成本和需求，相比与规范化，性能更加重要，这样可以保证用户的体验性</li>
<li>在规范性能的问题的时候，尽量考虑规范性</li>
<li>故意从某些表中添加数据，从多表查询变成单表查询</li>
<li>故意添加计算列，从大数据量变成小数据量</li>
</ul>
<h1 id="13-JDBC（重点）"><a href="#13-JDBC（重点）" class="headerlink" title="13.JDBC（重点）"></a>13.JDBC（重点）</h1><h2 id="1-数据库驱动"><a href="#1-数据库驱动" class="headerlink" title="1.数据库驱动"></a>1.数据库驱动</h2><p><img src="/2022/11/09/Mysql%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/image-20230111192448063.png" alt="image-20230111192448063"></p>
<h2 id="2-JDBC"><a href="#2-JDBC" class="headerlink" title="2.JDBC"></a>2.JDBC</h2><p>java.sql</p>
<p>javax.sql</p>
<p>一个数据库驱动程序</p>
<p>手写的java启动数据库驱动代码</p>
<p>&#x3D;&#x3D;常见的代码样式&#x3D;&#x3D;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJdbc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">// 加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用户</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/school?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;allowPublicKeyRetrieval=true&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;888888&quot;</span>;</span><br><span class="line">        <span class="comment">// 获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url,username,password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取mysql执行对象</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">        <span class="comment">// 执行对象执行sql语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from student where name = &#x27;用户1&#x27;&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line">        <span class="comment">// 输出执行结果</span></span><br><span class="line">        <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;id:&quot;</span>+resultSet.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;name:&quot;</span>+resultSet.getObject(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;email:&quot;</span>+resultSet.getObject(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;phone:&quot;</span>+resultSet.getObject(<span class="string">&quot;phone&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;age:&quot;</span>+resultSet.getObject(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;current_time:&quot;</span>+resultSet.getObject(<span class="string">&quot;current_time&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;update_time:&quot;</span>+resultSet.getObject(<span class="string">&quot;update_time&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭连接</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;步骤详情&#x3D;&#x3D;</p>
<ol>
<li>加载数据库驱动(就是driver),Class.forname(mysql.)</li>
<li>需要连接数据库(需要数据库的url,username,password),通过DriverManager.getConnection得到对象connection</li>
<li>通过connection的createStatement方法来&#x3D;&#x3D;创造&#x3D;&#x3D;mysql执行对象statement,通过</li>
<li>操作mysql对象执行mysql语句</li>
<li>输出sql输出结果</li>
<li>关闭连接</li>
</ol>
<h2 id="3-执行对象statement"><a href="#3-执行对象statement" class="headerlink" title="3.执行对象statement"></a>3.执行对象statement</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Statement statement = connection.createStatement();</span><br></pre></td></tr></table></figure>

<p>eg:statement.executeUpdate(sql);</p>
<p>需要记住的只有两个&#x3D;&#x3D;executeQuery&#x3D;&#x3D;和&#x3D;&#x3D;executeUpdate&#x3D;&#x3D;</p>
<p><code>executeQuery</code>:只有在查询的时候会只用到这个</p>
<p><code>executeUpdate</code>:增删改都使用这个</p>
<h2 id="4常用的工具类"><a href="#4常用的工具类" class="headerlink" title="4常用的工具类"></a>4常用的工具类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUtils</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 静态方法,程序执行前就加载好了</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 获取数据库数据文件</span></span><br><span class="line">           <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> JdbcUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line">           <span class="comment">// 获取数据流</span></span><br><span class="line">           <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">           properties.load(is);</span><br><span class="line">           <span class="comment">// 读取文件</span></span><br><span class="line">           driver = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">           url = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">           user = properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">           password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">           <span class="comment">// 驱动只需要加载一次</span></span><br><span class="line">           <span class="comment">// 连接数据库</span></span><br><span class="line">           Class.forName(driver);</span><br><span class="line">           <span class="comment">// 用户</span></span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取数据连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, user,password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭数据连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">MyClose</span><span class="params">(ResultSet resultSet, Statement statement, Connection connection)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">if</span>(resultSet!=<span class="literal">null</span>)&#123;</span><br><span class="line">            resultSet.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(statement!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    statement.close();</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">if</span>(connection!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="5-SQL注入"><a href="#5-SQL注入" class="headerlink" title="5.SQL注入"></a>5.SQL注入</h2><p>&#x3D;&#x3D;理解&#x3D;&#x3D;:通过非法组装字符串,来实现该条语句的sql语句一直都是可以运行的.</p>
<h2 id="6-解决sql注入问题-与Mybatis相似"><a href="#6-解决sql注入问题-与Mybatis相似" class="headerlink" title="6.解决sql注入问题(与Mybatis相似)"></a>6.解决sql注入问题(与Mybatis相似)</h2><p>使用PrepareStatement类,而不是statement</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPreJDBC</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 此处与statement不同</span></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from student where name = ?&quot;</span>;</span><br><span class="line">			<span class="comment">// 直接开始预编译sql,不用创建一个statement.</span></span><br><span class="line">            statement = connection.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 传入第一个问号的值,第一个1是位置,从1开始,而不是从0</span></span><br><span class="line">            statement.setString(<span class="number">1</span>,<span class="string">&quot;用户1&quot;</span>);</span><br><span class="line">			<span class="comment">// 直接执行就行,前面预编译</span></span><br><span class="line">            rs = statement.executeQuery();</span><br><span class="line">            <span class="keyword">if</span> (rs.next())&#123;</span><br><span class="line">                System.out.println(rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.MyClose(rs,statement,connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













































































<p>&#x3D;&#x3D;我们的是业务级别的mysql&#x3D;&#x3D;</p>
<p>还有一个&#x3D;&#x3D;运维级别的mysql学习&#x3D;&#x3D;</p>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
  </entry>
  <entry>
    <title>Spring5的学习</title>
    <url>/2022/11/09/Spring5%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="1、Spring"><a href="#1、Spring" class="headerlink" title="1、Spring"></a>1、Spring</h1><h2 id="1-1、常用的仓库"><a href="#1-1、常用的仓库" class="headerlink" title="1.1、常用的仓库"></a>1.1、常用的仓库</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="1-2、优点"><a href="#1-2、优点" class="headerlink" title="1.2、优点"></a>1.2、优点</h2><ol>
<li><pre><code>免费开源的框架（容器
</code></pre>
</li>
<li>轻量级的，非入侵式的框架</li>
<li>控制反转（IOC），面向切面编程（AOP）</li>
<li>支持事务处理，对框架整合的支持</li>
</ol>
<p><strong>总结一句话：Spring是一个轻量级的控制反转（IOC）和面向切面编程的框架（AOP）</strong></p>
<h2 id="1-3、组成"><a href="#1-3、组成" class="headerlink" title="1.3、组成"></a>1.3、组成</h2><p>拓展：</p>
<p>原因：大多数公司都是基于SpringBoot进行快速开发的，学习SpringBoot的前提是得学会Spring跟SpingMVC</p>
<h1 id="2、第一个SPring程序"><a href="#2、第一个SPring程序" class="headerlink" title="2、第一个SPring程序"></a>2、第一个SPring程序</h1><h2 id="2-1、常用的测试语句"><a href="#2-1、常用的测试语句" class="headerlink" title="2.1、常用的测试语句"></a>2.1、常用的测试语句</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuaihua;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuaihua.pojo.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        Object id名字 = context.getBean(<span class="string">&quot;id名字&quot;</span>);</span><br><span class="line">        System.out.println(student.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="2-2、常用的配置"><a href="#2-2、常用的配置" class="headerlink" title="2.2、常用的配置"></a>2.2、常用的配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span>  (1) (2)</span><br><span class="line">        <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- more bean definitions go here --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/数据库名称?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="attr">//</span> <span class="string">以下两个可以不写</span></span><br><span class="line"><span class="attr">//</span> <span class="string">连接池启动时创建的初始化连接数量（默认值为0）</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">2 </span></span><br><span class="line"></span><br><span class="line"><span class="attr">//</span> <span class="string">连接池中可同时连接的最大的连接数</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="3、注入方式"><a href="#3、注入方式" class="headerlink" title="3、注入方式"></a>3、注入方式</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuaihua.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;广东&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  相当于Student student = new Student();</span></span><br><span class="line"><span class="comment">      这里的student 就是下面的id</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuaihua.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第一种：普通值注入     value--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;快画&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第二种：bean注入      ref--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    数组  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    List  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>看小说<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>打游戏<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>敲代码<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    Map  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;132154654654&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;密码&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1321245&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    Set     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>sss<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    Null    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里是空串，下面是null &lt;property name=&quot;wife&quot; value=&quot;&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Property--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;driver&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;url&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/数据库名称?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;password&quot;</span>&gt;</span>888888<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3-1、构造器注入"><a href="#3-1、构造器注入" class="headerlink" title="3.1、构造器注入"></a>3.1、构造器注入</h2><h2 id="3-2、Set方式注入【重要】"><a href="#3-2、Set方式注入【重要】" class="headerlink" title="3.2、Set方式注入【重要】"></a>3.2、Set方式注入【重要】</h2><h3 id="3-2-1、普通值注入"><a href="#3-2-1、普通值注入" class="headerlink" title="3.2.1、普通值注入"></a>3.2.1、普通值注入</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一种：普通值注入     value--&gt;</span><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;快画&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-2、bean注入"><a href="#3-2-2、bean注入" class="headerlink" title="3.2.2、bean注入"></a>3.2.2、bean注入</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--第二种：bean注入      ref--&gt;</span><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-3、数组"><a href="#3-2-3、数组" class="headerlink" title="3.2.3、数组"></a>3.2.3、数组</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    数组  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-4、List"><a href="#3-2-4、List" class="headerlink" title="3.2.4、List"></a>3.2.4、List</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    List  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>看小说<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>打游戏<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>敲代码<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-5、Map"><a href="#3-2-5、Map" class="headerlink" title="3.2.5、Map"></a>3.2.5、Map</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    Map  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;132154654654&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;密码&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1321245&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-6、Set"><a href="#3-2-6、Set" class="headerlink" title="3.2.6、Set"></a>3.2.6、Set</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    Set     --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>sss<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-7、Null"><a href="#3-2-7、Null" class="headerlink" title="3.2.7、Null"></a>3.2.7、Null</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    Null    --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里是空串，下面是null &lt;property name=&quot;wife&quot; value=&quot;&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-8、Property"><a href="#3-2-8、Property" class="headerlink" title="3.2.8、Property"></a>3.2.8、Property</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Property--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;driver&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;url&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/数据库名称?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;password&quot;</span>&gt;</span>888888<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-3、拓展方式注入"><a href="#3-3、拓展方式注入" class="headerlink" title="3.3、拓展方式注入"></a>3.3、拓展方式注入</h2><h4 id="3-3-1、p命名空间"><a href="#3-3-1、p命名空间" class="headerlink" title="3.3.1、p命名空间"></a>3.3.1、p命名空间</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--p命名空间注入，可以直接注入属性值,类似与property标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuaihua.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;快画&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;22&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuaihua.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;kuaihua&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-2、c命名空间"><a href="#3-3-2、c命名空间" class="headerlink" title="3.3.2、c命名空间"></a>3.3.2、c命名空间</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--c命名空间注入，通过构造器注入：construct-args--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuaihua.pojo.User&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;我是C&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPAndC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;userBean.xml&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) context.getBean(<span class="string">&quot;user2&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ol>
<li><pre><code>c命名和p命名空间不能直接使用，需要导入xml约束
</code></pre>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br><span class="line">       xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="4、Bean作用域"><a href="#4、Bean作用域" class="headerlink" title="4、Bean作用域"></a>4、Bean作用域</h1><h3 id="4-1、单例模式（Spring-的默认机制）"><a href="#4-1、单例模式（Spring-的默认机制）" class="headerlink" title="4.1、单例模式（Spring 的默认机制）"></a>4.1、单例模式（Spring 的默认机制）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuaihua.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;快画&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;22&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2、原型模式"><a href="#4-2、原型模式" class="headerlink" title="4.2、原型模式"></a>4.2、原型模式</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuaihua.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;快画&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;22&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-3、其它模式：request-session-application-这些只能在web中应用"><a href="#4-3、其它模式：request-session-application-这些只能在web中应用" class="headerlink" title="4.3、其它模式：request,session,application,这些只能在web中应用"></a>4.3、其它模式：request,session,application,这些只能在web中应用</h3><h1 id="5、Bean的自动装配"><a href="#5、Bean的自动装配" class="headerlink" title="5、Bean的自动装配"></a>5、Bean的自动装配</h1><ul>
<li><pre><code>自动装配式Spring满足bean依赖的一种方式
</code></pre>
</li>
<li>Spring会在上下文中自动寻找，并自动给bean装配属性</li>
</ul>
<h2 id="5-1、三种装配方式"><a href="#5-1、三种装配方式" class="headerlink" title="5.1、三种装配方式"></a>5.1、三种装配方式</h2><ol>
<li>在xml中显示</li>
<li>在java中显示</li>
<li>隐式的自动装配bean【重要】</li>
</ol>
<h2 id="5-2、环境搭建"><a href="#5-2、环境搭建" class="headerlink" title="5.2、环境搭建"></a>5.2、环境搭建</h2><ul>
<li><pre><code>一个人有两个宠物，一个猫，一个狗
</code></pre>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;wang~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.kuaihua.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;miao~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.kuaihua.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="5-3、测试："><a href="#5-3、测试：" class="headerlink" title="5.3、测试："></a>5.3、测试：</h2><h4 id="5-3-1、byName"><a href="#5-3-1、byName" class="headerlink" title="5.3.1、byName"></a>5.3.1、byName</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuaihua.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuaihua.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    byName：会在容器上下查找，和自己对象set方法后面的值对应的beanid自动装配【注意，bean的id必须与beanid相同】</span></span><br><span class="line"><span class="comment">    byType：会在容器上下查找，和自己对象属性类型相同的自动装配【注意，bean的class必须与唯一，id可以想写啥就写啥】</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuaihua.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;快画&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="5-3-2、byType"><a href="#5-3-2、byType" class="headerlink" title="5.3.2、byType"></a>5.3.2、byType</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuaihua.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog1312&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuaihua.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        byName：会在容器上下查找，和自己对象set方法后面的值对应的beanid自动装配【注意，bean的id必须与beanid相同】</span></span><br><span class="line"><span class="comment">        byType：会在容器上下查找，和自己对象属性类型相同的自动装配【注意，bean的class必须与唯一，id可以想写啥就写啥】</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuaihua.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;快画&quot;</span>/&gt;</span></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.kuaihua.pojo.People;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">People</span> <span class="variable">people</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;people&quot;</span>, People.class);</span><br><span class="line">        people.getCat().shout();</span><br><span class="line">        people.getDog().shout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="5-4、注解实现自动装配-Autowire"><a href="#5-4、注解实现自动装配-Autowire" class="headerlink" title="5.4、注解实现自动装配@Autowire"></a>5.4、注解实现自动装配@Autowire</h2><p>注意：</p>
<p>1.导入约束</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--要使用注解就要导入这些配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.导入注解支持</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="6、使用注解说明-Spring-04-anno"><a href="#6、使用注解说明-Spring-04-anno" class="headerlink" title="6、使用注解说明(Spring-04-anno)"></a>6、使用注解说明(Spring-04-anno)</h1><ul>
<li>@Autowired  先ByType然后ByName<br>  如果Autowired不能唯一自动装配，需要通过@Qualifier(value &#x3D; “XXX”)来辅助现实装配</li>
<li>@Resource   先ByName然后ByType</li>
<li>@Nullable   说明这个可以为空值</li>
</ul>
<p>区别：顺序不同</p>
<ul>
<li><p>@Component  组件 ，类似与<bean id="user" class="com.kuaihua.pojo.User"> </bean></p>
<p>  其衍生出来的注释：</p>
<ul>
<li>dao 【@Repository】</li>
<li>service 【@Service】</li>
<li>controller【@Controller】<br>这四个的注解功能都是一样的，都是将某个类注册到Spring中，装配Bean</li>
</ul>
</li>
<li><p>@Scope(“prototype&#x2F;singleton”) 表示作用域</p>
</li>
<li><p>@@Value(“快画”) 类似与<bean id="user" class="com.kuaihua.pojo.User"></bean></p>
<property name="name" value="kuaihau">
</property></li>
</ul>
<h2 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--指定要要扫描的包，这个包下的注解才会生效--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuaihua.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 等价与&lt;bean id=&quot;user&quot; class=&quot;com.kuaihua.pojo.User&quot;/&gt;</span></span><br><span class="line"><span class="comment">// @Component   组件</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="meta">@Value(&quot;快画&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        System.out.println(user.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><pre><code>    ![1659446681829](C:\Users\LRH\AppData\Roaming\Typora\typora-user-images\1659446681829.png)
</code></pre>
<ol>
<li><pre><code>xml与注解
</code></pre>
<p>xml更加万能，适用于任何场合，维护简单方便</p>
<p>注解 不是自己的类使用不了</p>
</li>
<li><p>xml与注解最佳实践：</p>
<p>xml用来管理bean</p>
<p>注解只负责完成属性的注入</p>
</li>
<li><p>使用过程中应该注意，要是注解生效必须开启注解支持</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定要要扫描的包，这个包下的注解才会生效--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuaihua.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="7、用java的方式实现Spring中Bean的配置（后期了解，这玩意再SpringBoot中随处可见）"><a href="#7、用java的方式实现Spring中Bean的配置（后期了解，这玩意再SpringBoot中随处可见）" class="headerlink" title="7、用java的方式实现Spring中Bean的配置（后期了解，这玩意再SpringBoot中随处可见）"></a>7、用java的方式实现Spring中Bean的配置（后期了解，这玩意再SpringBoot中随处可见）</h1><p>链接：<a href="https://www.bilibili.com/video/BV1WE411d7Dv?p=15&amp;vd_source=5bc0b5059f81912a65b515bad837a983">https://www.bilibili.com/video/BV1WE411d7Dv?p=15&amp;vd_source=5bc0b5059f81912a65b515bad837a983</a></p>
<h1 id="8、代理模式（SpringAOP-相关）Spring-05-proxy"><a href="#8、代理模式（SpringAOP-相关）Spring-05-proxy" class="headerlink" title="8、代理模式（SpringAOP 相关）Spring-05-proxy"></a>8、代理模式（SpringAOP 相关）Spring-05-proxy</h1><p>学习的原因：涉及SpringAOP的底层</p>
<h3 id="8-1、静态代理"><a href="#8-1、静态代理" class="headerlink" title="8.1、静态代理"></a>8.1、静态代理</h3><p><strong>角色分析：</strong></p>
<ul>
<li>抽象角色：一般使用接口或者抽象类来结局</li>
<li>真实角色：被代理的人</li>
<li>代理角色：代理真实的角色，代理真实角色后，一般会有一些附属操作，类似现实中的中介，收中介费，带客户看房之类的</li>
<li>客户：访问代理对象的人</li>
</ul>
<p>代码实现步骤：</p>
<ol>
<li><p>接口</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
<li><p>真实角色</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Host</span> <span class="keyword">implements</span> <span class="title class_">Rent</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东要出租房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>代理角色</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Rent</span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Host host;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">(Host host)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">        seeHouse();</span><br><span class="line">        host.rent();</span><br><span class="line">        heTong();</span><br><span class="line">        fare();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fare</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介收取中介费&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">seeHouse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介带客户看房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heTong</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介帮助代理房东签合同&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
<li><p>客户端访问代理角色</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuaihua.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 房东要出租房子</span></span><br><span class="line">        <span class="type">Host</span> <span class="variable">host</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Host</span>();</span><br><span class="line">        <span class="comment">// 代理，中介，帮助房东出租房子，但是他要左一些附属操作，比如收费用，带客户看房子</span></span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(host);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不用面对房东就可以租到房子</span></span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<p>代理的好处：</p>
<ul>
<li>可以使真实的角色更加纯粹，不用关注多余的公共业务</li>
<li>公共业务交给代理，实现了业务分工</li>
<li>公共业务发送扩展的时候，方便集中管理</li>
</ul>
<p>缺点：</p>
<ul>
<li>一个真实的角色就会产生一个代理角色，代码量会翻倍，开发效率贬低</li>
</ul>
<h3 id="8-2、动态代理Spring-05-proxy-demo04"><a href="#8-2、动态代理Spring-05-proxy-demo04" class="headerlink" title="8.2、动态代理Spring-05-proxy  demo04"></a>8.2、动态代理Spring-05-proxy  demo04</h3><p>工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.kuaihua.Demo03.Rent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTarget</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成代理类</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="built_in">this</span>.getClass().getClassLoader(),target.getClass().getInterfaces(),<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理代理实例，并返回结果</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        log(method.getName());</span><br><span class="line">        <span class="comment">// 动态代理的本质就是使用反射机制实现</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target,args);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用了&quot;</span>+msg+<span class="string">&quot;方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>真实角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类似房东，一个真实角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 这是要实现的业务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuaihua.demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuaihua.demo02.UserService;</span><br><span class="line"><span class="keyword">import</span> com.kuaihua.demo02.UserServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 真实角色</span></span><br><span class="line">        <span class="type">UserServiceImpl</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 代理角色，不存在</span></span><br><span class="line">        <span class="type">ProxyInvocationHandler</span> <span class="variable">pih</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyInvocationHandler</span>();</span><br><span class="line">        pih.setTarget(userService);</span><br><span class="line">        <span class="comment">// 生成一个代理类</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">proxy</span> <span class="operator">=</span> (UserService) pih.getProxy();</span><br><span class="line"></span><br><span class="line">        proxy.delete();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="8-3-增加理解"><a href="#8-3-增加理解" class="headerlink" title="8.3 增加理解"></a>8.3 增加理解</h3><h1 id="9、-x3D-x3D-AOP（重点，面向切面编程）三种方式-x3D-x3D"><a href="#9、-x3D-x3D-AOP（重点，面向切面编程）三种方式-x3D-x3D" class="headerlink" title="9、&#x3D;&#x3D;AOP（重点，面向切面编程）三种方式&#x3D;&#x3D;"></a>9、&#x3D;&#x3D;AOP（重点，面向切面编程）三种方式&#x3D;&#x3D;</h1><p>仓库</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class Log implements MethodBeforeAdvice &#123;</span><br><span class="line"></span><br><span class="line">    // method   要执行目标参数的方法</span><br><span class="line">    // args     参数</span><br><span class="line">    // target   目标参数</span><br><span class="line">    public void before(Method method, Object[] args, Object target) throws Throwable &#123;</span><br><span class="line">        System.out.println(target.getClass().getName()+&quot;方法的&quot;+method.getName()+&quot;被执行了&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id><a href="#" class="headerlink" title></a></h2><h2 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h2><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.aop.AfterReturningAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">After</span> <span class="keyword">implements</span> <span class="title class_">AfterReturningAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了&quot;</span>+method.getName()+<span class="string">&quot;方法，执行结果为：&quot;</span>+returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuaihua.pojo.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuaihua.log.Log&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;after&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuaihua.log.After&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    方式一：通过原生的Spring Api实现--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置aop，需要导入aop约束--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--pointcut：切入点</span></span><br><span class="line"><span class="comment">            execution  切入点位置</span></span><br><span class="line"><span class="comment">            execution(* com.kuaihua.pojo.UserServiceImpl.*(..))     切入点为com.kuaihua.pojo.UserServiceImpl下的所有方法，(..)表示参数有多</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.kuaihua.pojo.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--    执行方法环绕--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--aop:advisor advice-ref=&quot;log&quot; pointcut-ref=&quot;pointcut&quot;/&gt;</span></span><br><span class="line"><span class="comment">            意思是把代号为log的类切入到代号为pointcut的类里面</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="第二种："><a href="#第二种：" class="headerlink" title="第二种："></a>第二种：</h2><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiyPointCut</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;========方法执行前Before&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">After</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;========方法执行后After&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuaihua.diy.DiyPointCut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--自定义切面</span></span><br><span class="line"><span class="comment">        ref 表示要引入的类</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diy&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入面的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;point&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.kuaihua.pojo.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;Before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;After&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="第三种："><a href="#第三种：" class="headerlink" title="第三种："></a>第三种：</h2><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式三：使用注解来完成</span></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 标志这个类是一个切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationPointCut</span> &#123;</span><br><span class="line"><span class="comment">//    方式三使用注解来完成AOP操作</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.kuaihua.pojo.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法执行前=======&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.kuaihua.pojo.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">After</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法执行后=======&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.kuaihua.pojo.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;环绕前===========&quot;</span>);</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> jp.getSignature();    <span class="comment">// 获得签名</span></span><br><span class="line">        System.out.println(<span class="string">&quot;signature:&quot;</span>+signature);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> jp.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕后===========&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;proceed:&quot;</span>+proceed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--方式三--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuaihua.diy.AnnotationPointCut&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启注解支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="10、整合Mybatis"><a href="#10、整合Mybatis" class="headerlink" title="10、整合Mybatis"></a>10、整合Mybatis</h1><h2 id="10-1、实体类pojo"><a href="#10-1、实体类pojo" class="headerlink" title="10.1、实体类pojo"></a>10.1、实体类pojo</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="10-2、接口类"><a href="#10-2、接口类" class="headerlink" title="10.2、接口类"></a>10.2、接口类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuaihua.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuaihua.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectStudent</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="10-3、接口mapper文件"><a href="#10-3、接口mapper文件" class="headerlink" title="10.3、接口mapper文件"></a>10.3、接口mapper文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuaihua.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudent&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="10-4、配置spring-dao-xml-这里的配置基本固定，不需要修改"><a href="#10-4、配置spring-dao-xml-这里的配置基本固定，不需要修改" class="headerlink" title="10.4、配置spring-dao.xml,这里的配置基本固定，不需要修改"></a>10.4、配置spring-dao.xml,这里的配置基本固定，不需要修改</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--这里配置的是一些不用修改的文件，固定配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--要使用注解就要导入这些配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--DataSource 用Spring的数据源代替Mybatis的数据源 配置：     c3p0,dbcp,druid</span></span><br><span class="line"><span class="comment">        我们这里使用Spring提供的JDBC :org.springframework.jdbc.datasource</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="symbol">&amp;amp;</span>allowPublicKeyRetrieval=true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;888888&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--sqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定Mybatis配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/kuaihua/mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--只能通过构造器注入sqlSessionFactory，因为它没有set方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="10-5、配置mybatis-config-xml【名存实亡】，大部分配置都转移到了spring-dao-xml中"><a href="#10-5、配置mybatis-config-xml【名存实亡】，大部分配置都转移到了spring-dao-xml中" class="headerlink" title="10.5、配置mybatis.config.xml【名存实亡】，大部分配置都转移到了spring-dao.xml中"></a>10.5、配置mybatis.config.xml【名存实亡】，大部分配置都转移到了spring-dao.xml中</h2><p>这个类主要就是用于编写一些配置文件，比如settings，别名管理等等</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--configuration核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--别名管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.kuaihua.mapper&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.kuaihua.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="10-6、接口的实现类【-Impl-java】多的，有两种方式"><a href="#10-6、接口的实现类【-Impl-java】多的，有两种方式" class="headerlink" title="10.6、接口的实现类【***Impl.java】多的，有两种方式"></a>10.6、接口的实现类【***Impl.java】多的，有两种方式</h2><p>这个实现类是多的，用来实现sqlSession的注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种</span></span><br><span class="line"><span class="keyword">package</span> com.kuaihua.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuaihua.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title class_">UserMapper</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectStudent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mapper.selectStudent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--只能通过构造器注入sqlSessionFactory，因为它没有set方法，所以也要设置set方法--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuaihua.mapper.UserMapperImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;第二种，好用，set方法已经被封装好，不用自己写&#x3D;&#x3D;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuaihua.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuaihua.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.support.SqlSessionDaoSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperImpl2</span> <span class="keyword">extends</span> <span class="title class_">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title class_">UserMapper</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectStudent</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        SqlSession sqlSession = getSqlSession();</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        return mapper.selectStudent();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> getSqlSession().getMapper(UserMapper.class).selectStudent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuaihua.mapper.UserMapperImpl2&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="10-7、applicationContext-xml把spring-dao-xml，mybatis-config-xml导入文件中，这个主要配置bean"><a href="#10-7、applicationContext-xml把spring-dao-xml，mybatis-config-xml导入文件中，这个主要配置bean" class="headerlink" title="10.7、applicationContext.xml把spring-dao.xml，mybatis.config.xml导入文件中，这个主要配置bean"></a>10.7、applicationContext.xml把spring-dao.xml，mybatis.config.xml导入文件中，这个主要配置bean</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--专著注册一--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuaihua.mapper.UserMapperImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuaihua.mapper.UserMapperImpl2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="10-8、编写测试类"><a href="#10-8、编写测试类" class="headerlink" title="10.8、编写测试类"></a>10.8、编写测试类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.kuaihua.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.kuaihua.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DaoTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">MyTest</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userMapper&quot;</span>, UserMapper.class);</span><br><span class="line">        <span class="keyword">for</span> (User user : userMapper.selectStudent()) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="11、事务"><a href="#11、事务" class="headerlink" title="11、事务"></a>11、事务</h1><h2 id="事务ACID-x3D-x3D-四大原则-x3D-x3D-："><a href="#事务ACID-x3D-x3D-四大原则-x3D-x3D-：" class="headerlink" title="事务ACID&#x3D;&#x3D;四大原则&#x3D;&#x3D;："></a>事务ACID&#x3D;&#x3D;四大原则&#x3D;&#x3D;：</h2><ul>
<li>原子性</li>
<li>一致性</li>
<li>隔离性<ol>
<li>多个事务操作同一个资源，防止被影响</li>
</ol>
</li>
<li>持久性<ol>
<li>一旦事务提交，无论系统发生什么，数据都不会发生改变</li>
</ol>
</li>
</ul>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol>
<li><p>把一组事务当做一个事务来做，要么都成功，要么都失败</p>
</li>
<li><p>&#x3D;&#x3D;事务开发过程中，非常重要，涉及数据的一致性问题&#x3D;&#x3D;</p>
</li>
<li><p>确保数据的完整性和一致性</p>
</li>
</ol>
<h2 id="通过AOP操作来植入事务操作，基本写死的"><a href="#通过AOP操作来植入事务操作，基本写死的" class="headerlink" title="通过AOP操作来植入事务操作，基本写死的"></a>通过AOP操作来植入事务操作，基本写死的</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--通过AOP方式植入--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置声明式事务--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--transactionManager这个东西Spring帮我们写好了，直接用就行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;constructor-arg ref=&quot;dataSource&quot; /&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;add&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;select&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--一般只要写这一句就行，上面方便回顾&lt;tx:method name=&quot;*&quot; propagation=&quot;REQUIRED&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--    AOP植入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.kuaihua.mapper.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPointCut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>Theleaf与springboot整合,在html中的使用</title>
    <url>/2022/11/09/Theleaf/</url>
    <content><![CDATA[<h1 id="Thymeleaf的使用规则"><a href="#Thymeleaf的使用规则" class="headerlink" title="Thymeleaf的使用规则"></a>Thymeleaf的使用规则</h1><h3 id="引入约束"><a href="#引入约束" class="headerlink" title="引入约束"></a>引入约束</h3><html lang="en" xmlns:th="http://www.thymeleaf.org">

<p>&#x3D;&#x3D;‘xmlns:th&#x3D;”<a href="http://www.thymeleaf.org’==/">http://www.thymeleaf.org’==</a></p>
<ul>
<li><p>在开头常见的需要引入相关的链接<code>xmlns:th=&quot;http://www.thymeleaf.org/thymeleaf-extras-shiro&quot;</code></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">class</span>=<span class="string">&quot;no-js&quot;</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>  <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org/thymeleaf-extras-shiro&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    xmlns:th=&quot;http://www.thymeleaf.org&quot;</span><br><span class="line">xmlns:sec=&quot;http://www.thymeleaf.org/extras/spring-security&quot;</span><br><span class="line">xmlns:shiro=&quot;http://www.pollix.at/thymeleaf/shiro&quot;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span> </span></span><br><span class="line"><span class="tag">				<span class="attr">xmlns:sec</span>=<span class="string">&quot;http://www.thymeleaf.org/extras/spring-security&quot;</span></span></span><br><span class="line"><span class="tag">				<span class="attr">xmlns:shiro</span>=<span class="string">&quot;http://www.pollix.at/thymeleaf/shiro&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

  <span id="more"></span>
</li>
<li><p>表达语法</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">简单表达式：</span><br><span class="line">变量表达式： $ &#123;...&#125;</span><br><span class="line">选择变量表达式： \* &#123;...&#125;</span><br><span class="line">消息表达式： ＃ &#123;...&#125;，国际化要用</span><br><span class="line">链接⽹址表达式： @ &#123;...&#125; 本地连接，src，link，href</span><br><span class="line">⽚段表达式： 〜&#123;...&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>springBoot导入的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-thymeleaf --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.thymeleaf.extras/thymeleaf-extras-springsecurity4 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.theborakompanioni/thymeleaf-extras-shiro --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h1 id="Theleaf整合"><a href="#Theleaf整合" class="headerlink" title="Theleaf整合"></a>Theleaf整合</h1><h2 id="1-1提取和使用文件公共部分"><a href="#1-1提取和使用文件公共部分" class="headerlink" title="1.1提取和使用文件公共部分"></a>1.1提取和使用文件公共部分</h2><ol>
<li>文件提取代码<code>th:fragment=&quot;topside&quot;</code></li>
</ol>
<p><code> </code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>  <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">&lt;!--顶部导航栏提取  th:fragment=&quot;topside&quot;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0&quot;</span>  == <span class="string">th:fragment</span>=<span class="string">&quot;topside&quot;</span>==&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand col-sm-3 col-md-2 mr-0&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://getbootstrap.com/docs/4.0/examples/dashboard/#&quot;</span>&gt;</span>[[$&#123;session.LoginUser&#125;]]<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-control form-control-dark w-100&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Search&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Search&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;navbar-nav px-3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item text-nowrap&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://getbootstrap.com/docs/4.0/examples/dashboard/#&quot;</span>&gt;</span>Sign out<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">			<span class="comment">&lt;!--侧边导航栏  th:fragment=&quot;sidebar&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 d-none d-md-block bg-light sidebar&quot;</span> <span class="attr">th:fragment</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-sticky&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h6</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-heading d-flex justify-content-between align-items-center px-3 mt-4 mb-1 text-muted&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>Saved reports<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;d-flex align-items-center text-muted&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://getbootstrap.com/docs/4.0/examples/dashboard/#&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;24&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 24 24&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span> <span class="attr">class</span>=<span class="string">&quot;feather feather-plus-circle&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;12&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;12&quot;</span> <span class="attr">r</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span><span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;12&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;8&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;12&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;16&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">line</span>&gt;</span><span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;8&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;12&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;16&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;12&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">line</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>提取 代码的使用 <div th:replace="~{commons/commons::topside}"></div>  第一个commons是文件夹,第二个是commons是html</li>
<li><img src="/2022/11/09/Theleaf/image-20221011094359496.png" alt="image-20221011094359496"></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--顶栏--&gt;</span><br><span class="line">&lt;div th:replace=&quot;~&#123;commons/commons::topside&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;container-fluid&quot;&gt;</span><br><span class="line">   &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">      &lt;!--侧边栏--&gt;</span><br><span class="line">      &lt;div th:replace=&quot;~&#123;commons/commons::sidebar(active=&#x27;main.html&#x27;)&#125;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-theleaf对列表内容进行循环导出"><a href="#1-2-theleaf对列表内容进行循环导出" class="headerlink" title="1.2 theleaf对列表内容进行循环导出"></a>1.2 theleaf对列表内容进行循环导出</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/allUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAllUser</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        Collection&lt;User&gt; users = userService.queryAllUser();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;users&quot;</span>,users);</span><br><span class="line">        System.out.println(users);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;emp/list&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">								<span class="comment">&lt;!--/*@thymesVar id=&quot;emps&quot; type=&quot;List&quot;*/--&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;user:$&#123;users&#125;&quot;</span>&gt;</span></span><br><span class="line">									<span class="comment">&lt;!--/*@thymesVar id=&quot;getId&quot; type=&quot;Class50&quot;*/--&gt;</span></span><br><span class="line">									<span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.getId()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">									<span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.getUserCode()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">									<span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.getUserName()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">									<span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.getUserPassword()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">									<span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.getGender()==1?&#x27;女&#x27;:&#x27;男&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">									<span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(user.getBirthday(),&#x27;yyyy-MM-dd&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">									<span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.getPhone()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">									<span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.getAddress()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">									<span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.getUserRole()==1?&#x27;管理员&#x27;:&#x27;用户&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">									<span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.getCreatedBy()==1?&#x27;管理员&#x27;:&#x27;用户&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">									<span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(user.getCreationDate(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">									<span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.getModifyBy()==1?&#x27;管理员&#x27;:&#x27;用户&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">									<span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(user.getModifyDate(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">									<span class="comment">&lt;!--&lt;td th:text=&quot;$&#123;emp.department.getDepartmentName()&#125;&quot;&gt;&lt;/td&gt;--&gt;</span></span><br><span class="line">									<span class="comment">&lt;!--&lt;td th:text=&quot;$&#123;#dates.format(emp.getBirth(), &#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;&quot;&gt;&lt;/td&gt;--&gt;</span></span><br><span class="line">									<span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">										<span class="tag">&lt;<span class="name">a</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-primary&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;#&#125;&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">										<span class="tag">&lt;<span class="name">a</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-danger&quot;</span><span class="attr">th:href</span>=<span class="string">&quot;@&#123;#&#125;&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">									<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果展示</p>
<p><img src="/2022/11/09/Theleaf/image-20221011094908321.png" alt="image-20221011094908321"></p>
<h2 id="1-3-利用theleaf完成点谁谁高亮"><a href="#1-3-利用theleaf完成点谁谁高亮" class="headerlink" title="1.3 利用theleaf完成点谁谁高亮"></a>1.3 利用theleaf完成点谁谁高亮</h2><p>原理,利用replace传参</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;~&#123;commons/commons::sidebar(active=&#x27;list.html&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;~&#123;commons/commons::sidebar(active=&#x27;main.html&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>公共页面代码${active&#x3D;&#x3D;’main.html’? ‘nav-link active’:’nav-link’}和${active&#x3D;&#x3D;’list.html’?’nav-link active’:’nav-link’}</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:class</span>=<span class="string">&quot;$&#123;active==&#x27;main.html&#x27;? &#x27;nav-link active&#x27;:&#x27;nav-link&#x27;&#125;&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;24&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 24 24&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span> <span class="attr">class</span>=<span class="string">&quot;feather feather-home&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">&quot;9 22 9 12 15 12 15 22&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">polyline</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">  首页</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:class</span>=<span class="string">&quot;$&#123;active==&#x27;list.html&#x27;?&#x27;nav-link active&#x27;:&#x27;nav-link&#x27;&#125;&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/allUser&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;24&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 24 24&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span> <span class="attr">class</span>=<span class="string">&quot;feather feather-users&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;9&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;7&quot;</span> <span class="attr">r</span>=<span class="string">&quot;4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M23 21v-2a4 4 0 0 0-3-3.87&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M16 3.13a4 4 0 0 1 0 7.75&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">    用户管理</span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>





<hr>
<h1 id="Theleaf时间格式转换"><a href="#Theleaf时间格式转换" class="headerlink" title="Theleaf时间格式转换"></a>Theleaf时间格式转换</h1><h2 id="1-时间格式转换-dates-format"><a href="#1-时间格式转换-dates-format" class="headerlink" title="1. 时间格式转换,#dates.format"></a>1. 时间格式转换,#dates.format</h2><p><code>#dates.format(time,&#39;yyyy/MM/dd HH:mm:ss&#39;) </code></p>
<h2 id="2-theleaf中使用三目运算符-并且不能修改readonly"><a href="#2-theleaf中使用三目运算符-并且不能修改readonly" class="headerlink" title="2. theleaf中使用三目运算符,并且不能修改readonly"></a>2. theleaf中使用三目运算符,并且不能修改readonly</h2><p>NullPointerException判断是否为空指针,</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;user.getCreationDate()==NullPointerException?#dates.format(time,&#x27;yyyy/MM/dd HH:mm:ss&#x27;):#dates.format(user.getCreationDate(),&#x27;yyyy/MM/dd HH:mm:ss&#x27;)&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;creationDate&quot;</span><span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;2011/11/12&quot;</span> <span class="attr">readonly</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-获取当前时间-dates-createNow"><a href="#3-获取当前时间-dates-createNow" class="headerlink" title="3. 获取当前时间#dates.createNow()"></a>3. 获取当前时间#dates.createNow()</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;#dates.format(#dates.createNow(),&#x27;yyyy/MM/dd HH:mm:ss&#x27;)&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;modifyDate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;2000/1/1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-选择项-管理员对应的是数据库中的1"><a href="#4-选择项-管理员对应的是数据库中的1" class="headerlink" title="4. 选择项,管理员对应的是数据库中的1"></a>4. 选择项,管理员对应的是数据库中的1</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">label</span>&gt;</span>创建者<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:checked</span>=<span class="string">&quot;$&#123;user.getUserRole()==1&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;createdBy&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span>&gt;</span>管理员<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:checked</span>=<span class="string">&quot;$&#123;user.getUserRole()==2&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;createdBy&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span>&gt;</span>会员<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:checked</span>=<span class="string">&quot;$&#123;user.getUserRole()==3&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;createdBy&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span>&gt;</span>用户<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/11/09/Theleaf/Users\kuaihua\AppData\Roaming\Typora\typora-user-images\image-20221013115857358.png" alt="image-20221013115857358"></p>
<p><img src="/2022/11/09/Theleaf/image-20221013115939759.png" alt="image-20221013115939759"></p>
<p>这就是结果</p>
<h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>所有的html中的元素都可以在theleaf中被替换，使用方式：&#x3D;&#x3D;th：元素名&#x3D;&#x3D;</p>
</html>]]></content>
      <categories>
        <category>springboot</category>
      </categories>
  </entry>
  <entry>
    <title>Swagger依赖跟相关使用笔记</title>
    <url>/2022/11/09/Swagger/</url>
    <content><![CDATA[<h1 id="Swagger-学习"><a href="#Swagger-学习" class="headerlink" title="Swagger 学习"></a>Swagger 学习</h1><p><a href="https://swagger.io/">官网</a></p>
<h2 id="Spring-boot集成Swagger"><a href="#Spring-boot集成Swagger" class="headerlink" title="Spring boot集成Swagger"></a>Spring boot集成Swagger</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 解决springBoot版本与swagger版本冲突问题</span><br><span class="line">spring.mvc.pathmatch.matching-strategy=ant_path_matcher</span><br></pre></td></tr></table></figure>



<h2 id="1-2、Swagger-的Docket实例-可以很好的实现与前端的交互-辨别文件提交人"><a href="#1-2、Swagger-的Docket实例-可以很好的实现与前端的交互-辨别文件提交人" class="headerlink" title="1.2、Swagger 的Docket实例,可以很好的实现与前端的交互,辨别文件提交人"></a>1.2、Swagger 的Docket实例,可以很好的实现与前端的交互,辨别文件提交人</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span>     <span class="comment">// 开启swagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>   <span class="comment">// 配置swagger的 Docket的   bean实例</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">(Environment environment)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置可以生效的环境,判断是否有需要的环境,返回一个布尔值,最后用Docket.enable(profiles)判断</span></span><br><span class="line">        <span class="type">Profiles</span> <span class="variable">profiles</span> <span class="operator">=</span> Profiles.of(<span class="string">&quot;dev&quot;</span>, <span class="string">&quot;pro&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> environment.acceptsProfiles(profiles);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .enable(flag)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">// RequestHandlerSelectors配置需要扫描包的方式</span></span><br><span class="line">                <span class="comment">// basePackage 指定要扫描的包  [常用]</span></span><br><span class="line">                <span class="comment">// any  扫描全部</span></span><br><span class="line">                <span class="comment">// none 都不扫描</span></span><br><span class="line">                <span class="comment">// withClassAnnotation  扫描类上注解</span></span><br><span class="line">                <span class="comment">// withMethodAnnotation  扫描方法上的注解</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.kuaihua.controller&quot;</span>))</span><br><span class="line">                <span class="comment">// paths    过滤扫描路径,any,none,regex[正则],ant</span></span><br><span class="line">                .paths(PathSelectors.ant(<span class="string">&quot;/kuaihua/**&quot;</span>))</span><br><span class="line">                .build()</span><br><span class="line">                ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Contact</span> <span class="variable">contact</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;kuaihua&quot;</span>, <span class="string">&quot;https://www.bilibili.com/&quot;</span>, <span class="string">&quot;2916126724@qq.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">ApiInfo</span>(<span class="string">&quot;学习swagger&quot;</span>,	</span><br><span class="line">                <span class="string">&quot;心有猛虎,细嗅蔷薇&quot;</span>,</span><br><span class="line">                <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;urn:tos&quot;</span>,</span><br><span class="line">                contact,</span><br><span class="line">                <span class="string">&quot;Apache 2.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayList</span>());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="如何让swagger在生产环境使用-在测试环境不适用"><a href="#如何让swagger在生产环境使用-在测试环境不适用" class="headerlink" title="如何让swagger在生产环境使用,在测试环境不适用"></a>如何让swagger在生产环境使用,在测试环境不适用</h2><p>xxxxxxxxxx61 1    <dependencies>2​3        <!-- https://mvnrepository.com/artifact/org.apache.dubbo/dubbo-spring-boot-starter -->4        <dependency>5            <groupId>org.apache.dubbo</groupId>6            <artifactId>dubbo-spring-boot-starter</artifactId>7            <version>2.7.3</version>8        </dependency>9​10        <!-- https://mvnrepository.com/artifact/com.github.sgroschupf/zkclient -->11        <dependency>12            <groupId>com.github.sgroschupf</groupId>13            <artifactId>zkclient</artifactId>14            <version>0.1</version>15        </dependency>16​17​18        <!--排除日志-->19        <!-- https://mvnrepository.com/artifact/org.apache.curator/curator-framework -->20        <dependency>21            <groupId>org.apache.curator</groupId>22            <artifactId>curator-framework</artifactId>23            <version>2.12.0</version>24        </dependency>25​26​27        <!-- https://mvnrepository.com/artifact/org.apache.curator/curator-recipes -->28        <dependency>29            <groupId>org.apache.curator</groupId>30            <artifactId>curator-recipes</artifactId>31            <version>2.12.0</version>32        </dependency>33​34        <!--排除日志，不然会日志冲突-->35        <!-- https://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper -->36        <dependency>37            <groupId>org.apache.zookeeper</groupId>38            <artifactId>zookeeper</artifactId>39            <version>3.4.14</version>40            <exclusions>41                <exclusion>42                    <groupId>org.slf4j</groupId>43                    <artifactId>slf4j-log4j12</artifactId>44                </exclusion>45            </exclusions>46        </dependency>47​48​49​50​51        <dependency>52            <groupId>org.springframework.boot</groupId>53            <artifactId>spring-boot-starter-web</artifactId>54        </dependency>55​56        <dependency>57            <groupId>org.springframework.boot</groupId>58            <artifactId>spring-boot-starter-test</artifactId>59            <scope>test</scope>60        </dependency>61    </dependencies>xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Profiles profiles = Profiles.of(&quot;dev&quot;, &quot;pro&quot;);</span><br><span class="line">boolean flag = environment.acceptsProfiles(profiles);</span><br></pre></td></tr></table></figure>

<p>flag来判断它是否属于我想要的测试环境</p>
<p>通过.enable(true&#x2F;false) 	来处理是否关闭Swagger的调试页面</p>
<h2 id="关键-groupname-这个可以很好的体现开发中的前后端链接作用"><a href="#关键-groupname-这个可以很好的体现开发中的前后端链接作用" class="headerlink" title="关键.groupname(),这个可以很好的体现开发中的前后端链接作用"></a>关键.groupname(),这个可以很好的体现开发中的前后端链接作用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket4</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>   <span class="comment">// 配置swagger的 Docket的   bean实例</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">(Environment environment)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置可以生效的环境,判断是否有需要的环境,返回一个布尔值,最后用Docket.enable(profiles)判断</span></span><br><span class="line">        <span class="comment">// Profiles profiles = Profiles.of(&quot;dev&quot;, &quot;pro&quot;);</span></span><br><span class="line">        <span class="comment">// boolean flag = environment.acceptsProfiles(profiles);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .groupName(<span class="string">&quot;kuaihua&quot;</span>)   <span class="comment">// 这里是最重要的,只有设置了分组才可以协同开发</span></span><br><span class="line">                <span class="comment">// 这里配置的是Docket的主要工作情况</span></span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                <span class="comment">// .enable(flag)</span></span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">// RequestHandlerSelectors配置需要扫描包的方式</span></span><br><span class="line">                <span class="comment">// basePackage 指定要扫描的包  [常用]</span></span><br><span class="line">                <span class="comment">// any  扫描全部</span></span><br><span class="line">                <span class="comment">// none 都不扫描</span></span><br><span class="line">                <span class="comment">// withClassAnnotation  扫描类上注解</span></span><br><span class="line">                <span class="comment">// withMethodAnnotation  扫描方法上的注解</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.kuaihua.controller&quot;</span>))</span><br><span class="line">                <span class="comment">// paths    过滤扫描路径,any,none,regex[正则],ant</span></span><br><span class="line">                .paths(PathSelectors.ant(<span class="string">&quot;/kuaihua/**&quot;</span>))</span><br><span class="line">                .build()</span><br><span class="line">                ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuaihua.pojo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ApiModel ApiModelProperty 用来配合 Swagger的  Model 有中文注解</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;用户实体类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;密码&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>Swagger</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware配置</title>
    <url>/2022/11/09/VMware%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="虚拟机连网操作"><a href="#虚拟机连网操作" class="headerlink" title="虚拟机连网操作"></a>虚拟机连网操作</h2><p><img src="/2022/11/09/VMware%E9%85%8D%E7%BD%AE/image-20220923090345458.png" alt="image-20220923090345458"></p>
<span id="more"></span>

<p><img src="/2022/11/09/VMware%E9%85%8D%E7%BD%AE/image-20220923090425079.png" alt="image-20220923090425079"></p>
]]></content>
      <categories>
        <category>VMware</category>
      </categories>
  </entry>
  <entry>
    <title>application.yml常用配置各种组件在springboot的yml文件中的配置</title>
    <url>/2022/11/09/application-yml%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="application-yml文件配置"><a href="#application-yml文件配置" class="headerlink" title="application.yml文件配置"></a>application.yml文件配置</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">888888</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  整合mybatis</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.kuaihua.pojo</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">888888</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#SpringBoot默认是不注入这些的，需要自己绑定</span></span><br><span class="line">    <span class="comment">#druid数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#配置监控统计拦截的filters，stat：监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment">#如果允许报错，java.lang.ClassNotFoundException: org.apache.Log4j.Properity</span></span><br><span class="line">    <span class="comment">#则导入log4j 依赖就行</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionoProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
  </entry>
  <entry>
    <title>git的安装和学习过程</title>
    <url>/2022/11/09/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="Git-的学习和使用-简介"><a href="#Git-的学习和使用-简介" class="headerlink" title="Git 的学习和使用(简介)"></a>Git 的学习和使用(简介)</h2><p>Git（读音为&#x2F;gɪt&#x2F;）是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 也是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。<br>Torvalds 开始着手开发 Git 是为了作为一种过渡方案来替代 BitKeeper 。</p>
<span id="more"></span>

<p>&#x3D;&#x3D;Git Bash&#x3D;&#x3D; : Unix与Linux风格的命令行，使用最多，推荐最多Git </p>
<p>CMD : Windows风格的命令行</p>
<p>Git GUI:图形界面的Git，不建议初学者使用，尽量先熟悉常用命令</p>
<h2 id="1-常见的几种命令"><a href="#1-常见的几种命令" class="headerlink" title="1.常见的几种命令"></a>1.常见的几种命令</h2><p><img src="/2022/11/09/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220919105456347.png" alt="image-20220919105456347"></p>
<p>基本的Linux命令学习<br>1 ) 、cd:改变目录。<br>2 ) 、cd ..回退到上一个目录，直接cd进入默认目录<br>3 ) 、pwd :显示当前所在的目录路径。<br>4 ) 、ls(Il):都是列出当前目录中的所有文件，只不过II(两个II)列出的内容更为详<br>5 ) 、touch :新建一个文件如touch index.js 就会在当前目录下新建一个index.js文件。<br>6 ) .rm:删除一个文件, rm index.js 就会把index.js文件删除。<br>7 ) 、mkdir:新建一个目录,就是新建一个文件夹。<br>8 ) .rm -r∶删除一个文件夹, rm -r src删除src目录rm -rf &#x2F;切勿在Linux中尝试!删除电脑中全部文件!<br>9 ) 、mv移动文件, mv index.html src index.html是我们要移动的文件, src是目标文件夹标文件夹在同一目录下。<br>10 ) 、reset重新初始化终端&#x2F;清屏。<br>11 ) 、clear清屏。<br>12 ) 、history查看命令历史。13 ) . help 帮助。<br>14 ) 、exit退出。<br>15 )、#表示注释</p>
<h2 id="2-必须配置的东西"><a href="#2-必须配置的东西" class="headerlink" title="2.必须配置的东西"></a>2.必须配置的东西</h2><p><img src="/2022/11/09/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220919110916623.png" alt="image-20220919110916623"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git -config --global user.name &quot;&quot; # 用户名字</span><br><span class="line">git -config --global user.email &quot;&quot; # 用户邮箱</span><br><span class="line">C:\Users\kuaihua\.gitconfig写</span><br><span class="line">配置信息会在</span><br></pre></td></tr></table></figure>

<h2 id="3-项目的工作区域"><a href="#3-项目的工作区域" class="headerlink" title="3. 项目的工作区域"></a>3. 项目的工作区域</h2><p><img src="/2022/11/09/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220919111311226.png" alt="image-20220919111311226"></p>
<p>并且常用的三个命令:add,commit,push,clone&#x2F;fetch,checkout</p>
<p><img src="/2022/11/09/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220919182113152.png" alt="image-20220919182113152"></p>
<h2 id="4-搭建项目的两种方式-克隆"><a href="#4-搭建项目的两种方式-克隆" class="headerlink" title="4.搭建项目的两种方式:(克隆)"></a>4.搭建项目的两种方式:(克隆)</h2><p>第一种:git	 init</p>
<blockquote>
<p>第二种:git clone [url]</p>
<p>eg:<a href="https://gitee.com/enilu/web-flash.git">https://gitee.com/enilu/web-flash.git</a></p>
</blockquote>
<h2 id="5-指令"><a href="#5-指令" class="headerlink" title="5.指令"></a>5.指令</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">git status			查看文件的添加或者删除状态</span><br><span class="line">	</span><br><span class="line">git add .			添加所有文件到缓冲区</span><br><span class="line"></span><br><span class="line">git commit -m 		提交缓冲区中的内容到本地仓库 -m 提交的介绍</span><br></pre></td></tr></table></figure>



<p><img src="/2022/11/09/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220919183313844.png" alt="image-20220919183313844"></p>
<h2 id="6-上传忽略的东西-一般idea中会有"><a href="#6-上传忽略的东西-一般idea中会有" class="headerlink" title="6.上传忽略的东西(一般idea中会有)"></a>6.上传忽略的东西(一般idea中会有)</h2><p><img src="/2022/11/09/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220919183123535.png" alt="image-20220919183123535"></p>
<h2 id="7-生成公钥私钥"><a href="#7-生成公钥私钥" class="headerlink" title="7.生成公钥私钥"></a>7.生成公钥私钥</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<p><img src="/2022/11/09/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220919184900218.png" alt="image-20220919184900218"></p>
<p>然后就会在这个目录下生产两个文件</p>
<p>然后把pub后缀文件的公钥复制粘贴到图片的公钥处</p>
<p><img src="/2022/11/09/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220919185624037.png" alt="image-20220919185624037"></p>
<h2 id="8-简单做一下远程实验-创建一个项目"><a href="#8-简单做一下远程实验-创建一个项目" class="headerlink" title="8.简单做一下远程实验(创建一个项目)"></a>8.简单做一下远程实验(创建一个项目)</h2><p><img src="/2022/11/09/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220919185547570.png" alt="image-20220919185547570"></p>
<h2 id="9-idea中使用Git"><a href="#9-idea中使用Git" class="headerlink" title="9. idea中使用Git"></a>9. idea中使用Git</h2><h3 id="9-1-在git中新建一个文件"><a href="#9-1-在git中新建一个文件" class="headerlink" title="9.1 在git中新建一个文件"></a>9.1 在git中新建一个文件</h3><p><img src="/2022/11/09/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220919185547570.png" alt="image-20220919185547570"></p>
<h3 id="9-2克隆仓库到本地"><a href="#9-2克隆仓库到本地" class="headerlink" title="9.2克隆仓库到本地"></a>9.2克隆仓库到本地</h3><p><img src="/2022/11/09/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220919191344690.png" alt="image-20220919191344690"></p>
<h3 id="9-3-在idea中创建一个springboot文件"><a href="#9-3-在idea中创建一个springboot文件" class="headerlink" title="9.3 在idea中创建一个springboot文件"></a>9.3 在idea中创建一个springboot文件</h3><p><img src="/2022/11/09/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220919191530875.png" alt="image-20220919191530875"></p>
<p>这里的gitxuexi就是</p>
<h3 id="9-4-把9-2中的文件复制到gitxuexi目录下-替换就行"><a href="#9-4-把9-2中的文件复制到gitxuexi目录下-替换就行" class="headerlink" title="9.4 把9.2中的文件复制到gitxuexi目录下,替换就行"></a>9.4 把9.2中的文件复制到gitxuexi目录下,替换就行</h3><p>这是一种方法,简单</p>
<h3 id="9-5然后登录git账号-可以省略-在terminal窗口中使用命令"><a href="#9-5然后登录git账号-可以省略-在terminal窗口中使用命令" class="headerlink" title="9.5然后登录git账号(可以省略,在terminal窗口中使用命令)"></a>9.5然后登录git账号(可以省略,在terminal窗口中使用命令)</h3><p><img src="/2022/11/09/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20221009183510315.png" alt="image-20221009183510315"></p>
<p><img src="/2022/11/09/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20221009192009068.png" alt="image-20221009192009068"></p>
<p>&#x3D;&#x3D;如上面所示,这就完成了一次提交&#x3D;&#x3D;</p>
<h2 id="10-分支"><a href="#10-分支" class="headerlink" title="10.分支"></a>10.分支</h2><p><img src="/2022/11/09/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220919200213245.png" alt="image-20220919200213245"></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello,Hexo</title>
    <url>/2022/11/05/hello-world/</url>
    <content><![CDATA[<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="新建一篇文章"><a href="#新建一篇文章" class="headerlink" title="新建一篇文章"></a>新建一篇文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>



<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>



<h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>idea报错异常的原因跟处理方式(java跟springboot版本也记录)</title>
    <url>/2022/11/12/idea%E6%8A%A5%E9%94%99%E5%BC%82%E5%B8%B8%E7%9A%84%E5%8E%9F%E5%9B%A0%E8%B7%9F%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="1-数组越界-ArrayIndexOutOfBoundsException-数字"><a href="#1-数组越界-ArrayIndexOutOfBoundsException-数字" class="headerlink" title="1. 数组越界(ArrayIndexOutOfBoundsException:数字)"></a>1. 数组越界(ArrayIndexOutOfBoundsException:数字)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums;</span><br><span class="line">        nums = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            nums[i] = i+<span class="number">1</span>;</span><br><span class="line">            System.out.println(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 数组越界,下标最大只有nums[9]</span></span><br><span class="line">        System.out.println(nums[<span class="number">10</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>表示我们数组的第几个下标越界了</p>
<p><img src="/2022/11/12/idea%E6%8A%A5%E9%94%99%E5%BC%82%E5%B8%B8%E7%9A%84%E5%8E%9F%E5%9B%A0%E8%B7%9F%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/image-20221112130818626.png" alt="image-20221112130818626"></p>
<h4 id="2-类型转换异常-ClassCastException"><a href="#2-类型转换异常-ClassCastException" class="headerlink" title="2.类型转换异常 ClassCastException"></a>2.类型转换异常 ClassCastException</h4>]]></content>
      <categories>
        <category>报错</category>
      </categories>
  </entry>
  <entry>
    <title>hexo的next(8.12.1)主题图片不能显示</title>
    <url>/2022/11/08/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E5%9B%BE%E7%89%87%E4%B8%8D%E8%83%BD%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><span id="more"></span>

<p><img src="/2022/11/08/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E5%9B%BE%E7%89%87%E4%B8%8D%E8%83%BD%E6%98%BE%E7%A4%BA/version.png" alt="主题跟相关组件版本"></p>
<h2 id="安装依赖跟修改相关文件"><a href="#安装依赖跟修改相关文件" class="headerlink" title="安装依赖跟修改相关文件"></a>安装依赖跟修改相关文件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 安装依赖包 npm install hexo-asset-image -- save</span><br><span class="line"><span class="number">2.</span> 在hexo根目录的_config.yml设置post_asset_folder: <span class="literal">true</span>	# 作用利用<span class="string">&quot;hexo n &#x27;文件名&#x27;&quot;</span>生成一个新md文件的同时,生成一	个在	source/_posts目录下生成一个同名的文件夹,这个文件夹就是用来放置需要保存的图片的</span><br><span class="line"><span class="number">3.</span> 引入图片,格式是(./我的博客搭建-过程/eg01.png),必须是反斜杠,不然还是不会显示出来,而且要写相对路径,绝对路径在我这里不可以显示&gt;_&lt;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/11/08/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E5%9B%BE%E7%89%87%E4%B8%8D%E8%83%BD%E6%98%BE%E7%A4%BA/eg01.png" alt="例子"></p>
<p><img src="/2022/11/08/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E5%9B%BE%E7%89%87%E4%B8%8D%E8%83%BD%E6%98%BE%E7%A4%BA/eg02.png" alt="image-20221108200109374"></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>java基础知识回顾</title>
    <url>/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<p>&#x3D;&#x3D;查漏补缺,没有写细节,细节大都都懂&#x3D;&#x3D;</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="java-数据类型优先级"><a href="#java-数据类型优先级" class="headerlink" title="java 数据类型优先级"></a><a href="https://www.cnblogs.com/jasonlai2016/p/11654946.html">java 数据类型优先级</a></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">由低到高:</span><br><span class="line">byte,short,char—&gt; int —&gt; long—&gt; <span class="built_in">float</span> —&gt; double</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1个字节8位</span><br><span class="line">　　计算机的基本单位：bit .　　一个bit代表一个0或1</span><br><span class="line"></span><br><span class="line">byte：1byte = 8bit　　　　 1个字节是8个bit</span><br><span class="line"></span><br><span class="line">byte 8bit 默认为0，取值-128–127</span><br><span class="line">short 16bit 默认为0，取值-32768–32767</span><br><span class="line">int 32bit 默认为0，取值-21亿–21亿</span><br><span class="line">long 64bit 默认为0，取值-922亿亿–922亿亿</span><br><span class="line">double 64bit 默认为0.0d，一般数为整数是加上d用于区分</span><br><span class="line"><span class="built_in">float</span> 32bit 默认为0.0ff</span><br><span class="line">char 16bit 默认’\u0000’</span><br><span class="line">boolean 1bit 默认<span class="literal">false</span></span><br></pre></td></tr></table></figure>



<ol>
<li><p>不能对boolean类型进行类型转换。</p>
</li>
<li><p>不能把对象类型转换成不相关类的对象。</p>
</li>
<li><p>在把容量大的类型转换为容量小的类型时必须使用强制类型转换。</p>
</li>
<li><p>转换过程中可能导致溢出或损失精度</p>
</li>
<li><p>浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入</p>
</li>
<li><p>知识点:最好不要使用浮点数进行比较,原因:因为浮点数是有限的,有舍入误差</p>
</li>
</ol>
<p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221111103543315.png" alt="image-20221111103543315"></p>
<h3 id="常量-staic-final"><a href="#常量-staic-final" class="headerlink" title="常量(staic ,final)"></a>常量(staic ,final)</h3><p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221111105910072.png" alt="image-20221111105910072"></p>
<p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221111110053513.png" alt="image-20221111110053513"></p>
<p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221111182517761.png" alt="image-20221111182517761"></p>
<p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221111182923042.png" alt="image-20221111182923042"></p>
<h3 id="Scanner-前期交互"><a href="#Scanner-前期交互" class="headerlink" title="Scanner(前期交互)"></a>Scanner(前期交互)</h3><h4 id="Scanner对象"><a href="#Scanner对象" class="headerlink" title="Scanner对象"></a>Scanner对象</h4><p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221111183724132.png" alt="image-20221111183724132"></p>
<h4 id="eg"><a href="#eg" class="headerlink" title="eg:"></a>eg:</h4><p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221111184236621.png" alt="image-20221111184236621"></p>
<h4 id="next-与nextLine"><a href="#next-与nextLine" class="headerlink" title="next()与nextLine()"></a>next()与nextLine()</h4><p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221111184756108.png" alt="image-20221111184756108"></p>
<h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. 顺序结构(所有的程序都有)</span><br><span class="line">2. 选择结构(<span class="keyword">if</span>,switch ... case..break)</span><br><span class="line">3. 循环结构(<span class="keyword">while</span>,<span class="keyword">for</span>,do...while(代码至少被执行了一次))</span><br><span class="line">	- <span class="keyword">while</span>(<span class="literal">true</span>)  伪代码,死循环,尽量避免</span><br></pre></td></tr></table></figure>



<p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221111200408365.png" alt="image-20221111200408365"></p>
<h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><h4 id="switch-…case-常与break连用"><a href="#switch-…case-常与break连用" class="headerlink" title="switch …case(常与break连用)"></a>switch …case(常与break连用)</h4><p>不予break连用,会出现&#x3D;&#x3D;case穿透&#x3D;&#x3D;问题</p>
<p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221111200756738.png" alt="image-20221111200756738"></p>
<p>在jdk7以后才支持字符串的比较</p>
<h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><p>最有效,灵活的循环结构</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">idea快捷键: 100.<span class="keyword">for</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuaihua.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> []numbers = &#123;<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>&#125;;      <span class="comment">// 定义一个数组</span></span><br><span class="line">        <span class="comment">// 第一种方式</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            System.out.println(numbers[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;=========================&quot;</span>);</span><br><span class="line">        <span class="comment">// 第二种方式(简化) 快捷方式 :numbers.for</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : numbers) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="break与continue的区别"><a href="#break与continue的区别" class="headerlink" title="break与continue的区别"></a>break与continue的区别</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">break</span>只是结束本次循环,不会结束上一级的循环</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">while</span> (j==<span class="number">30</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="number">30</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">20</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221111213648471.png" alt="image-20221111213648471"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDemo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j&gt;<span class="number">10</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                System.out.println(<span class="string">&quot;j=====&gt;&quot;</span> + j);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;i=====&gt;&quot;</span> + i);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221111214226916.png" alt="image-20221111214226916"></p>
<p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221111212743835.png" alt="image-20221111212743835"></p>
<h3 id="编译与反编译文件"><a href="#编译与反编译文件" class="headerlink" title="编译与反编译文件"></a>编译与反编译文件</h3><p>编译文件:java(我们可以看懂)–&gt;class(乱码)</p>
<p>反编译:class—&gt;java</p>
<p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221111201503358.png" alt="image-20221111201503358"><br>每一个对象都有一个通过算法获取的hashcode,通过对比hashcode的不同就可以知道两个值是不是一样,这样才可以进行string的比较</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>什么是方法:</p>
<p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221112100407495.png" alt="image-20221112100407495"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="number">0</span>;   <span class="comment">// 还有终止方法的作用,如果需要终止某个任务的话</span></span><br></pre></td></tr></table></figure>

<h4 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h4><p>什么是重载:方法重载的要求是两同一不同：&#x3D;&#x3D;同一个类&#x3D;&#x3D;中&#x3D;&#x3D;同样的方法名&#x3D;&#x3D;，参数列表不同。至于方法的其他部分，如方法返回值类型、修饰符等，与方法重载没有任何关系。</p>
<p><strong>方法重载的要求是两同一不同：同一个类中方法名相同，参数列表不同。至于方法的其他部分，如方法返回值类型、修饰符等，与方法重载没有任何关系。</strong></p>
<p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221112104701274.png" alt="image-20221112104701274"></p>
<h4 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h4><h5 id="要求"><a href="#要求" class="headerlink" title="要求:"></a>要求:</h5><ol>
<li>必须得有继承关系,子类重写父类方法</li>
<li>参数列表必须相同</li>
<li>范围可以扩大,但是不能缩小</li>
<li>异常的范围可以缩小,不能扩大(可以更加具体,但是不能更加省略,因为父类就是exception)</li>
</ol>
<p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221112220651049.png" alt="image-20221112220651049"><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221112221516190.png" alt="image-20221112221516190"> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">重写有参构造后无参构造就会失效,所以在加上有参构造的时候都会先加上无参构造,不然会报错,很多方法调用不了</span><br></pre></td></tr></table></figure>



<h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221112105641342.png" alt="image-20221112105641342"></p>
<h3 id="传递"><a href="#传递" class="headerlink" title="传递"></a>传递</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">传递方式:</span><br><span class="line">	- 值传递</span><br><span class="line">	- 引用传递</span><br></pre></td></tr></table></figure>





<p>&#x3D;&#x3D;java都是值传递思想&#x3D;&#x3D;</p>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221112122236193.png" alt="image-20221112122236193"></p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">60</span>]; </span><br></pre></td></tr></table></figure>



<p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221112123450614.png" alt="image-20221112123450614"></p>
<h4 id="数组特点"><a href="#数组特点" class="headerlink" title="数组特点"></a>数组特点</h4><p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/Hexo\hexoblog\source_posts\java基础复习\image-20221112130202571.png" alt="image-20221112130202571"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- 长度确定不可以修改</span><br><span class="line">- 元素必须是相同类型的,创建很好记,int为整型,那么[]为数组(个人理解)</span><br><span class="line">- 数组元素可以是任何类型,可以是基本类型,也可以是引用类型,eg:new Man()</span><br><span class="line">- 数组变量属于引用类型,数组可以看成对象,数组中每个元素相当于对象的成员变量</span><br><span class="line">- 数组本身是对象,对象放在<span class="comment">#堆中# </span></span><br></pre></td></tr></table></figure>

<p>数组一旦创建就不可以修改,页有他们的初始值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums= <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="type">long</span>[] longs = <span class="keyword">new</span> <span class="title class_">long</span>[<span class="number">10</span>];</span><br><span class="line">        String[] strings= <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="type">double</span>[] doubles= <span class="keyword">new</span> <span class="title class_">double</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="type">char</span>[] chars= <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="type">boolean</span>[] booleans = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;nums 初始值&quot;</span> + nums[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(<span class="string">&quot;longs 初始值&quot;</span> + longs[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(<span class="string">&quot;strings 初始值&quot;</span> +strings[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(<span class="string">&quot;doubles 初始值&quot;</span> +doubles[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(<span class="string">&quot;chars 初始值&quot;</span> +chars[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(<span class="string">&quot;booleans 初始值&quot;</span> +booleans[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=========================================================</span><br><span class="line">nums 初始值<span class="number">0</span></span><br><span class="line">longs 初始值<span class="number">0</span></span><br><span class="line">strings 初始值<span class="literal">null</span></span><br><span class="line">doubles 初始值<span class="number">0.0</span></span><br><span class="line">chars 初始值 </span><br><span class="line">booleans 初始值<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组:"></a>二维数组:</h4><p>int 类型的一维数组,元素都是整数,</p>
<h4 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h4><p>记录有数组(记作A数组)中不为默认值的数组的位置,保存在另一个数组(记作 B数组)中,另一个数组的第一行分别记录第一个数组A的二维(行列数),第三个记录A数组中不为0的元素个数</p>
<p>然后在B数组中记录A数组中元素值不为0的元素在数组A中的位置,并记录它的值</p>
<p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221112194635096.png" alt="image-20221112194635096"></p>
<h3 id="Array类-Jdk自带的"><a href="#Array类-Jdk自带的" class="headerlink" title="Array类(Jdk自带的)"></a>Array类(Jdk自带的)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">常用的几个自带的方法:</span><br><span class="line"> - Array.toString()</span><br><span class="line"> - Array.<span class="built_in">sort</span>()		<span class="comment"># 排序,由小到大排</span></span><br><span class="line"> - Array.fill()		<span class="comment"># 填充</span></span><br></pre></td></tr></table></figure>



<h3 id="面向对象编程-OOP"><a href="#面向对象编程-OOP" class="headerlink" title="面向对象编程(OOP)"></a>面向对象编程(OOP)</h3><p>&#x3D;&#x3D;本质:以类的方式组织代码,以对象的组织(封装)数据&#x3D;&#x3D;</p>
<h4 id="三大特性"><a href="#三大特性" class="headerlink" title="三大特性"></a>三大特性</h4><ul>
<li>封装</li>
<li><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221112211444478.png" alt="image-20221112211444478"></li>
<li>继承</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Super() 调用父类中的方法</span><br></pre></td></tr></table></figure>

<p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221112215128317.png" alt="image-20221112215128317"></p>
<p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221112214853788.png" alt="image-20221112214853788"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在java中,所有的类都直接或者间接继承<span class="string">&quot;Object类&quot;</span></span><br><span class="line">在java中只有单继承,但是可以间接继承多个</span><br></pre></td></tr></table></figure>



<ul>
<li>多态</li>
<li><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221113100857495.png" alt="image-20221113100857495"></li>
</ul>
<h4 id="instanceof-判断两个类之间是否存在父子关系"><a href="#instanceof-判断两个类之间是否存在父子关系" class="headerlink" title="instanceof  判断两个类之间是否存在父子关系"></a>instanceof  判断两个类之间是否存在父子关系</h4><p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221113101156680.png" alt="image-20221113101156680"></p>
<p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221113101403121.png" alt="image-20221113101403121"></p>
<h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><ul>
<li>静态方法(有static)</li>
</ul>
<p>​		可以直接调用,不用new一个对象,直接就可以点出来</p>
<ul>
<li><p>非静态方法</p>
<p>  ​	需要new 一个对象,然后才可以点出来,如图所示</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Student.say();</span><br><span class="line"></span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">teacher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">        </span><br><span class="line">        teacher.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">==============================================================</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;		</span><br><span class="line">        System.out.println(<span class="string">&quot;这不是一个静态方法,老师讲课===&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">===============================================================</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;       <span class="comment">// 有static,是个静态方法</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;这是一个静态方法,学生说话了&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有static的静态方法,在类一开始时候就创建了,所以有	</p>
<p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221112210041907.png" alt="image-20221112210041907"></p>
<h3 id="Super与This"><a href="#Super与This" class="headerlink" title="Super与This"></a>Super与This</h3><p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221112215740128.png" alt="image-20221112215740128"></p>
<h3 id="Static-静态"><a href="#Static-静态" class="headerlink" title="Static(静态)"></a>Static(静态)</h3><p>静态的,类加载的时候就启动了,也只会启动一次</p>
<p>静态方法可以调用静态方法,如果变量用static修饰就成了类变量,可以直接类名点的方式调用,</p>
<p>可以这样</p>
<h3 id="final-无子类-不能被继承-断子绝孙"><a href="#final-无子类-不能被继承-断子绝孙" class="headerlink" title="final(无子类,不能被继承[断子绝孙])"></a>final(无子类,不能被继承[断子绝孙])</h3><h3 id="抽象类-abstract-只能通过extends实现单继承"><a href="#抽象类-abstract-只能通过extends实现单继承" class="headerlink" title="抽象类(abstract)只能通过extends实现单继承"></a>抽象类(abstract)只能通过extends实现单继承</h3><p>特点:</p>
<ol>
<li>抽象类里面&#x3D;&#x3D;可以有普通方法&#x3D;&#x3D;</li>
<li>抽象方法&#x3D;&#x3D;必须在抽象类里面&#x3D;&#x3D;</li>
<li>抽象类&#x3D;&#x3D;不能去new,只 能靠子类去实现它 约束!&#x3D;&#x3D;</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Demo05</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只是个约束,有人帮我们实现了</span></span><br><span class="line">    <span class="comment">// abstract 抽象类,只有方法名字,没有方法的实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span>  <span class="title function_">say</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jump</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ikun is jumping&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象类里面可以有普通方法</span></span><br><span class="line">    <span class="comment">// 抽象方法必须在抽象类里面</span></span><br><span class="line">    <span class="comment">// 抽象类不能去new,只能靠子类去实现它 约束!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="接口-interface-可以实现-x3D-x3D-伪多继承-x3D-x3D"><a href="#接口-interface-可以实现-x3D-x3D-伪多继承-x3D-x3D" class="headerlink" title="接口(interface):可以实现(&#x3D;&#x3D;伪多继承&#x3D;&#x3D;)"></a>接口(interface):可以实现(&#x3D;&#x3D;伪多继承&#x3D;&#x3D;)</h3><p>&#x3D;&#x3D;一般都是要接口去new 实现类&#x3D;&#x3D;</p>
<p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221113114041441.png" alt="image-20221113114041441"></p>
<p>例子:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 关键字 interfance ,接口都需要有实现类,接口只能写方法,不能写方法体.这还是与abstract(抽象类)最根本的区别</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">G</span> <span class="operator">=</span> <span class="number">99</span>;     <span class="comment">// 一般简写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">A</span> <span class="operator">=</span> <span class="number">100</span>;        <span class="comment">// 全写</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>;         <span class="comment">// public abstract void say();</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TimeService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">jump</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>,TimeService&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jump</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h3 id="堆和栈"><a href="#堆和栈" class="headerlink" title="堆和栈"></a>堆和栈</h3><p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221112123918002.png" alt="	"><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221112211349000.png" alt="image-20221112211349000"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="异常类别"><a href="#异常类别" class="headerlink" title="异常类别"></a>异常类别</h3><p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221113120702350.png" alt="image-20221113120702350"><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221113120758996.png" alt="image-20221113120758996"></p>
<h3 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常:"></a>捕获异常:</h3><p><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221113124826321.png" alt="image-20221113124826321"><img src="/2022/11/11/java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/image-20221113125328091.png" alt="image-20221113125328091"></p>
<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键:"></a>快捷键:</h3><p>Ctrl+alt+T</p>
]]></content>
  </entry>
  <entry>
    <title>shiro授权认证与thyleaf的简单使用</title>
    <url>/2022/11/09/shiro/</url>
    <content><![CDATA[<h1 id="1、shiro的学习和使用"><a href="#1、shiro的学习和使用" class="headerlink" title="1、shiro的学习和使用"></a>1、shiro的学习和使用</h1><h2 id="1-1、三大对象"><a href="#1-1、三大对象" class="headerlink" title="1.1、三大对象"></a>1.1、三大对象</h2><ul>
<li><p>Subject</p>
</li>
<li><p>SecurityMassager</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Subject</span> <span class="variable">currentUser</span> <span class="operator">=</span> SecurityUtil.getSubject();	获得Subject</span><br><span class="line"><span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> currentUser.getSession();	通过Subject 获取	 session</span><br><span class="line"><span class="keyword">if</span>（！currentUser.isAuthenticated()）;		判断用户是否被认证</span><br><span class="line">currentUser.getPrincipal();		回顾当前用户的认证</span><br><span class="line">currentUser.hasRole(<span class="string">&quot;schwartz&quot;</span>)		获得用户是否拥有schwartz这个角色</span><br><span class="line">currentUser.isPermitted(<span class="string">&quot;lighsaber.wield&quot;</span>);		获得用户后面的参数</span><br><span class="line">currentUser.logout();		注销</span><br></pre></td></tr></table></figure>

</blockquote>
<p>  xxxxxxxxxx61 1    <dependencies>2​3        <!-- https://mvnrepository.com/artifact/org.apache.dubbo/dubbo-spring-boot-starter -->4        <dependency>5            <groupId>org.apache.dubbo</groupId>6            <artifactId>dubbo-spring-boot-starter</artifactId>7            <version>2.7.3</version>8        </dependency>9​10        <!-- https://mvnrepository.com/artifact/com.github.sgroschupf/zkclient -->11        <dependency>12            <groupId>com.github.sgroschupf</groupId>13            <artifactId>zkclient</artifactId>14            <version>0.1</version>15        </dependency>16​17​18        <!--排除日志-->19        <!-- https://mvnrepository.com/artifact/org.apache.curator/curator-framework -->20        <dependency>21            <groupId>org.apache.curator</groupId>22            <artifactId>curator-framework</artifactId>23            <version>2.12.0</version>24        </dependency>25​26​27        <!-- https://mvnrepository.com/artifact/org.apache.curator/curator-recipes -->28        <dependency>29            <groupId>org.apache.curator</groupId>30            <artifactId>curator-recipes</artifactId>31            <version>2.12.0</version>32        </dependency>33​34        <!--排除日志，不然会日志冲突-->35        <!-- https://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper -->36        <dependency>37            <groupId>org.apache.zookeeper</groupId>38            <artifactId>zookeeper</artifactId>39            <version>3.4.14</version>40            <exclusions>41                <exclusion>42                    <groupId>org.slf4j</groupId>43                    <artifactId>slf4j-log4j12</artifactId>44                </exclusion>45            </exclusions>46        </dependency>47​48​49​50​51        <dependency>52            <groupId>org.springframework.boot</groupId>53            <artifactId>spring-boot-starter-web</artifactId>54        </dependency>55​56        <dependency>57            <groupId>org.springframework.boot</groupId>58            <artifactId>spring-boot-starter-test</artifactId>59            <scope>test</scope>60        </dependency>61    </dependencies>xml</p>
</li>
<li><p>Realm</p>
  <span id="more"></span>
<h2 id="1-2、用到的依赖有"><a href="#1-2、用到的依赖有" class="headerlink" title="1.2、用到的依赖有"></a>1.2、用到的依赖有</h2></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.theborakompanioni/thymeleaf-extras-shiro --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--整合Thymeleaf--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="1-3、学习的案例"><a href="#1-3、学习的案例" class="headerlink" title="1.3、学习的案例"></a>1.3、学习的案例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuaihua.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuaihua.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.kuaihua.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.Session;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了 授权  doGetAuthorizationInfo==========&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleAuthorizationInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// info.addStringPermission(&quot;user:add&quot;);</span></span><br><span class="line">        <span class="comment">//拿到当前用户</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        <span class="type">User</span> <span class="variable">currentUser</span> <span class="operator">=</span> (User) subject.getPrincipal();   <span class="comment">// 拿到当前用户信息，这是下面的认证方法new SimpleAuthenticationInfo(user,user.getPwd(),&quot;&quot;)中的user参数</span></span><br><span class="line">        info.addStringPermission(currentUser.getPerms());   <span class="comment">// 从当前用户中获取到需要的权限perms参数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了 认证  doGetAuthenticationInfo==========&quot;</span>);</span><br><span class="line">        <span class="comment">// // 这就是认证，本来是从数据库中取得数据，但是这里先模拟数据</span></span><br><span class="line">        <span class="comment">//     String name = &quot;root&quot;;</span></span><br><span class="line">        <span class="comment">//     String password = &quot;123456&quot;;</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//     UsernamePasswordToken userToken = (UsernamePasswordToken) token;</span></span><br><span class="line">        <span class="comment">//     if(!userToken.getUsername().equals(name))&#123;</span></span><br><span class="line">        <span class="comment">//         return null;    // return null 的意思是抛出异常</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">//     //认证密码，shiro帮我们做了，不用我们做，保证数据的安全性</span></span><br><span class="line">        <span class="comment">//     return new SimpleAuthenticationInfo(&quot;&quot;,password,&quot;&quot;);</span></span><br><span class="line">        <span class="comment">// &#125;   // // 这就是认证，本来是从数据库中取得数据，但是这里先模拟数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从数据库中获取数据</span></span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">userToken</span> <span class="operator">=</span> (UsernamePasswordToken) token;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.queryUserByName(userToken.getUsername());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span>  <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Subject</span> <span class="variable">currentSubject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> currentSubject.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;loginUser&quot;</span>,user);     <span class="comment">// 这里使用session存值，然后再index.html中判断loginUser是有值，如果有就说明有人登录，没有就是没人登录</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//认证密码，shiro帮我们做了，不用我们做，保证数据的安全性=,这里的user需要与上面的授权方法联动，getPrincipal</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(user,user.getPwd(),<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>下面的步骤2跟步骤3是死代码，第四个类也是死代码，需要跟Thymeleaf联动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> at.pollux.thymeleaf.shiro.dialect.ShiroDialect;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ShiroFilterFactoryBean   步骤3</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">shiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;securityManager&quot;)</span> DefaultWebSecurityManager defaultWebSecurityManager)</span>&#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        bean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *   anon    :   无需认证就可以访问</span></span><br><span class="line"><span class="comment">        *   authc   :   必须认证才可以访问</span></span><br><span class="line"><span class="comment">        *   user    ：   必须拥有记住我功能后才可以使用</span></span><br><span class="line"><span class="comment">        *   perms   ：   必须拥有对某个资源的权限才可以使用</span></span><br><span class="line"><span class="comment">        *   roles   ：   拥有某个角色权限才可以使用</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="comment">// 拦截</span></span><br><span class="line">        Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// filterMap.put(&quot;/user/add&quot;,&quot;anon&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// filterMap.put(&quot;/user/update&quot;,&quot;authc&quot;);</span></span><br><span class="line">        <span class="comment">// 正常情况下，未授权的页面会跳到授权的页面中</span></span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/add&quot;</span>,<span class="string">&quot;perms[user:add]&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/update&quot;</span>,<span class="string">&quot;perms[user:update]&quot;</span>);</span><br><span class="line"></span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/*&quot;</span>,<span class="string">&quot;authc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        bean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"></span><br><span class="line">        bean.setLoginUrl(<span class="string">&quot;/toLogin&quot;</span>);</span><br><span class="line"></span><br><span class="line">        bean.setUnauthorizedUrl(<span class="string">&quot;/unAuth&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// defaultWebSecurityManager    步骤2</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;securityManager&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">defaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;userRealm&quot;)</span> UserRealm userRealm)</span>&#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        securityManager.setRealm(userRealm);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Realm        步骤1，由下往上写，不走都是确定的，不用记，做好笔记就行，一般记不住</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;userRealm&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> UserRealm <span class="title function_">userRealm</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserRealm</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ShiroDialect,用来整合shiro跟Thymeleaf，死代码，需要跟Thymeleaf联动</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroDialect <span class="title function_">shiroDialect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShiroDialect</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="1-4、html中代码案例"><a href="#1-4、html中代码案例" class="headerlink" title="1.4、html中代码案例"></a>1.4、html中代码案例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:shiro</span>=<span class="string">&quot;http://www.pollix.at/thymeleaf/shiro&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;div th:if=&quot;session.loginUser==null&quot;&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:notAuthenticated</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span>  <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span> 登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:add&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/add&#125;&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:update&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/update&#125;&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
  </entry>
  <entry>
    <title>mybatis</title>
    <url>/2022/11/10/mybatis/</url>
    <content><![CDATA[<h1 id="常用的仓库和配置："><a href="#常用的仓库和配置：" class="headerlink" title="常用的仓库和配置："></a>常用的仓库和配置：</h1><p><a href="https://mybatis.net.cn/index.html">Mybatis官网</a></p>
<span id="more"></span>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- pom.xml 注意：在添加了此段代码后需要刷新maven，不然可能不生效</span></span><br><span class="line"><span class="comment">建议父子工程都添加</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  在build中配置resources，来防止我们资源导出失败的问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--按需求添加--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--按需求添加--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="1-1什么是Mybatis"><a href="#1-1什么是Mybatis" class="headerlink" title="1.1什么是Mybatis"></a>1.1什么是Mybatis</h2><ol>
<li>MyBatis 是一款优秀的持久层框架</li>
<li>它支持自定义 SQL、存储过程以及高级映射。</li>
<li>MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和 获取结果集的工作 </li>
<li>MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</li>
</ol>
<h2 id="1-2maven仓库"><a href="#1-2maven仓库" class="headerlink" title="1.2maven仓库"></a>1.2maven仓库</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="1-3持久化"><a href="#1-3持久化" class="headerlink" title="1.3持久化"></a>1.3持久化</h2><h3 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h3><ul>
<li><p>持久层：数据从持久状态与瞬时状态之间转化</p>
</li>
<li><p>内存：断电即失</p>
</li>
</ul>
<hr>
<p>  为什么：内存太贵</p>
<ul>
<li>类似：冷藏</li>
</ul>
<h3 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h3><p>Dao层，servlet层，service层 controller层</p>
<h2 id="1-4为什么学mybatis"><a href="#1-4为什么学mybatis" class="headerlink" title="1.4为什么学mybatis"></a>1.4为什么学mybatis</h2><ol>
<li>简单易学</li>
<li>灵活</li>
<li>sql与代码分离，提高维护性</li>
<li>提供映射标签，支持数据对象与orm字段映射</li>
<li>提供对象关系映射标签，支持对象关系组建维护</li>
<li>提供xml标签，至此编写动态的sql</li>
</ol>
<h1 id="1、第一个mybatis"><a href="#1、第一个mybatis" class="headerlink" title="1、第一个mybatis"></a>1、第一个mybatis</h1><h2 id="1-1、万能的map实例-可以用于模糊查询"><a href="#1-1、万能的map实例-可以用于模糊查询" class="headerlink" title="1.1、万能的map实例(可以用于模糊查询)"></a>1.1、万能的map实例(可以用于模糊查询)</h2><ul>
<li><h3 id="UserDao接口代码"><a href="#UserDao接口代码" class="headerlink" title="UserDao接口代码"></a>UserDao接口代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用map来修改用户消息</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(Map&lt;String,Object&gt; map)</span>;</span><br></pre></td></tr></table></figure>


</li>
<li><p>UserMapper.xml的sql语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    update mybatis.user set name =#&#123;username&#125;,pwd=#&#123;password&#125; where id=#&#123;userid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>测试代码</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUserTest</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">    <span class="type">UserDao</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserDao.class);</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,Object&gt;();</span><br><span class="line"></span><br><span class="line">    map.put(<span class="string">&quot;userid&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;122211212&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;笑笑&quot;</span>);</span><br><span class="line"></span><br><span class="line">    mapper.updateUser(map);</span><br><span class="line"></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="1-2、文件组成"><a href="#1-2、文件组成" class="headerlink" title="1.2、文件组成"></a>1.2、文件组成</h2><p><img src="/2022/11/10/mybatis/Users\LRH\AppData\Roaming\Typora\typora-user-images\1658581820310.png" alt="1658581820310"></p>
<h2 id="七大步骤，要熟练掌握，其中有很多是配置文件"><a href="#七大步骤，要熟练掌握，其中有很多是配置文件" class="headerlink" title="七大步骤，要熟练掌握，其中有很多是配置文件"></a>七大步骤，要熟练掌握，其中有很多是配置文件</h2><p><img src="/2022/11/10/mybatis/Users\LRH\AppData\Roaming\Typora\typora-user-images\1658581077669.png" alt="1658581077669"></p>
<h3 id="1-pom-xml，依赖和防止资源导出问题"><a href="#1-pom-xml，依赖和防止资源导出问题" class="headerlink" title="1.pom.xml，依赖和防止资源导出问题"></a>1.pom.xml，依赖和防止资源导出问题</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- pom.xml 注意：在添加了此段代码后需要刷新maven，不然可能不生效</span></span><br><span class="line"><span class="comment">建议父子工程都添加</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  在build中配置resources，来防止我们资源导出失败的问题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--按需求添加--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--按需求添加--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-mybatis-config-xml核心配置问价"><a href="#2-mybatis-config-xml核心配置问价" class="headerlink" title="2.mybatis-config.xml核心配置问价"></a>2.mybatis-config.xml核心配置问价</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--configuration核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--      这里前面的jdbc不能丢，第一次错误因为这个jdbc:mysql://localhost.....          --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="symbol">&amp;amp;</span>allowPublicKeyRetrieval=true&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;888888&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--   必不可少的过程，连接，很重要 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/kuaihua/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-MybatisUtils工具类，这个是不变的，用来使用mybatis最重要的一个类"><a href="#3-MybatisUtils工具类，这个是不变的，用来使用mybatis最重要的一个类" class="headerlink" title="3.MybatisUtils工具类，这个是不变的，用来使用mybatis最重要的一个类"></a>3.MybatisUtils工具类，这个是不变的，用来使用mybatis最重要的一个类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuaihua.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 第一步：使用Mybatis第一步，获取sqlSessionFactory对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二步：有了sqlSessionFactory对象，就得从sqlSessionFactory中获取sqlSession实例</span></span><br><span class="line">    <span class="comment">// SqlSession中包含了面向数据库执行SQL命令执行所需要的所有方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-User-java常见的实体类"><a href="#4-User-java常见的实体类" class="headerlink" title="4.User.java常见的实体类"></a>4.User.java常见的实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuaihua.pojo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, String name, String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPwd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPwd</span><span class="params">(String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-UserDao层，以后这里的Dao后缀就用Mapper代替，比如UserMapper"><a href="#5-UserDao层，以后这里的Dao后缀就用Mapper代替，比如UserMapper" class="headerlink" title="5.UserDao层，以后这里的Dao后缀就用Mapper代替，比如UserMapper"></a>5.UserDao层，以后这里的Dao后缀就用Mapper代替，比如UserMapper</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuaihua.dao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuaihua.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用UserMapper.xml文件代替了UserDaoImpl.java文件，这就是mybatis的最大不同</span></span><br><span class="line"><span class="comment">// 这里以后用UserMapper代替，UserDao文件变成UserMapper文件,</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6-UserMapper-xml，-Mapper后缀只是常用的方法，这是用来代替UserDaoImpl-java的xml文件"><a href="#6-UserMapper-xml，-Mapper后缀只是常用的方法，这是用来代替UserDaoImpl-java的xml文件" class="headerlink" title="6.UserMapper.xml，***Mapper后缀只是常用的方法，这是用来代替UserDaoImpl.java的xml文件"></a>6.UserMapper.xml，***Mapper后缀只是常用的方法，这是用来代替UserDaoImpl.java的xml文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuaihua.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里的id是com.kuaihua.dao.UserDao类下的getUserList方法，resultType是返回值类型，必须写成实体类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.kuaihua.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-UserDaoTest-java这是一个测试方法，用来验证一下是否可以正常运行"><a href="#7-UserDaoTest-java这是一个测试方法，用来验证一下是否可以正常运行" class="headerlink" title="7.UserDaoTest.java这是一个测试方法，用来验证一下是否可以正常运行"></a>7.UserDaoTest.java这是一个测试方法，用来验证一下是否可以正常运行</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Test</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一步获取sqlSession对象</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> sqlSession.getMapper(UserDao.class);</span><br><span class="line">        List&lt;User&gt; userList = userDao.getUserList();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(User user : userList)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2、CRUD"><a href="#2、CRUD" class="headerlink" title="2、CRUD"></a>2、CRUD</h2><ol>
<li>namespace 	***maper.xml文件中里面的内容必须绑定的是<mapper namespace="com.kuaihua.dao.UserDao">里面内容必须是接口名字</mapper></li>
</ol>
<h3 id="一、查询不需要提交事务"><a href="#一、查询不需要提交事务" class="headerlink" title="一、查询不需要提交事务"></a>一、查询不需要提交事务</h3><h4 id="1-增加接口方法"><a href="#1-增加接口方法" class="headerlink" title="1.增加接口方法"></a>1.增加接口方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="comment">// 查询所有用户</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 根据id查询用户</span></span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="2-增加对应的xml中的sql方法，id对应方法名"><a href="#2-增加对应的xml中的sql方法，id对应方法名" class="headerlink" title="2.增加对应的xml中的sql方法，id对应方法名"></a>2.增加对应的xml中的sql方法，id对应方法名</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuaihua.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.kuaihua.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.kuaihua.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from mybatis.user where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="3-测试方法"><a href="#3-测试方法" class="headerlink" title="3.测试方法"></a>3.测试方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserListTest</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一步获取sqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> sqlSession.getMapper(UserDao.class);</span><br><span class="line">    List&lt;User&gt; userList = userDao.getUserList();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(User user : userList)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserByIdTest</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> sqlSession.getMapper(UserDao.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="二、增删改的测试文件中需要提交事务，sqlSession-commit"><a href="#二、增删改的测试文件中需要提交事务，sqlSession-commit" class="headerlink" title="二、增删改的测试文件中需要提交事务，sqlSession.commit()"></a>二、增删改的测试文件中需要提交事务，sqlSession.commit()</h3><h4 id="1-增加接口方法-1"><a href="#1-增加接口方法-1" class="headerlink" title="1.增加接口方法"></a>1.增加接口方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加一个用户</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">addUser</span><span class="params">(User user)</span>;</span><br><span class="line"><span class="comment">// 根据id删除一个用户</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteUserById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"><span class="comment">// 根据id修改用户</span></span><br><span class="line">t <span class="title function_">updateUserById</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-增加对应的xml中的sql方法，id对应方法名-1"><a href="#2-增加对应的xml中的sql方法，id对应方法名-1" class="headerlink" title="2.增加对应的xml中的sql方法，id对应方法名"></a>2.增加对应的xml中的sql方法，id对应方法名</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.kuaihua.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    insert into mybatis.user(id, name, pwd) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    delete from mybatis.user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.kuaihua.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    update mybatis.user set name =#&#123;name&#125;,pwd=#&#123;pwd&#125; where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-测试方法-1"><a href="#3-测试方法-1" class="headerlink" title="3.测试方法"></a>3.测试方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增删改都需要提交事务，很重要</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUserTest</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> sqlSession.getMapper(UserDao.class);</span><br><span class="line">        <span class="type">int</span> <span class="variable">user</span> <span class="operator">=</span> userDao.addUser(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">4</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;2165124&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 增删改都需要提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUserByIdTest</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> sqlSession.getMapper(UserDao.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userDao.deleteUserById(<span class="number">4</span>);</span><br><span class="line">        <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;删除了一个用户&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUserByIdTest</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> sqlSession.getMapper(UserDao.class);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> userDao.updateUserById(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;哈哈&quot;</span>, <span class="string">&quot;1234658888&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span> (num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;修改了一个用户资料&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="三、模糊查询"><a href="#三、模糊查询" class="headerlink" title="三、模糊查询"></a>三、模糊查询</h3><h4 id="1-在java执行代码的时候，传递通配符查询"><a href="#1-在java执行代码的时候，传递通配符查询" class="headerlink" title="1.在java执行代码的时候，传递通配符查询% %"></a>1.在java执行代码的时候，传递通配符查询% %</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; userList = mapper.getUserLike(<span class="string">&quot;%李%&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="2-在sql拼接中使用通配符"><a href="#2-在sql拼接中使用通配符" class="headerlink" title="2.在sql拼接中使用通配符"></a>2.在sql拼接中使用通配符</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">select * from user where name like &quot;%&quot; #&#123;value&#125; &quot;%&quot;</span><br></pre></td></tr></table></figure>



<h2 id="3、配置解析，核心配置文件（mybatis-config-xml）"><a href="#3、配置解析，核心配置文件（mybatis-config-xml）" class="headerlink" title="3、配置解析，核心配置文件（mybatis-config.xml）"></a>3、配置解析，核心配置文件（mybatis-config.xml）</h2><p> <strong>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。      配置文档的顶层结构如下：</strong> </p>
<!--configuration核心配置文件-->

<p>&#x3D;&#x3D;这里的顺序安排好的,打乱会报错&#x3D;&#x3D;</p>
<configuration>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">properties（属性）</span><br><span class="line">settings（设置）</span><br><span class="line">typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">environments（环境配置）</span><br><span class="line">    environment（环境变量）</span><br><span class="line">        transactionManager（事务管理器）</span><br><span class="line">        dataSource（数据源）</span><br><span class="line">databaseIdProvider（数据库厂商标识）</span><br><span class="line">mappers（映射器）</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="1、environments（环境配置）"><a href="#1、environments（环境配置）" class="headerlink" title="1、environments（环境配置）"></a>1、environments（环境配置）</h4><pre><code> **尽管可以配置多个环境，但每个 SqlSessionFactory  实例只能选择一种环境。** 
</code></pre>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="symbol">&amp;amp;</span>allowPublicKeyRetrieval=true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;888888&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC/Manged（两种）&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;...&quot;</span> <span class="attr">value</span>=<span class="string">&quot;...&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED(有三种)&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2、属性（properties）"><a href="#2、属性（properties）" class="headerlink" title="2、属性（properties）"></a>2、属性（properties）</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span> = <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span> = <span class="string">jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line"><span class="attr">username</span> = <span class="string">root</span></span><br><span class="line"><span class="attr">password</span> = <span class="string">888888</span></span><br></pre></td></tr></table></figure>

<h4 id="3、typeAliases（类型别名）"><a href="#3、typeAliases（类型别名）" class="headerlink" title="3、typeAliases（类型别名）"></a>3、typeAliases（类型别名）</h4><ul>
<li>类型别名可为 Java 类型设置一个缩写名字 </li>
<li>仅用于 XML 配置，意在降低冗余的全限定类名书写</li>
</ul>
<h5 id="3-1给实体类起别名（实体类比较少的时候）"><a href="#3-1给实体类起别名（实体类比较少的时候）" class="headerlink" title="3.1给实体类起别名（实体类比较少的时候）"></a>3.1给实体类起别名（实体类比较少的时候）</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.kuaihua.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在User Mapper.xml中的resultType可以这样设置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="3-2给实体包起别名（实体类比较多的时候）"><a href="#3-2给实体包起别名（实体类比较多的时候）" class="headerlink" title="3.2给实体包起别名（实体类比较多的时候）"></a>3.2给实体包起别名（实体类比较多的时候）</h5><p>默认的别名就是实体包下的文件名首字母小写，比如这里就是user&#x2F;User</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.kuaihua.pojo&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-3实体类注解"><a href="#3-3实体类注解" class="headerlink" title="3.3实体类注解"></a>3.3实体类注解</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4、映射器（mappers）又四种，常用的只有三种，但是第一种最常用，url不使用"><a href="#4、映射器（mappers）又四种，常用的只有三种，但是第一种最常用，url不使用" class="headerlink" title="4、映射器（mappers）又四种，常用的只有三种，但是第一种最常用，url不使用"></a>4、映射器（mappers）又四种，常用的只有三种，但是第一种最常用，url不使用</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.BlogMapper&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.PostMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.mybatis.builder&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///var/mappers/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///var/mappers/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///var/mappers/PostMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用第二种跟第三种方法注意</p>
<ul>
<li>接口与它的Mapper配置文件必须同名</li>
<li>接口与它的Mapper配置文件必须在同一个包下</li>
</ul>
<h2 id="4、解决属性名与字段名不一致问题"><a href="#4、解决属性名与字段名不一致问题" class="headerlink" title="4、解决属性名与字段名不一致问题"></a>4、解决属性名与字段名不一致问题</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试出现的问题</p>
<p>比如在实体类中User的password字段在数据库对应为pwd,就需要一如结果集映射</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--    column表示数据库的字段名，property表示实体类属性    --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span>     <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span>    select * from mybatis.user<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>出现原因，数据库的字段名与属性名不一致</p>
<table>
<thead>
<tr>
<th>数据库</th>
<th>实体类</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>id</td>
</tr>
<tr>
<td>name</td>
<td>name</td>
</tr>
<tr>
<td>pwd</td>
<td>password</td>
</tr>
</tbody></table>
<p>解决办法</p>
<h3 id="4-1-起别名"><a href="#4-1-起别名" class="headerlink" title="4.1.起别名"></a>4.1.起别名</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span>    select id,name,pwd as password from mybatis.user<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2-结果集映射-resultMap"><a href="#4-2-结果集映射-resultMap" class="headerlink" title="4.2.结果集映射(resultMap)"></a>4.2.结果集映射(resultMap)</h3><pre><code>后面加了一个resultMap=&quot;UserMap&quot;属性
</code></pre>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    column表示数据库的字段名，property表示实体类属性    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>  <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select *from mybatis.user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>ResultMap是Mybatis里面最强大的元素	</p>
<h2 id="5、日志"><a href="#5、日志" class="headerlink" title="5、日志"></a>5、日志</h2><h3 id="5-1日志工厂"><a href="#5-1日志工厂" class="headerlink" title="5.1日志工厂"></a>5.1日志工厂</h3><pre><code>    曾今：sout，debug

    现在：日志

![1658754024427](C:\Users\LRH\AppData\Roaming\Typora\typora-user-images\1658754024427.png)
</code></pre>
<p>需要掌握的如今只有两个</p>
<h4 id="1-LOG4J（需要导包）"><a href="#1-LOG4J（需要导包）" class="headerlink" title="1. LOG4J（需要导包）"></a>1. LOG4J（需要导包）</h4><ul>
<li><pre><code>什么是log4j
</code></pre>
<p> Log4j是<a href="https://baike.baidu.com/item/Apache/8512995">Apache</a>的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是<a href="https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%8F%B0/2438626">控制台</a>、文件、<a href="https://baike.baidu.com/item/GUI">GUI</a>组件 </p>
<p> 我们也可以控制每一条日志的输出格式 </p>
<p> 通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程 </p>
<p> 可以通过一个<a href="https://baike.baidu.com/item/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/286550">配置文件</a>来灵活地进行配置，而不需要修改应用的代码 </p>
</li>
<li><p>导包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>新建一个log4j.peoperties配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span></span><br><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="attr">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="attr">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="attr">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.file.File</span>=<span class="string">./log/logFile.log</span></span><br><span class="line"><span class="attr">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="attr">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="attr">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><img src="/2022/11/10/mybatis/Users\LRH\AppData\Roaming\Typora\typora-user-images\1658756214957.png" alt="1658756214957"></p>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> Logger.getLogger(UserMapperTest.class);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log4JTest</span><span class="params">()</span>&#123;</span><br><span class="line">    logger.info(<span class="string">&quot;info:进入log4JTest方法&quot;</span>);</span><br><span class="line">    logger.debug(<span class="string">&quot;debug:进入log4JTest方法&quot;</span>);</span><br><span class="line">    logger.error(<span class="string">&quot;error:进入log4JTest方法&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;Log4j的三种级别&#x3D;&#x3D;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.info(<span class="string">&quot;info:进入log4JTest方法&quot;</span>);</span><br><span class="line">logger.debug(<span class="string">&quot;debug:进入log4JTest方法&quot;</span>);</span><br><span class="line">logger.error(<span class="string">&quot;error:进入log4JTest方法&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-STDOUT-LOGGING-标准的日志工厂，不需要导包"><a href="#2-STDOUT-LOGGING-标准的日志工厂，不需要导包" class="headerlink" title="2.STDOUT_LOGGING(标准的日志工厂，不需要导包)"></a>2.STDOUT_LOGGING(标准的日志工厂，不需要导包)</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--    标准格式情况下，STDOUT_LOGGING不用导包，不能错任何一个字，尽量到官网复制，不要手写    --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/11/10/mybatis/Users\LRH\AppData\Roaming\Typora\typora-user-images\1658754563639.png" alt="1658754563639"></p>
<h2 id="6、分页"><a href="#6、分页" class="headerlink" title="6、分页"></a>6、分页</h2><h3 id="6-1使用limit完成分页"><a href="#6-1使用limit完成分页" class="headerlink" title="6.1使用limit完成分页"></a>6.1使用limit完成分页</h3><ul>
<li><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分页</span></span><br><span class="line">   List&lt;User&gt; <span class="title function_">getUserByLimit</span><span class="params">(Map&lt;String,Integer&gt; map)</span>;</span><br></pre></td></tr></table></figure>


</li>
<li><p>Mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLimit&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserByLimitTest</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;startIndex&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    map.put(<span class="string">&quot;pageSize&quot;</span>,<span class="number">2</span>);</span><br><span class="line">    List&lt;User&gt; userList = mapper.getUserByLimit(map);</span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-2-通过RowBounds实现"><a href="#6-2-通过RowBounds实现" class="headerlink" title="6.2 通过RowBounds实现"></a>6.2 通过RowBounds实现</h3><ul>
<li><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分页2，RowBounds实现</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserByRowBounds</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>


</li>
<li><p>Mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByRowBounds&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">        select *from mybatis.user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserByRowBoundsTest</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">    <span class="type">RowBounds</span> <span class="variable">rowBounds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RowBounds</span>(<span class="number">1</span>,<span class="number">2</span>);	<span class="comment">// 从1个下标开始,每页显示2个</span></span><br><span class="line">    List&lt;User&gt; userList = sqlSession.selectList(<span class="string">&quot;com.kuaihua.dao.UserMapper.getUserByRowBounds&quot;</span>, <span class="literal">null</span>, rowBounds);</span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-3-分页插件（mybatis-pageHelper-了解即可，此处会有详细的使用方式"><a href="#6-3-分页插件（mybatis-pageHelper-了解即可，此处会有详细的使用方式" class="headerlink" title="6.3 分页插件（mybatis pageHelper)了解即可，此处会有详细的使用方式"></a>6.3 分页插件（mybatis pageHelper)了解即可，此处会有详细的使用方式</h3><p><a href="https://pagehelper.github.io/">pageHelper</a></p>
<p><a href="https://pagehelper.github.io/docs/howtouse/">如何使用pageHepler</a></p>
<p><img src="/2022/11/10/mybatis/image-20221110115744975.png" alt="image-20221110115744975"></p>
<h2 id="7、使用注解开发"><a href="#7、使用注解开发" class="headerlink" title="7、	使用注解开发"></a>7、	使用注解开发</h2><h3 id="7-1面向接口编程"><a href="#7-1面向接口编程" class="headerlink" title="7.1面向接口编程"></a>7.1面向接口编程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.kuaihua.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用UserMapper.xml文件代替了UserDaoImpl.java文件，这就是mybatis的最大不同</span></span><br><span class="line"><span class="comment">// 这里以后用UserMapper代替，UserDao文件变成UserMapper文件,</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 查询所有用户</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据id查询数据</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id=#&#123;uid&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;uid&quot;)</span> <span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加一个用户</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user (id,name,pwd) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">addUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-2使用注解开发"><a href="#7-2使用注解开发" class="headerlink" title="7.2使用注解开发"></a>7.2使用注解开发</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据id查询数据</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from user where id=#&#123;uid&#125;&quot;)</span></span><br><span class="line">User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;uid&quot;)</span> <span class="type">int</span> id)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="7-3CRUD（自动提交事务）"><a href="#7-3CRUD（自动提交事务）" class="headerlink" title="7.3CRUD（自动提交事务）"></a>7.3CRUD（自动提交事务）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 这里设置的是事务自动提交增删改</span></span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>自动提交事务</p>
</li>
<li><p>绑定接口，在mybatis-config.xml中注册（两种方式）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/kuaihua/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--   必不可少的过程，绑定接口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.kuaihua.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
</li>
</ul>
<p><em><strong>关于使用注解开发</strong></em></p>
<ul>
<li><pre><code>基本类型或者String类型，需要加上
</code></pre>
</li>
<li>引用类型不需要加上比如（User user)</li>
<li>如果只有一个基本类型，可以忽略，但是建议加上主机@param（””）</li>
<li>在SQL的引用的就是注解的@param（”demo”）中的demo</li>
</ul>
<p>#{}   ${} 两个的区别是前者是预编译，所以尽量用#{}</p>
<h2 id="8、LomBok"><a href="#8、LomBok" class="headerlink" title="8、LomBok"></a>8、LomBok</h2><ul>
<li><p>下载lombok插件</p>
</li>
<li><p>导入lombok</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>注解使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuaihua.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span>	<span class="comment">// set get，tostring...</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>	<span class="comment">// 有参</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>	<span class="comment">// 无参</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">下面这些就是可以在lombok中使用的注解，一般常用下面三个</span><br><span class="line">   <span class="meta">@Data</span>	<span class="comment">// set get，tostring...</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>	<span class="comment">// 有参</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>	<span class="comment">// 无参</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="meta">@Getter</span> and <span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@FieldNameConstants</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>, <span class="meta">@RequiredArgsConstructor</span> and <span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Log</span>, <span class="meta">@Log4j</span>, <span class="meta">@Log4j2</span>, <span class="meta">@Slf4j</span>, <span class="meta">@XSlf4j</span>, <span class="meta">@CommonsLog</span>, <span class="meta">@JBossLog</span>, <span class="meta">@Flogger</span>, <span class="meta">@CustomLog</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@SuperBuilder</span></span><br><span class="line"><span class="meta">@Singular</span></span><br><span class="line"><span class="meta">@Delegate</span></span><br><span class="line"><span class="meta">@Value</span></span><br><span class="line"><span class="meta">@Accessors</span></span><br><span class="line"><span class="meta">@Wither</span></span><br><span class="line"><span class="meta">@With</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="meta">@val</span></span><br><span class="line"><span class="meta">@var</span></span><br><span class="line">experimental <span class="meta">@var</span></span><br><span class="line"><span class="meta">@UtilityClass</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="9、多对一的处理mybatis-06"><a href="#9、多对一的处理mybatis-06" class="headerlink" title="9、多对一的处理mybatis-06"></a>9、多对一的处理mybatis-06</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 学生需要关联一个老师</span></span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="9-1子查询方式"><a href="#9-1子查询方式" class="headerlink" title="9.1子查询方式"></a>9.1子查询方式</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    =======================第一种方法:子查询======================--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    1.获取学生的全部信息</span></span><br><span class="line"><span class="comment">    2.通过学生表的&quot;tid&quot;，寻找对应的老师</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class="line">        select * from student;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            property:实体类字段名</span></span><br><span class="line"><span class="comment">            column：数据库字段名</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            association：对象</span></span><br><span class="line"><span class="comment">            collection:集合</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    复杂的属性单独处理</span></span><br><span class="line"><span class="comment">                association：对象</span></span><br><span class="line"><span class="comment">                collection:集合</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">        select * from teacher where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="9-2连表查询方式【简单多用】"><a href="#9-2连表查询方式【简单多用】" class="headerlink" title="9.2连表查询方式【简单多用】"></a>9.2连表查询方式【简单多用】</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    =======================第二种方法：连表查询======================--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeachers&quot;</span>&gt;</span></span><br><span class="line">    select s.id sid, s.name sname,s.tid as stid, t.name tname</span><br><span class="line">    from student s ,teacher t</span><br><span class="line">    where s.tid = t.id;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeachers&quot;</span> <span class="attr">type</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;stid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="10、一对多的处理mybatis-07"><a href="#10、一对多的处理mybatis-07" class="headerlink" title="10、一对多的处理mybatis-07"></a>10、一对多的处理mybatis-07</h2><ul>
<li>连表查询处理</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    方式二连表查询，个人刚觉比较简单--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class="line">    select s.id sid,s.name sname, t.name tname,t.id tid</span><br><span class="line">    from student s,teacher t</span><br><span class="line">    where s.tid = t.id and t.id = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--      复杂的对象处理 ，</span></span><br><span class="line"><span class="comment">                    对象用association ,与javaType搭配使用</span></span><br><span class="line"><span class="comment">                    集合用collection  ，与ofType搭配使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>子查询处理</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent2&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.teacher where id = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    select *from mybatis.student where tid=#&#123;tid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>1、对象association：对象用association（多对一）</p>
<p>2、集合collection：集合用collection（一对多）</p>
<p>3、javaType&amp;ofType</p>
<pre><code>    javaType :映射实体类中的属性类型

    ofType：指定映射到List或者集合中的pojo类型，泛型中的约束类型
</code></pre>
<h2 id="11、动态SQL"><a href="#11、动态SQL" class="headerlink" title="11、动态SQL"></a>11、动态SQL</h2><p>&#x3D;&#x3D;个人终结&#x3D;&#x3D;:动态sql就是要我们在写slq语句的时候,按照所有条件都满足的一条语句来写就行,只需要把其中的关键字换成对应的标签就行,向逗号之类的符号也不用自己去掉,他会手动帮我们去掉.</p>
<p>所谓的动态SQL就是在sql层面去执行一个逻辑代码.</p>
<p>所谓的逻辑代码无非就是if,where,when,之类的</p>
<p><img src="/2022/11/10/mybatis/image-20221110121143910.png" alt="image-20221110121143910"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span></span><br><span class="line">choose (when, otherwise)</span><br><span class="line">trim (<span class="built_in">where</span>, <span class="built_in">set</span>)</span><br><span class="line">foreach</span><br></pre></td></tr></table></figure>

<p>1.环境搭建</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `blog`(</span><br><span class="line">`id` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客id&#x27;</span>,</span><br><span class="line">`title` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客标题&#x27;</span>,</span><br><span class="line">`author` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客作者&#x27;</span>,</span><br><span class="line">`create_time` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`views` <span class="type">INT</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;浏览量&#x27;</span></span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>

<p>2.导包</p>
<ol start="3">
<li>编写配置文件<br>4.编写实体类<br>5.编写实体类对应的Mapper接口和Mapper.xml文件</li>
</ol>
<h3 id="If-eg"><a href="#If-eg" class="headerlink" title="If(eg)"></a>If(eg)</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">	select * from user where 1=1		# 可以搭配map传参,给map传递一个user的参数,这样就可以实现了</span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;user != null&quot;</span>&gt;</span></span><br><span class="line">	and user=#&#123;user&#125;					# and不能省略,后面还可以接续拼接if,同理and也不能省略</span><br><span class="line">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose (when, otherwise)"></a>choose (when, otherwise)</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    select * from user where 1=1	# 可以搭配map传参,给map传递一个user的参数,这样就可以实现了</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span> = <span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">                title = #&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span> = <span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">                title = #&#123;author&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span> = <span class="string">&quot;view != null&quot;</span>&gt;</span></span><br><span class="line">                title = #&#123;view&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span>						# 在这三个选择中,只有一个会被选中</span><br><span class="line">    	<span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="trim-where-set"><a href="#trim-where-set" class="headerlink" title="trim (where, set)"></a>trim (where, set)</h3><p>where标签可以帮我们判断第一个条件是否成立或者存在,如果存在或者成立,就照旧执行,如果不成立,就会把后续语句中的第一个and&#x2F;or删去作为第一个条件,依次拼接后续的条件语句,&#x3D;&#x3D;where的总体作用就是判断第一个词是否是and或者or之类的,如果是就去掉.</p>
<p><img src="/2022/11/10/mybatis/image-20221110124850071.png" alt="image-20221110124850071"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span>&gt;</span></span><br><span class="line">	update user</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;user != null&quot;</span>&gt;</span></span><br><span class="line">		and user=#&#123;user&#125;,				# 这里的逗号在拼接的时候会自动去掉,</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;user != null&quot;</span>&gt;</span></span><br><span class="line">		and user=#&#123;user&#125;					# and不能省略,后面还可以接续拼接if,同理and也不能省略</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id =#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span>		</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p><img src="/2022/11/10/mybatis/image-20221110193157159.png" alt="image-20221110193157159"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">select * from user where 1=1 and(id=1 or id=2 or id=3) 此类就用foreach来完成</span><br></pre></td></tr></table></figure>



<h3 id="Sql片段"><a href="#Sql片段" class="headerlink" title="Sql片段"></a>Sql片段</h3><p>把sql中公共的部分抽取出来,让代码形成复用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;if-user-author&quot;</span>&gt;</span>		# 命名方式怎么好用怎么来</span><br><span class="line">     <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;user != null&quot;</span>&gt;</span></span><br><span class="line">		and user=#&#123;user&#125;,				# 这里的逗号在拼接的时候会自动去掉,</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">		and user=#&#123;user&#125;					# and不能省略,后面还可以接续拼接if,同理and也不能省略</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">included</span> <span class="attr">refid</span>=<span class="string">&quot;if-user-author&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">included</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;注意事项&#x3D;&#x3D;:</p>
<ol>
<li><p>最好基于单表来定义sql片段</p>
</li>
<li><p>不要存在<where>标签</where></p>
</li>
</ol>
<h2 id="12、缓存"><a href="#12、缓存" class="headerlink" title="12、缓存"></a>12、缓存</h2><ul>
<li><pre><code> MyBatis 内置了一个强大的事务性查询缓存机制，它可以非常方便地配置和定制 
</code></pre>
</li>
<li><p>默认情况下，只启用了本地的会话缓存（一级缓存），它仅仅对一个会话中的数据进行缓存</p>
</li>
</ul>
<h3 id="12-1、什么是缓存："><a href="#12-1、什么是缓存：" class="headerlink" title="12.1、什么是缓存："></a>12.1、什么是缓存：</h3><p>大致关系图</p>
<img src="/2022/11/10/mybatis/Users\LRH\AppData\Roaming\Typora\typora-user-images\1659099612215.png" alt="1659099612215" style="zoom: 150%;">

<h3 id="12-2、一级缓存-默认情况下是开启的"><a href="#12-2、一级缓存-默认情况下是开启的" class="headerlink" title="12.2、一级缓存(默认情况下是开启的)"></a>12.2、一级缓存(默认情况下是开启的)</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--      在设置中开启缓存     --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="12-3、二级缓存-从一级缓存上接收过来"><a href="#12-3、二级缓存-从一级缓存上接收过来" class="headerlink" title="12.3、二级缓存(从一级缓存上接收过来)"></a>12.3、二级缓存(从一级缓存上接收过来)</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>也可以自定义一些二级缓存属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">  <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">size</span>=<span class="string">&quot;512&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置解析</p>
<ul>
<li><p>这个更高级的配置创建了一个 FIFO 缓存</p>
</li>
<li><p>每隔 60 秒刷新</p>
</li>
<li><p>最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。 </p>
<pre><code>      `LRU` – 最近最少使用：移除最长时间不被使用的对象。          
      
      FIFO– 先进先出：按对象进入缓存的顺序来移除它们。          
      
      `SOFT` – 软引用：基于垃圾回收器状态和软引用规则移除对象。          
      
      `WEAK` – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。
</code></pre>
</li>
</ul>
<h3 id="12-4、小结"><a href="#12-4、小结" class="headerlink" title="12.4、小结"></a>12.4、小结</h3><ol>
<li><pre><code>只要开启了二级缓存，只要在同一个mapper下都有效
</code></pre>
</li>
<li>所有的数据都会先放在一级缓存</li>
<li>只有在会话提交或者关闭的时候才会从一级缓存提交到二级缓存</li>
</ol>
<p>					</p>
</configuration>]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
  </entry>
  <entry>
    <title>springCloud学习</title>
    <url>/2022/11/09/springCloud%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="springcloud笔记"><a href="#springcloud笔记" class="headerlink" title="springcloud笔记"></a>springcloud笔记</h1><h2 id="1-Eureka-尤里卡"><a href="#1-Eureka-尤里卡" class="headerlink" title="1.Eureka(尤里卡)"></a>1.Eureka(尤里卡)</h2><h3 id="1-1-pom-xml-依赖"><a href="#1-1-pom-xml-依赖" class="headerlink" title="1.1 pom.xml(依赖)"></a>1.1 pom.xml(依赖)</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="1-2application-yml"><a href="#1-2application-yml" class="headerlink" title="1.2application.yml"></a>1.2application.yml</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment"># Eureka服务端的实例名称</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 表示是否想Eureka服务中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment"># 如果为false ,表示自己就是注册中心,但是一般都是true,Eureka的作用是维护,不是注册</span></span><br><span class="line">    <span class="attr">service-url:</span>  <span class="comment"># 监控页面</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">https://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-使用Eureka-访问https-localhost-7701-eureka-就可以访问到Eureka的配置页面"><a href="#1-3-使用Eureka-访问https-localhost-7701-eureka-就可以访问到Eureka的配置页面" class="headerlink" title="1.3 使用Eureka,访问https://localhost:7701/eureka 就可以访问到Eureka的配置页面"></a>1.3 使用Eureka,访问<a href="https://localhost:7701/eureka">https://localhost:7701/eureka</a> 就可以访问到Eureka的配置页面</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuaihua.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span>         <span class="comment">// 一般都是开启功能就好,大部分代码都是写好的,这就是服务的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaServer_7001</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaServer_7001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuaihua.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手写springboot的启动类</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span>     <span class="comment">// 自动在服务启动后自动注册到Eureka中,这是客户端,开启后就可以自动显示在服务端</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span>      <span class="comment">// 开启获取服务信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptProvider_8001</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DeptProvider_8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>服务注册与发现</p>
<p>集群的配置与实现</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment"># Eureka服务端的实例名称,这个得去改host文件</span></span><br><span class="line">    <span class="attr">instance-id:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 表示是否想Eureka服务中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment"># 如果为false ,表示自己就是注册中心,但是一般都是true,Eureka的作用是维护,不是注册</span></span><br><span class="line">    <span class="attr">service-url:</span>  <span class="comment"># 监控页面</span></span><br><span class="line"><span class="comment">#      defaultZone: https://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/ # 这里可以添加多个地址,这样就可以搭建集群了,但是因为要改host地址就不做演示</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7002/eureka/,http://localhost:7003/eureka</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="comment"># mybatis配置</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.kuaihua.springcloud.pojo</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  spring配置包括数据源</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-provider-dept-8001</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db01?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">888888</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    服务会被注册在哪里</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka/,http://localhost:7002/eureka/,http://localhost:7003/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">springcloud-provider-dept8001</span> <span class="comment"># 修改默认的描述信息</span></span><br><span class="line"></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">app.name:</span> <span class="string">kuaihua</span></span><br><span class="line">  <span class="attr">company.name:</span> <span class="string">www.baidu.com</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>CAP原则与Zookeeper的区别</p>
<h2 id="2-Ribbon"><a href="#2-Ribbon" class="headerlink" title="2. Ribbon"></a>2. Ribbon</h2><h3 id="2-1负载均衡"><a href="#2-1负载均衡" class="headerlink" title="2.1负载均衡"></a>2.1负载均衡</h3><p><img src="/2022/11/09/springCloud%E5%AD%A6%E4%B9%A0/image-20220916200515997.png" alt="image-20220916200515997"></p>
<p>个人理解:所谓的负载均衡就是客户端从已经想Eureka注册的服务端中选取其中合适的服务提供者给客户端的一种过程,为了防止服务器的雪崩,一般设置多个服务器,形成分布式集群,这样就会在即使一个服务器崩了的情况下,客户仍然可以得到自己想要的结果.</p>
<h3 id="2-2-与Feign的区-面向接口"><a href="#2-2-与Feign的区-面向接口" class="headerlink" title="2.2 与Feign的区(面向接口)"></a>2.2 与Feign的区(面向接口)</h3><p>Ribbon 面向微服务名字编程</p>
<p>Feign 面向接口编程</p>
<h2 id="3-Hystrix-熔断-降级"><a href="#3-Hystrix-熔断-降级" class="headerlink" title="3.Hystrix(熔断,降级)"></a>3.Hystrix(熔断,降级)</h2><p><img src="/2022/11/09/springCloud%E5%AD%A6%E4%B9%A0/image-20220918103806023.png" alt="image-20220918103806023"><br>熔断:服务器    		某个服务器异常,引起熔断 ,引起熔断,保险丝</p>
<p>服务降级		客户端,从整体网站请求负载考虑 	当某个服务熔断或者关闭后,服务将不再被调用</p>
<pre><code>                    此时客户端仍然可以准备一个FallbackFactory,返回一个默认值,整体的服务水平下降了,但是好歹可以用,比直接404强.
</code></pre>
<p>Dashboard流监控</p>
<h2 id="4-zuul-路由网关"><a href="#4-zuul-路由网关" class="headerlink" title="4.zuul(路由网关)"></a>4.zuul(路由网关)</h2><p>目前理解:可以隐藏自己的真实访问地址,可以更改服务链接的前缀</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuaihua.springcloud;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span>    <span class="comment">// 一般都用代理EnableZuulProxy,不用服务EnableZuulServer,只需要开启就行,代码一般都是编写好的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZuulApplication9527</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ZuulApplication9527.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-zuul</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">zuul9527.com</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">app.name:</span> <span class="string">KUAIHUA</span></span><br><span class="line">  <span class="attr">company.name:</span> <span class="string">hh.comp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  zuul的作用,隐藏真实的服务器名字springcloud-provider-dept-8001 可以用mydept来替换</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">myDept.serviceId:</span> <span class="string">springcloud-provider-dept-8001</span></span><br><span class="line">    <span class="attr">myDept.path:</span> <span class="string">/mydept/**</span></span><br><span class="line">  <span class="attr">ignored-services:</span> <span class="string">springcloud-provider-dept-8001</span>  <span class="comment"># 表示忽略这个地址的访问要求,只能使用mydept/**去访问,这样就可以隐藏微服务的真实地址了</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">/kuaihua</span>  <span class="comment"># 配置公共的访问前缀,localhost:8080/kuaihua/dept/**才可以访问,不然不能访问,一般真实的访问就需要,实验环境不需要</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure>



<h2 id="5-Config"><a href="#5-Config" class="headerlink" title="5.Config"></a>5.Config</h2><p>&#x3D;&#x3D;为所有环节提供一个中心化配饰&#x3D;&#x3D;</p>
<h3 id="5-1-远程链接git-yml配置"><a href="#5-1-远程链接git-yml配置" class="headerlink" title="5.1 远程链接git ,yml配置"></a>5.1 远程链接git ,yml配置</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3344</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-config-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/kuaihua/springcloud-config.git</span>     <span class="comment"># 这个是https链接，不是git链接</span></span><br></pre></td></tr></table></figure>

<p>客户端远程调用远端服务器</p>
<img src="/2022/11/09/springCloud%E5%AD%A6%E4%B9%A0/image-20220920195044861.png" alt="image-20220920195044861">

<p>远程配置与实现</p>
<h2 id="6-rest学习环境搭建-关键字-RestTemplate"><a href="#6-rest学习环境搭建-关键字-RestTemplate" class="headerlink" title="6.rest学习环境搭建(关键字:RestTemplate)"></a>6.rest学习环境搭建(关键字:RestTemplate)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuaihua.springcloud.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuaihua.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuaihua.springcloud.pojo.Dept;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptConsumerController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;      <span class="comment">// 这就是一个提供多种远程访问http的方法,简单的Restful服务模板</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从远端拿到数据,一般前缀都是通用的,直接设置差一个常量</span></span><br><span class="line">    <span class="comment">// 一般的形式都是这样的restTemplate.getForObject(url,实体类:Map(传输对象),response.class(返回的数据))</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REST_URL_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8001&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Dept <span class="title function_">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Long id)</span>&#123;</span><br><span class="line">        <span class="comment">// 通过拼接的方式形成url,getForObject(url(从哪个远端url拿到想要的数据),响应对象(返回对象);</span></span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX+<span class="string">&quot;/dept/get/&quot;</span>+id,Dept.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(Dept dept)</span>&#123;</span><br><span class="line">        <span class="comment">// 通过拼接的方式形成url,getForObject(url(从哪个远端url拿到想要的数据),响应对象(返回对象);</span></span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(REST_URL_PREFIX+<span class="string">&quot;/dept/add&quot;</span>,dept,Boolean.class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Dept&gt; <span class="title function_">queryAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 通过拼接的方式形成url,getForObject(url(从哪个远端url拿到想要的数据),响应对象(返回对象);</span></span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX+<span class="string">&quot;/dept/list&quot;</span>,List.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>springcloud</category>
      </categories>
  </entry>
  <entry>
    <title>springMVC学习</title>
    <url>/2022/11/09/springMVC%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="1、SpringMvc的框架和配置模板"><a href="#1、SpringMvc的框架和配置模板" class="headerlink" title="1、SpringMvc的框架和配置模板"></a>1、SpringMvc的框架和配置模板</h1><h2 id="1-1、Mapper配置模板"><a href="#1-1、Mapper配置模板" class="headerlink" title="1.1、Mapper配置模板"></a>1.1、Mapper配置模板</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuaihua.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里的id是com.kuaihua.dao.UserDao类下的getUserList方法，resultType是返回值类型，必须写成实体类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.kuaihua.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>



<h1 id="2、resources下面的配置信息，常用，一般写死的"><a href="#2、resources下面的配置信息，常用，一般写死的" class="headerlink" title="2、resources下面的配置信息，常用，一般写死的"></a>2、resources下面的配置信息，常用，一般写死的</h1><h2 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:spring-service.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:spring-mvc.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="database-properties"><a href="#database-properties" class="headerlink" title="database.properties"></a>database.properties</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jdbc.driver = com.mysql.cj.jdbc.Driver</span><br><span class="line">jdbc.url =  jdbc:mysql://localhost:3306/ssmbuild?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span><br><span class="line">jdbc.username = root</span><br><span class="line">jdbc.password = 88888</span><br></pre></td></tr></table></figure>

<h2 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--configuration核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.kuaihua.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.kuaihua.dao.BooksMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="spring-dao-xml"><a href="#spring-dao-xml" class="headerlink" title="spring-dao.xml"></a>spring-dao.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1.关联数据库配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:database.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置数据库连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定mybatis配置文件，也就是spring配置mybatis配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--4、配置dao接口扫描包，动态的实现Dao接口可以注入到Spring容器中，这一步在原来的spring中是实现一个Impl接口来实现sqlSession的注入，这里Spring直接帮我们做了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入sqlSessionFactory--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--自动扫描dao的包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.kuaihua.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="spring-mvc-xml"><a href="#spring-mvc-xml" class="headerlink" title="spring-mvc.xml"></a>spring-mvc.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1、注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--2、静态资源过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--3、自动扫描包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuaihua.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--4、视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="spring-service"><a href="#spring-service" class="headerlink" title="spring-service"></a>spring-service</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1扫描Service下的所有包，这里用配置，一般用注解@Service--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuaihua.service&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2将我们所有业务类，注入到Spring，可以通过配置或者注解实现，这里用配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;BookServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuaihua.service.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;booksMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;booksMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3声明式事务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    4、aop支持--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="3、常用的依赖和静态资源导出"><a href="#3、常用的依赖和静态资源导出" class="headerlink" title="3、常用的依赖和静态资源导出"></a>3、常用的依赖和静态资源导出</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    依赖：junit,数据库驱动，连接池，servlet,jsp,mybatis,mybatis-spring,spring--&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.mchange/c3p0 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!--按需求添加--&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!--按需求添加--&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SpringMvc</category>
      </categories>
  </entry>
  <entry>
    <title>springcloud整合邮件异步</title>
    <url>/2022/11/09/springcloud%E6%95%B4%E5%90%88%E9%82%AE%E4%BB%B6%E5%BC%82%E6%AD%A5/</url>
    <content><![CDATA[<h2 id="springboot整合邮件发送-异步任务与定时发送"><a href="#springboot整合邮件发送-异步任务与定时发送" class="headerlink" title="springboot整合邮件发送,异步任务与定时发送"></a>springboot整合邮件发送,异步任务与定时发送</h2><h3 id="1-1-邮件发送"><a href="#1-1-邮件发送" class="headerlink" title="1.1 邮件发送"></a>1.1 邮件发送</h3><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>邮件发送的代码,可以自己适当的组装相关的邮件信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">JavaMailSenderImpl mailSender;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">SimpleMailMessage</span> <span class="variable">mailMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMailMessage</span>();</span><br><span class="line">    mailMessage.setSubject(<span class="string">&quot;给自己发一次邮件&quot;</span>);</span><br><span class="line">    mailMessage.setText(<span class="string">&quot;第一次给自己发邮件,有点紧张&quot;</span>);</span><br><span class="line">    mailMessage.setFrom(<span class="string">&quot;2916126724@qq.com&quot;</span>);</span><br><span class="line">    mailMessage.setTo(<span class="string">&quot;2916126724@qq.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">    mailSender.send(mailMessage);</span><br><span class="line">    System.out.println(<span class="string">&quot;发送成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads2</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">    <span class="comment">// 一个复杂的邮件</span></span><br><span class="line">    <span class="type">MimeMessage</span> <span class="variable">mimeMessage</span> <span class="operator">=</span> mailSender.createMimeMessage();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 组装邮件信息</span></span><br><span class="line">    <span class="type">MimeMessageHelper</span> <span class="variable">helper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(mimeMessage,<span class="literal">true</span>);</span><br><span class="line">    helper.setSubject(<span class="string">&quot;给自己发一次邮件,复杂的邮件&quot;</span>);</span><br><span class="line">    helper.setText(<span class="string">&quot;第一次给自己发复杂的邮件,有点紧张&quot;</span>);</span><br><span class="line">    <span class="comment">// 这里使用绝对地址也可以</span></span><br><span class="line">    helper.addAttachment(<span class="string">&quot;1.png&quot;</span>,<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\测试图片\\1.png&quot;</span>));</span><br><span class="line">    helper.addAttachment(<span class="string">&quot;2.png&quot;</span>,<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\测试图片\\1.png&quot;</span>));</span><br><span class="line">    helper.setFrom(<span class="string">&quot;2916126724@qq.com&quot;</span>);</span><br><span class="line">    helper.setTo(<span class="string">&quot;2916126724@qq.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">    mailSender.send(mimeMessage);</span><br><span class="line">    System.out.println(<span class="string">&quot;发送成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-异步任务"><a href="#1-2-异步任务" class="headerlink" title="1.2 异步任务"></a>1.2 异步任务</h3><ol>
<li><p>在main程序&#x3D;&#x3D;开启需要的需求代码&#x3D;&#x3D;</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAsync</span>    <span class="comment">// 开启异步功能   ,与@Async协同使用</span></span><br><span class="line"><span class="meta">@EnableScheduling</span>   <span class="comment">// 开启定时执行任务功能   ,与@Schedule协使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot09AsyncApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Springboot09AsyncApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><pre><code> @EnableAsync  	// 在main入口中开启需要的功能
 @Async  // 表示这个任务可以异步进行
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3. 测试</span><br><span class="line"></span><br><span class="line">### 1.3 定时发送</span><br><span class="line"></span><br><span class="line">1. 在main开启需要的功能</span><br><span class="line"></span><br><span class="line">    ~~~java</span><br><span class="line">    @EnableScheduling   // 开启定时执行任务功能   ,与@Schedule协使用</span><br><span class="line">    @Scheduled	// 格式:cron=&quot;秒 分 时 日 月 星期&quot;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
<li><p>测试</p>
</li>
<li><pre><code class="java"> /**
  * 7月6日的5点4分1秒执行这个任务
  *  @Scheduled(cron = &quot;1 4 5 6 7 *&quot;)
  */
 
 @Scheduled(cron = &quot;0 0 0 0 0 0&quot;)
 public void hello()&#123;
     System.out.println(&quot;hello,Schedule&quot;);
 &#125;
</code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>springcloud</category>
      </categories>
  </entry>
  <entry>
    <title>zookeeper+dubbo版本跟依赖</title>
    <url>/2022/11/08/zookeeper-dubbo%E7%89%88%E6%9C%AC%E8%B7%9F%E4%BE%9D%E8%B5%96/</url>
    <content><![CDATA[<ol>
<li>zookeeper版本(3.4.14)</li>
</ol>
<p><img src="/2022/11/08/zookeeper-dubbo%E7%89%88%E6%9C%AC%E8%B7%9F%E4%BE%9D%E8%B5%96/zookeeper%E7%89%88%E6%9C%AC.png" alt="zookeeper版本"></p>
<span id="more"></span>

<ol start="2">
<li>版本依赖(版本不同会出现很多错误,原因不知道)</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.dubbo/dubbo-spring-boot-starter --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.sgroschupf/zkclient --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--排除日志--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.curator/curator-framework --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.curator/curator-recipes --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--排除日志，不然会日志冲突--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
        <tag>dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title>博客的简单使用笔记</title>
    <url>/2022/11/06/%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="搭建参考网址"><a href="#搭建参考网址" class="headerlink" title="搭建参考网址"></a>搭建参考网址</h2><p><a href="https://www.fomal.cc/posts/e593433d.html">参考网址</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy  	<span class="comment"># 常用的命令,在git窗口发布到博客上(清理,生成静态文件,发布)</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="创建一个新的文件"><a href="#创建一个新的文件" class="headerlink" title="创建一个新的文件"></a>创建一个新的文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;测试&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<h2 id="打开localhost-4000网址"><a href="#打开localhost-4000网址" class="headerlink" title="打开localhost:4000网址"></a>打开localhost:4000网址</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<h2 id="补齐缺失模块"><a href="#补齐缺失模块" class="headerlink" title="补齐缺失模块"></a>补齐缺失模块</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i hexo-generator-json-content --save</span><br></pre></td></tr></table></figure>

<h2 id="分类跟标签创建和使用"><a href="#分类跟标签创建和使用" class="headerlink" title="分类跟标签创建和使用"></a>分类跟标签创建和使用</h2><hr>
<p><img src="/2022/11/06/%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20221107091956291.png" alt="分类与标签如何创建"></p>
<h2 id="文章发布"><a href="#文章发布" class="headerlink" title="文章发布"></a>文章发布</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">命名结束完成后，在/source/_posts文件内鼠标右键点击空白处，选择Git Bash Here：</span><br><span class="line"></span><br><span class="line">输入 hexo g (完整命令为hexo generate)，用于生成静态文件；</span><br><span class="line"></span><br><span class="line">然后输入 hexo s(完整命令为hexo server)，用于启动服务器，主要用来本地预览；完成后 打开浏览器输入 http://localhost:4000，会发现多了你刚写的那篇博客;</span><br><span class="line"></span><br><span class="line">最后输入hexo d(hexo deploy)，用于将本地文件发布到github等git仓库上；</span><br><span class="line"></span><br><span class="line">文章发布完成</span><br><span class="line"></span><br><span class="line">注意：每次对hexo博客上的博客.md文件进行更改后都要重复以上步骤，这样更改的内容才能在hexo博客上显示。</span><br><span class="line"></span><br><span class="line"> hexo generate &amp;&amp; hexo deploy (一般写这个就行)</span><br></pre></td></tr></table></figure>


<hr>
<h2 id="显示图片"><a href="#显示图片" class="headerlink" title="显示图片"></a>显示图片</h2><p><img src="/2022/11/06/%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20221108132038803.png" alt="image-20221108132038803"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- 安装依赖包 npm install hexo-asset-image -- save</span><br><span class="line">- 在hexo根目录的_config.yml设置post_asset_folder: <span class="literal">true</span>	<span class="comment"># 作用是在生成一个新md文件的同时,生成一个在source/_posts目录下生成一个同名的文件夹,这个文件夹就是用来放置需要保存的图片的</span></span><br><span class="line">- 引入图片,格式类是(./我的博客搭建-过程/image-20221107091956291.png),必须是反斜杠,不然还是不会显示出来</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>多线程</title>
    <url>/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221117154157592.png" alt="image-20221117154157592"></p>
<span id="more"></span>

<h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221117154403901.png" alt="image-20221117154403901"></p>
<h3 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h3><p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221117154536082.png" alt="image-20221117154536082"></p>
<h3 id="run-和start"><a href="#run-和start" class="headerlink" title="run()和start()"></a>run()和start()</h3><p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221117155135707.png" alt="image-20221117155135707"></p>
<h3 id="三种方式"><a href="#三种方式" class="headerlink" title="三种方式"></a>三种方式</h3><h4 id="第一种：继承Thread"><a href="#第一种：继承Thread" class="headerlink" title="第一种：继承Thread"></a>第一种：继承Thread</h4><p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221117155240916.png" alt="image-20221117155240916"></p>
<h4 id="第二种：实现runable实现龟兔赛跑"><a href="#第二种：实现runable实现龟兔赛跑" class="headerlink" title="第二种：实现runable实现龟兔赛跑"></a>第二种：实现runable实现龟兔赛跑</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KuangRace</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String winner;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> gameOver(i);</span><br><span class="line">            <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">                <span class="keyword">break</span>;  <span class="comment">// 游戏结束</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;跑了第&quot;</span>+ i + <span class="string">&quot;步!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">gameOver</span><span class="params">(<span class="type">int</span> steps)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (winner != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;        <span class="comment">// 有胜利者游戏就结束了</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(steps &gt;= <span class="number">100</span>)&#123;       <span class="comment">// 步数到了100就说明胜利者产生了</span></span><br><span class="line">            winner = Thread.currentThread().getName();</span><br><span class="line">            System.out.println(<span class="string">&quot;======================Winner is &quot;</span>+ winner);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">KuangRace</span> <span class="variable">kuangRace</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KuangRace</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(kuangRace,<span class="string">&quot;乌龟&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(kuangRace,<span class="string">&quot;兔子&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="第三种-Callable"><a href="#第三种-Callable" class="headerlink" title="第三种: Callable"></a>第三种: Callable</h4><p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221118200600467.png" alt="image-20221118200600467"><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221118200935149.png" alt="image-20221118200935149"></p>
<p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221118200834841.png" alt="image-20221118200834841"></p>
<h3 id="xxxxxxxxxx7-1-post-body-p-a-2-color-0000FF-蓝色3-border-bottom-none-下划线4-amp-hover-5-color-FF0000-红色6-7-bash"><a href="#xxxxxxxxxx7-1-post-body-p-a-2-color-0000FF-蓝色3-border-bottom-none-下划线4-amp-hover-5-color-FF0000-红色6-7-bash" class="headerlink" title="xxxxxxxxxx7 1.post-body p a{2  color: #0000FF;       # 蓝色3  border-bottom: none;      # 下划线4  &amp;:hover{5    color: #FF0000;     # 红色6  }7}bash"></a>xxxxxxxxxx7 1.post-body p a{2  color: #0000FF;       # 蓝色3  border-bottom: none;      # 下划线4  &amp;:hover{5    color: #FF0000;     # 红色6  }7}bash</h3><p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221119205658127.png" alt="image-20221119205658127"></p>
<p><strong>从1~6是逐步发展的过程,是逐渐简化的过程,需要习惯,所有事情</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuaihua.lambda;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambda</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.静态内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Like2</span> <span class="keyword">implements</span> <span class="title class_">ILike</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;====Lambda2====&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ILike</span> <span class="variable">like</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Like</span>();</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        like = <span class="keyword">new</span> <span class="title class_">Like2</span>();</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.局部内部类</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Like3</span> <span class="keyword">implements</span> <span class="title class_">ILike</span>&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;====Lambda3====&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        like = <span class="keyword">new</span> <span class="title class_">Like3</span>();</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        like = <span class="keyword">new</span> <span class="title class_">ILike</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;====Lambda4====&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6.用lambda来简化</span></span><br><span class="line">        like = ()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;====Lambda5====&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        like.lambda();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.定义一个函数式接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ILike</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 实现一个接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Like</span> <span class="keyword">implements</span> <span class="title class_">ILike</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;====Lambda====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="进程-1"><a href="#进程-1" class="headerlink" title="进程"></a>进程</h3><h4 id="五种运行状态"><a href="#五种运行状态" class="headerlink" title="五种运行状态"></a>五种运行状态</h4><p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221121181218376.png" alt="image-20221121181218376"></p>
<h4 id="线程的常用方法"><a href="#线程的常用方法" class="headerlink" title="线程的常用方法"></a>线程的常用方法</h4><p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221121181311803.png" alt="image-20221121181311803"></p>
<h4 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h4><p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221121181712513.png" alt="image-20221121181712513"></p>
<h4 id="线程休眠-sleep"><a href="#线程休眠-sleep" class="headerlink" title="线程休眠(sleep	)"></a>线程休眠(sleep	)</h4><p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221121182432561.png" alt="image-20221121182432561"></p>
<h4 id="线程礼让-yield-x3D-x3D-不一定成功-x3D-x3D"><a href="#线程礼让-yield-x3D-x3D-不一定成功-x3D-x3D" class="headerlink" title="线程礼让(yield) &#x3D;&#x3D;不一定成功&#x3D;&#x3D;"></a>线程礼让(yield) &#x3D;&#x3D;不一定成功&#x3D;&#x3D;</h4><p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221121192356765.png" alt="image-20221121192356765"></p>
<p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221121192507189.png" alt="image-20221121192507189">	</p>
<h4 id="线程插队-join"><a href="#线程插队-join" class="headerlink" title="线程插队(join)"></a>线程插队(join)</h4><p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221121193912720.png" alt="image-20221121193912720"></p>
<h4 id="线程的五个状态跟查看方法"><a href="#线程的五个状态跟查看方法" class="headerlink" title="线程的五个状态跟查看方法"></a>线程的五个状态跟查看方法</h4><p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221121205646349.png" alt="image-20221121205646349"></p>
<p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221121205811947.png" alt="image-20221121205811947"></p>
<p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221121205900919.png" alt="image-20221121205900919"></p>
<p>报错是因为死亡的线程是不能再次启动的</p>
<p>不然就会报错</p>
<p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221121205910207.png" alt="image-20221121205910207"></p>
<h4 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h4><p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221121210024695.png" alt="image-20221121210024695"></p>
<p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221121213523089.png" alt="image-20221121213523089"></p>
<p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221121213701154.png" alt="image-20221121213701154">	</p>
<p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221121213640741.png" alt="image-20221121213640741"></p>
<h4 id="守护进程-daemon"><a href="#守护进程-daemon" class="headerlink" title="守护进程(daemon)"></a>守护进程(daemon)</h4><p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221122192026319.png" alt="image-20221122192026319"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DaemonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">God</span> <span class="variable">god</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">God</span>();</span><br><span class="line">        <span class="type">You</span> <span class="variable">you</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">You</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(god);    <span class="comment">//</span></span><br><span class="line">        <span class="comment">// 开启守护进程</span></span><br><span class="line">        thread.setDaemon(<span class="literal">true</span>);             <span class="comment">// false是默认值,也代表正常用户,如果为true就表示这是一个守护进程,用户进程死了,守护也就死了,虚拟机不用等待守护进程结束</span></span><br><span class="line"></span><br><span class="line">        thread.start();         <span class="comment">// 进程开始</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(you).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">God</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;============God==========&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">You</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">36500</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;开心每一天===============&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;GoodBye, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="并发synchronized-辛口耐s"><a href="#并发synchronized-辛口耐s" class="headerlink" title="并发	synchronized(辛口耐s)"></a>并发	synchronized(辛口耐s)</h3><p>同一个对象被多个线程同时操作</p>
<p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221122192509928.png" alt="image-20221122192509928"></p>
<p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221122192536807.png" alt="image-20221122192536807"></p>
<p>队列+锁</p>
<p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221122192741206.png" alt="image-20221122192741206"></p>
<h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221123194736377.png" alt="image-20221123194736377"></p>
<h4 id="同步弊端"><a href="#同步弊端" class="headerlink" title="同步弊端"></a>同步弊端</h4><p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221123194918052.png" alt="image-20221123194918052"></p>
<p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221123194950214.png" alt="image-20221123194950214"></p>
<h3 id="锁"><a href="#锁" class="headerlink" title="锁:"></a>锁:</h3><p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221123204015084.png" alt="image-20221123204015084"></p>
<p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221123204028032.png" alt="image-20221123204028032"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuaihua.thread.Lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLock</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MakeUp</span> <span class="variable">g1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MakeUp</span>(<span class="number">0</span>, <span class="string">&quot;灰姑凉&quot;</span>);</span><br><span class="line">        <span class="type">MakeUp</span> <span class="variable">g2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MakeUp</span>(<span class="number">2</span>, <span class="string">&quot;白雪&quot;</span>);</span><br><span class="line">        g1.start();</span><br><span class="line">        g2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lipstick</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mirror</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MakeUp</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="type">int</span> choice;</span><br><span class="line">    String girlName;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Lipstick</span> <span class="variable">lipstick</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Lipstick</span>();          <span class="comment">// 静态方法让这个变量只有一个,也就是只有一个口红</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Mirror</span> <span class="variable">mirror</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mirror</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MakeUp</span><span class="params">(<span class="type">int</span> choice,String girlName)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.choice = choice;</span><br><span class="line">        <span class="built_in">this</span>.girlName = girlName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            makeup();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">makeup</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span> (choice==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lipstick)&#123;    <span class="comment">// 获得口红的锁</span></span><br><span class="line">                System.out.println(<span class="built_in">this</span>.girlName+<span class="string">&quot;获取了口红的锁&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                <span class="comment">// synchronized (mirror)&#123;</span></span><br><span class="line">                <span class="comment">//     System.out.println(this.girlName + &quot;获得了镜子的锁&quot;);</span></span><br><span class="line">                <span class="comment">// &#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (mirror)&#123;</span><br><span class="line">                System.out.println(<span class="built_in">this</span>.girlName + <span class="string">&quot;获得了镜子的锁&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mirror)&#123;    <span class="comment">// 获得口红的锁</span></span><br><span class="line">                System.out.println(<span class="built_in">this</span>.girlName+<span class="string">&quot;获取了镜子的锁&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                <span class="comment">// synchronized (lipstick)&#123;</span></span><br><span class="line">                <span class="comment">//     System.out.println(this.girlName + &quot;获得了口红的锁&quot;);</span></span><br><span class="line">                <span class="comment">// &#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (lipstick)&#123;</span><br><span class="line">                System.out.println(<span class="built_in">this</span>.girlName + <span class="string">&quot;获得了口红的锁&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="死锁避免方法"><a href="#死锁避免方法" class="headerlink" title="死锁避免方法"></a>死锁避免方法</h4><p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221123205708322.png" alt="image-20221123205708322"></p>
<h4 id="可重复锁"><a href="#可重复锁" class="headerlink" title="可重复锁"></a>可重复锁</h4><p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221123210349964.png" alt="image-20221123210349964"></p>
<p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221123210406308.png" alt="image-20221123210406308"></p>
<h4 id="Lock与synchronized-辛口耐s-的区别"><a href="#Lock与synchronized-辛口耐s-的区别" class="headerlink" title="Lock与synchronized(辛口耐s)的区别"></a>Lock与synchronized(辛口耐s)的区别</h4><p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221123210459852.png" alt="image-20221123210459852"></p>
<h4 id="reentrantlock-吕an去lock-可重复锁"><a href="#reentrantlock-吕an去lock-可重复锁" class="headerlink" title="reentrantlock(吕an去lock)可重复锁"></a><em>reentrantlock</em>(吕an去lock)可重复锁</h4><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221123220012491.png" alt="image-20221123220012491"></p>
<p>使用</p>
<p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221123220051955.png" alt="image-20221123220051955"></p>
<p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221123220243132.png" alt="image-20221123220243132"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221123220709641.png" alt="image-20221123220709641"></p>
<p><img src="/2022/11/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20221123220818183.png" alt="image-20221123220818183"></p>
]]></content>
  </entry>
  <entry>
    <title>注解和反射</title>
    <url>/2022/11/14/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>常见软件问题</title>
    <url>/2022/11/09/%E5%B8%B8%E8%A7%81%E8%BD%AF%E4%BB%B6%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="Idea卡在Resolving-Maven-dependencies的解决方案"><a href="#Idea卡在Resolving-Maven-dependencies的解决方案" class="headerlink" title="Idea卡在Resolving Maven dependencies的解决方案"></a>Idea卡在Resolving <a href="https://so.csdn.net/so/search?q=Maven&spm=1001.2101.3001.7020">Maven</a> dependencies的解决方案</h3><p>在Reimpot All Maven Porjects时, 如果项目过大, maven依赖过多, 会直接卡在Resolving Maven dependencies这步</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">修改maven Importing的jvm参数, 默认为700多, 直接修改成 -Xms1024m -Xmx2048m</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><img src="/2022/11/09/%E5%B8%B8%E8%A7%81%E8%BD%AF%E4%BB%B6%E9%97%AE%E9%A2%98/image-20221105083633686.png" alt="image-20221105083633686"></p>
<hr>
<h1 id="关闭占用端口"><a href="#关闭占用端口" class="headerlink" title="关闭占用端口"></a>关闭占用端口</h1><h2 id="8080为例子"><a href="#8080为例子" class="headerlink" title="8080为例子"></a>8080为例子</h2><ol>
<li><p><strong>查看端口被占用的进程号</strong></p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ano|findstr <span class="string">&quot;8080&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查看端口“8080”被哪个应用程序占用</strong></p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tasklist|findstr <span class="string">&quot;14384&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>xxxxxxxxxx7 1.post-body p a{2  color: #0000FF;       # 蓝色3  border-bottom: none;      # 下划线4  &amp;:hover{5    color: #FF0000;     # 红色6  }7}bash</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">按进程号杀死进程： takskill /pid 进程号</span><br><span class="line">按进程号杀死多个进程： taskkill /pid 进程号1 /pid 进程号2</span><br><span class="line">按进程名杀死进程： taskkill /im 进程名</span><br><span class="line">按进程名杀死多个进程： taskkill /im 进程名1 /im 进程名2</span><br><span class="line">如果关闭杀死所有进程：（使用通配符） taskkill /im *.exe</span><br><span class="line">强制终止进程： taskkill /f 进程名或进程号</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>常用的注解及其意义</title>
    <url>/2022/11/09/%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="springboot中常用注解跟意思"><a href="#springboot中常用注解跟意思" class="headerlink" title="springboot中常用注解跟意思"></a>springboot中常用注解跟意思</h3><ul>
<li><p>@Autowired：表示自动注入，自动从spring的上下文&#x3D;&#x3D;找到合适的bean来注入&#x3D;&#x3D;</p>
</li>
<li><p>@Resource：表示按指定名称注入，@Resource 可以通过 byName 和 byType的方式注入， 默认先按 byName的方式进行匹配，如果匹配不到，再按 byType的方式进行匹配。 当然，还可以为 @Service和@Resource 添加 name 这个属性来区分不同的实现。</p>
<span id="more"></span>  
</li>
<li><p>@Component：表示一种泛指，被标记类即组件，Spring扫描注解配置时，会标记这些类要&#x3D;&#x3D;生成对应的bean。&#x3D;&#x3D;</p>
</li>
<li><p>Controller、Service、、Repository分别作用类是控制层类、业务层类、数据访问层类，Spring扫描注解配置时，会标记这些类要生成对应的bean。</p>
</li>
<li><p>@Autowired和@Resource是用来修饰字段，构造函数，或者方法，其作用是注入bean。而@Service，@Controller，@Repository，</p>
</li>
</ul>
<p>​	@Component则是用来修饰类，标记这些类要生成bean。</p>
<ul>
<li>@Component  组件，为了被扫描到可以在实体类中加</li>
</ul>
<p>@ConfigurationProperties(prefix &#x3D; “person”) 把application.yaml中的默认属性填装到Person类中的对应关键字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>  		<span class="comment">// service层</span></span><br><span class="line"><span class="meta">@Mapper</span><span class="meta">@Repository</span>		<span class="comment">// mapper/dao层</span></span><br><span class="line"><span class="meta">@Controller</span>			<span class="comment">// controller层</span></span><br></pre></td></tr></table></figure>





<p><img src="/2022/11/09/%E6%B3%A8%E8%A7%A3/image-20221114120557541.png" alt="image-20221114120557541"></p>
<h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p><img src="/2022/11/09/%E6%B3%A8%E8%A7%A3/image-20221114120711567.png" alt="image-20221114120711567"></p>
<h3 id="自己定义注解"><a href="#自己定义注解" class="headerlink" title="自己定义注解"></a>自己定义注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自己定义注解和使用注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnnotation01(&quot;A&quot;)</span></span><br><span class="line">    <span class="meta">@MyAnnotation02</span></span><br><span class="line">    <span class="meta">@MyAnnotation03(name = &quot;B&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Test</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示这个注解在什么地方有效,级别runtime&gt;class&gt;sources,runtime说明程序运行都有效,一般选这个,</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation01&#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;     <span class="comment">// 这表示定义了一个叫做MyAnnotation01的注解,这个注解默认有一个值,这个值得手动去赋值</span></span><br><span class="line">                        <span class="comment">// 类似于@Mapper之类的注解,可以使用@MyAnnotation01来使用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation02&#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;server.port&quot;</span>;       <span class="comment">// 可以不手动赋值,默认值为&quot;server.port&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation03&#123;</span><br><span class="line">    <span class="comment">// 注解参数: 参数类型 + 参数名字() + default + 默认值类型的值</span></span><br><span class="line">    <span class="comment">// 注解参数: 参数类型 + 参数名字()</span></span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">id</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">age</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">4</span>;</span><br><span class="line">    String[] schools() <span class="keyword">default</span> &#123;<span class="string">&quot;name&quot;</span>,<span class="string">&quot;id&quot;</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="/2022/11/09/%E6%B3%A8%E8%A7%A3/image-20221114121229298.png" alt="image-20221114121229298"></p>
<p><img src="/2022/11/09/%E6%B3%A8%E8%A7%A3/image-20221114121349317.png" alt="image-20221114121349317"></p>
<p><img src="/2022/11/09/%E6%B3%A8%E8%A7%A3/image-20221114121834527.png" alt="image-20221114121834527"></p>
<h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点:"></a>优点:</h4><p>可以通过反射来获取Class的包名,类名,方法名等,动态创建对象执行操作执行方法</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点:"></a>缺点:</h4><p>降低程序的运行效率,可以关闭程序的安全监测访问操作私有变量,有安全隐患,</p>
<h4 id="Class-forname-“具体的包名”"><a href="#Class-forname-“具体的包名”" class="headerlink" title="Class.forname(“具体的包名”)"></a>Class.forname(“具体的包名”)</h4><h4 id><a href="#" class="headerlink" title></a></h4><p><img src="/2022/11/09/%E6%B3%A8%E8%A7%A3/image-20221114122301945.png" alt="image-20221114122301945"></p>
<p><img src="/2022/11/09/%E6%B3%A8%E8%A7%A3/image-20221114122705917.png" alt="image-20221114122705917"></p>
<p>通过对比hashCode来判断是否是同一个类</p>
<p><img src="/2022/11/09/%E6%B3%A8%E8%A7%A3/image-20221114122852115.png" alt="image-20221114122852115"><img src="/2022/11/09/%E6%B3%A8%E8%A7%A3/image-20221114122932829.png" alt="image-20221114122932829"></p>
<p><img src="/2022/11/09/%E6%B3%A8%E8%A7%A3/image-20221114123305073.png"></p>
<p><img src="/2022/11/09/%E6%B3%A8%E8%A7%A3/image-20221114123604552.png" alt="image-20221114123604552"></p>
<p><img src="/2022/11/09/%E6%B3%A8%E8%A7%A3/image-20221114184725133.png" alt="image-20221114184725133"></p>
<h4 id="invoke-方法"><a href="#invoke-方法" class="headerlink" title="invoke()方法"></a>invoke()方法</h4><p><img src="/2022/11/09/%E6%B3%A8%E8%A7%A3/image-20221116212407684.png" alt="image-20221116212407684"></p>
<p><img src="/2022/11/09/%E6%B3%A8%E8%A7%A3/image-20221116212539612.png" alt="image-20221116212539612"></p>
<p><img src="/2022/11/09/%E6%B3%A8%E8%A7%A3/image-20221116212611136.png" alt="image-20221116212611136"></p>
<p><img src="/2022/11/09/%E6%B3%A8%E8%A7%A3/image-20221116212623212.png" alt="image-20221116212623212"></p>
]]></content>
  </entry>
  <entry>
    <title>修改hexo的next(8.12.1)主题的页面加载,评论设置</title>
    <url>/2022/11/08/%E7%AE%80%E5%8D%95%E4%BF%AE%E6%94%B9hexo%E7%9A%84%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="相关版本信息"><a href="#相关版本信息" class="headerlink" title="相关版本信息"></a>相关版本信息</h2><p><img src="/2022/11/08/%E7%AE%80%E5%8D%95%E4%BF%AE%E6%94%B9hexo%E7%9A%84%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/version.png" alt="版本"></p>
<span id="more"></span>

<h2 id="修改页面加载动画"><a href="#修改页面加载动画" class="headerlink" title="修改页面加载动画"></a>修改页面加载动画</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">主题的_config.yml搜索pace修改里面的样式就行</span><br></pre></td></tr></table></figure>


<h2 id="参考优化"><a href="#参考优化" class="headerlink" title="参考优化"></a>参考优化</h2><p><a href="https://zhuanlan.zhihu.com/p/373293888">参考主题优化</a></p>
<h2 id="Valine的评论设置"><a href="#Valine的评论设置" class="headerlink" title="Valine的评论设置"></a>Valine的评论设置</h2><p><a href="https://console.leancloud.cn/">Leancloud注册登录网址</a></p>
<p><a href="https://blog.csdn.net/weixin_43167980/article/details/113779387">注册参考网址</a></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">app_id:</span> <span class="string">5FvLcxvoP7bZCapbl8eSk61f-gzGzoHsz</span> <span class="comment"># &lt;your app id&gt;你自己的leancloud appid</span></span><br><span class="line">  <span class="attr">app_key:</span> <span class="string">bJTS0ZxmmgU96djhQc4whBd</span> <span class="comment"># &lt;your app key&gt;</span></span><br><span class="line">  <span class="comment"># Required for apps from CN region</span></span><br><span class="line">  <span class="attr">server_url:</span> <span class="string">https://5fvlcxvo.lc-cn-n1-shared.com</span> <span class="comment"># &lt;your server url&gt;</span></span><br><span class="line">  <span class="comment"># Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security</span></span><br><span class="line">  <span class="comment"># If you don&#x27;t care about security in leancloud counter and just want to use it directly</span></span><br><span class="line">  <span class="comment"># (without hexo-leancloud-counter-security plugin), set `security` to `false`.</span></span><br><span class="line">  <span class="attr">security:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appId:</span>  <span class="string">5FvLcxvoP7bZCapbl8eSk61f-gzGzoHsz</span> <span class="comment">#你的leancloud里面的AppID</span></span><br><span class="line">  <span class="attr">appKey:</span>  <span class="string">bJTS0ZxmmgU96djhQc4whBd</span> <span class="comment">#你的leancloud里面的AppKey</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">期待你的评论</span> <span class="comment"># Comment box placeholder</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># gravatar style</span></span><br><span class="line">  <span class="attr">meta:</span> [<span class="string">nick</span>, <span class="string">mail</span>, <span class="string">link</span>] <span class="comment"># Custom comment header</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># pagination size</span></span><br><span class="line">  <span class="attr">lang:</span> <span class="string">zh-cn</span> <span class="comment"># Language, available values: en, zh-cn</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span> <span class="comment">#文章阅读量统计  </span></span><br><span class="line">  <span class="attr">comment_count:</span> <span class="literal">false</span> <span class="comment"># If false, comment count will only be displayed in post page, not in home page 评论计数</span></span><br><span class="line">  <span class="attr">serverURLs:</span>  <span class="comment">#REST API服务器地址 https://。。。。 # 这里必须写,不然评论提交不了,rest api也是在leancloud安全设置中看,</span></span><br><span class="line">  <span class="attr">recordIP:</span> <span class="literal">false</span>  <span class="comment"># Whether to record the commenter IP</span></span><br><span class="line">  <span class="attr">enableQQ:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">requiredFields:</span> [<span class="string">nick</span>, <span class="string">mail</span>] <span class="comment"># Set required fields: [nick] | [nick, mail] 要求写评论必须要写昵称和邮箱,啥都不加,或者写[nick]</span></span><br></pre></td></tr></table></figure>



<h2 id="隐藏底部的驱动提供之类的"><a href="#隐藏底部的驱动提供之类的" class="headerlink" title="隐藏底部的驱动提供之类的"></a>隐藏底部的驱动提供之类的</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Powered by Hexo &amp; NexT</span></span><br><span class="line">  powered: <span class="literal">false</span>		<span class="comment"># true变成false</span></span><br></pre></td></tr></table></figure>
<h2 id="修改内嵌链接样式"><a href="#修改内嵌链接样式" class="headerlink" title="修改内嵌链接样式"></a>修改内嵌链接样式</h2><p><a href="https://www.w3school.com.cn/cssref/css_colors.asp">css颜色选择</a></p>
<p><img src="/2022/11/08/%E7%AE%80%E5%8D%95%E4%BF%AE%E6%94%B9hexo%E7%9A%84%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/eg01.png" alt="位置"></p>
<p>在next中的index.styl文件添加一下信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.post-body p a&#123;</span><br><span class="line">  color: <span class="comment">#0000FF;		# 蓝色</span></span><br><span class="line">  border-bottom: none;		<span class="comment"># 下划线</span></span><br><span class="line">  &amp;:hover&#123;</span><br><span class="line">    color: <span class="comment">#FF0000;		# 红色</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>springboot常用的相关版本依赖</title>
    <url>/2022/11/09/Springboot%E5%B8%B8%E8%A7%81%E4%BE%9D%E8%B5%96/</url>
    <content><![CDATA[<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!--Druid数据源 --&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.2.11&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">  </span><br><span class="line">   &lt;!-- mysql数据库驱动 --&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">      &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="zookeeper-dubbo"><a href="#zookeeper-dubbo" class="headerlink" title="zookeeper+dubbo"></a>zookeeper+dubbo</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!-- dubbo --&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;2.7.3&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- zookeeper客户端 --&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;com.github.sgroschupf&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;zkclient&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;0.1&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &lt;!--排除日志--&gt;</span><br><span class="line">      &lt;!-- https://mvnrepository.com/artifact/org.apache.curator/curator-framework --&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;2.12.0&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &lt;!-- https://mvnrepository.com/artifact/org.apache.curator/curator-recipes --&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;curator-recipes&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;2.12.0&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!--排除日志，不然会日志冲突,版本冲突,不排除会报错--&gt;</span><br><span class="line">      &lt;!-- zookeeper --&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.4.14&lt;/version&gt;</span><br><span class="line">          &lt;exclusions&gt;</span><br><span class="line">              &lt;exclusion&gt;</span><br><span class="line">                  &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">                  &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">              &lt;/exclusion&gt;</span><br><span class="line">          &lt;/exclusions&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">&lt;!-- springboot启动器 --&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">          &lt;scope&gt;<span class="built_in">test</span>&lt;/scope&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!-- springboot整合mybatis --&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">         &lt;version&gt;2.2.2&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- Shiro授权认证 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- Security安全,登录拦截 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- springboot与theleaf整合 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- springboot与web --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- Thymeleaf与security整合 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- lombok实体 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- springboot --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xmlunit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xmlunit-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.theborakompanioni/thymeleaf-extras-shiro --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot学习</title>
    <url>/2022/12/13/SpringBoot%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p><img src="/2022/12/13/SpringBoot%E5%AD%A6%E4%B9%A0/image-20221217230443297.png" alt="image-20221217230443297"></p>
<p>所有的静态资源都默认从resources文件夹下面的static,resources,public文件下面寻找,其中的&#x3D;&#x3D;优先级&#x3D;&#x3D;不同</p>
<p>&#x3D;&#x3D;优先级&#x3D;&#x3D;resources&gt;public&gt;static</p>
<p><img src="/2022/12/13/SpringBoot%E5%AD%A6%E4%B9%A0/image-20221217231300192.png" alt="image-20221217231300192"></p>
<p>在听templates目录下面的html只能通过controller类中的方法跳转.同时还得搭配Thymeleaf。</p>
<h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p>这是&#x3D;&#x3D;模板引擎的原理图&#x3D;&#x3D;</p>
<p><img src="/2022/12/13/SpringBoot%E5%AD%A6%E4%B9%A0/image-20221217232117205.png" alt="image-20221217232117205"></p>
<p>templates下面的文件夹需要引入模板引擎才可以通过controller访问。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>JAVA面试题</title>
    <url>/2022/11/11/JAVA%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<ol>
<li><p>Java如何实现不可变类</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. 确保类是fina的,不允许被继承</span><br><span class="line">2. 确保所有的成员的变量是final修饰的,只能在构造方法在宏初始化值,并且不会被修改</span><br><span class="line">3. 不提供setter方法</span><br><span class="line">4. 如果要修改类的状态,必须放回一个新的对象</span><br></pre></td></tr></table></figure>
</li>
<li><p>抽象类和接口有什么区别,类可以继承多个类吗,接口可以继承多个接口吗,类可以实现多个接口吗?</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> - 接口(interface) </span><br><span class="line"> 	1. 只能定义静态变量和抽象方法,无论是普通类和抽象类都没有这么严格的要求,所以它也不能继承普通类和抽象类.</span><br><span class="line"> 	2. 接口不能有实例对象,接口连构造器跟方法都没有</span><br><span class="line"> 	3. 打破单继承,实现多重伪继承</span><br><span class="line"> 	4. 接口只能继承接口(不能继承普通类和抽象类),且可以多继承</span><br><span class="line"> 	</span><br><span class="line">常量默认被public  static final</span><br><span class="line">方法默认被public static   abstractl 修饰</span><br><span class="line"> </span><br><span class="line"> - 抽象类(abstract)</span><br><span class="line"> 	1. 抽象类不能被实例化</span><br><span class="line"> 	2. 抽象方法一定包含在抽象类中,抽象类中的不一定都是抽象方法</span><br><span class="line"> 	3. 一个类如果继承这个抽象类,必须重写这个类的抽象方法</span><br><span class="line"> 	4. 抽象类主要是用来被继承的</span><br><span class="line"> 	5. 抽象方法和抽象类不能被final修饰</span><br><span class="line"> 	6. 有抽象类A,B,C,如果A继承B,如果A不重写B中的抽象方法,A然后被C继承,那么C必须重写B的抽象 方法</span><br><span class="line"> 	</span><br></pre></td></tr></table></figure>

</li>
<li><p>jdk1.5中引入了泛型,泛型存在是用来解决什么问题的</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">泛型是的存在是为了解决,多种数据类型执行相同的代码,实现(代码复用),</span><br><span class="line">泛型的类型在使用的时候指定,不需要强制类型转换.</span><br></pre></td></tr></table></figure>

</li>
<li><p>JAVA的反射机制</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">反射就是只有在运行的时候才知道操作的类是什么,并且可以在运行的时候获取类的完整构造,并调用对应的方法.</span><br><span class="line">- 主要功能</span><br><span class="line">	1. 在运行的时候判断任意一个了类的所属对象</span><br><span class="line">	2. 运行时构造任意一个类对象</span><br><span class="line">	3. 运行时判断一个类所具有的成员变量和成员方法</span><br><span class="line">	4. 运行时调用任意一个对象的方法,通过反射实现对private修饰的方法</span><br><span class="line">	5. 生成动态代理</span><br><span class="line">- 反射的应用</span><br><span class="line">	1. Spring的IOC框架基于反射的创建对象和设置依赖属性</span><br><span class="line">	2. springMVC的请求调用对应的方法</span><br><span class="line">	3. JDBC的class.forName(string className)<span class="string">&#x27;</span></span><br><span class="line"><span class="string">- 反射的优点</span></span><br><span class="line"><span class="string">	1. 增加的了代码的灵活性,避免吧代码写死了</span></span><br><span class="line"><span class="string">	2. 可以在程序运行的时候操作这些对象</span></span><br><span class="line"><span class="string">	3. 测试时,利用反射API访问类的私有成员,保证代码覆盖率</span></span><br><span class="line"><span class="string">- 反射的缺点</span></span><br><span class="line"><span class="string">	1. 性能问题</span></span><br><span class="line"><span class="string">		a.解释操作,用字段与方法接入时远慢于至直接代码.(一般用在对灵活性与扩展性要求很高的系统框架上)</span></span><br><span class="line"><span class="string">		b.反射包含了动态模型,所以JVM很难对其进行优化.所以效率要比非反射操作低得多.要避免在对性能要求很高的的程序使用反射</span></span><br><span class="line"><span class="string">	2. 反射模糊内部逻辑(不便于维护)</span></span><br><span class="line"><span class="string">		持续人员一般喜欢看到代码的逻辑关系,但是反射的存在是逻辑相对混乱.</span></span><br><span class="line"><span class="string">	3. 内部暴露</span></span><br><span class="line"><span class="string">		由于反射允许代码执行一些在正常情况下不被允许的操作,所以使用反射会导致意料之外的副作用,比如,代码功能上的错误,降低可移植性.并且反射破坏了抽象性,所以平台改变的时候,代码行为也可能发生改变.</span></span><br><span class="line"><span class="string">		</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>有哪些Map类是比较常用改的,都有什么区别,HashMap是线程安全的吗,&#x3D;&#x3D;并发&#x3D;&#x3D;下使用的map是什么,它们内部的原理是什么,比如存储范式,hashcode,扩容,默认容量等</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">常用的Map类有:HashMap,HashTable,LinkedHashmap,TreeMap</span><br><span class="line"></span><br><span class="line">在Map中插入,删除,定位元素:HashMap</span><br><span class="line">要按照自定义顺序火自然顺序遍历:TreeMap</span><br><span class="line">要求输入顺序 和输出顺序相同:LinkedHashMap</span><br><span class="line"></span><br><span class="line">从内部数据结构分析:</span><br><span class="line">	HashMap: 数组 + 链表/红黑树</span><br><span class="line">	HashTable:数据 + 链表</span><br><span class="line">	LinkedHashMap:双向链表</span><br><span class="line">	TreeMap:红黑树</span><br><span class="line">	</span><br><span class="line">从线程安全:</span><br><span class="line">	除了HashTable是线程安全的,其他都是非线程</span><br></pre></td></tr></table></figure>

</li>
<li><p>为什么string被设计为不可变的?</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">    ```</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">7. Overload,Override,Overwrite的介绍</span><br><span class="line"></span><br><span class="line">    ```bash</span><br><span class="line">    - Overload 重载</span><br><span class="line">    	同一个类中,同样的方法名,不一样的参数设置,这就是重载</span><br><span class="line">    	可以改变返回值,改变访问修饰符,改变异常变量和数量</span><br><span class="line">    </span><br><span class="line">    - Override 覆盖</span><br><span class="line">    	</span><br><span class="line">    - Overwrite 重写</span><br><span class="line">    	覆盖与重写之间大致是差不多的,个人理解,重写与覆盖一致</span><br><span class="line">    	规则:</span><br><span class="line">    	 	1. 重写纯在与子类与父类之间键</span><br><span class="line">    	 	2. 子类的方法名,参数必须与父类一样,接口就是这样</span><br><span class="line">    	 	3. 返回值不一定要与父类的一样,但是必须得是父类的派生类</span><br><span class="line">    	 	4. 声明为final的方法不能被重写</span><br><span class="line">    	 	5. 声明为static的方法不能被重写</span><br><span class="line">    	 	6. 构造器不能被重写</span><br><span class="line">    	 	7. 子类与父类在同一个包下,子类可以重写父类的所有方法(除了fianl和private)</span><br><span class="line">    	 	8.子类与父类在不同包是,子类只能重写父类的public 和protected的非final方法</span><br><span class="line">    	 	9.可以抛出 任意非强制性异常,但是不能抛出新的强制性异常,或比父类更广泛的异常</span><br><span class="line">    	 	</span><br></pre></td></tr></table></figure>

</li>
<li><p>浅拷贝与深拷贝</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">浅拷贝是只是复制了被复制变量的内存地址,复制的只是指针,但是还是用的同样的内存空间</span><br><span class="line">深拷贝不仅复制了一个一模一样的对象,但是不一样的内存地址</span><br></pre></td></tr></table></figure>

</li>
<li><p>在自己的代码中创建一个java.lang.String 类,这个类为什么&#x3D;&#x3D;不会&#x3D;&#x3D;被类加载器加载</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">这就要说道java的双亲委派机制,要记住的是双亲委派机制两个特点:向上委托,向下委派</span><br><span class="line">	向上委托:自定义加载器 然后到系统类加载器,然后收到扩展类加载器,最后到启动类加载器</span><br><span class="line">	向下委派:启动类加载器,然后到扩展类加载器,然后是系统类加载器,最后才到我们的自定义类加载器</span><br><span class="line"></span><br><span class="line">每一层之间的关系都组合关系,而不是继承关系</span><br><span class="line"></span><br><span class="line">这样的机制的是为了保证系统的安全性,保证所以的java类库都是有启动类加载器加载的,而不是有我们自定义类的加载器加载的.</span><br></pre></td></tr></table></figure>

</li>
<li><p>Object中有哪些常用的方法,说说他们的含义</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">总体上常用的有:	</span><br><span class="line">equals(Object)	在传统意义上,它与==号是不一样的,但是在Object中他就是一样的</span><br><span class="line">tostring() </span><br><span class="line">notify() 唤醒,配和线程的使用,等待过程中没有拿到想要的锁,就会可以使用这个唤醒想要的进程</span><br><span class="line">notifyAll()</span><br><span class="line"><span class="built_in">wait</span>()	 等待,也是在线程中使用的</span><br><span class="line"><span class="built_in">wait</span>(long)</span><br><span class="line"><span class="built_in">wait</span>(long,int)</span><br><span class="line">finalize()  垃圾回收才会用到,而判断一个是否可以被回收的依据就是这个方法是否被重写</span><br><span class="line">getClass()</span><br><span class="line">hashCode()	一般重写了equals()方法就要重写hashcode()方法,这方法一般用户<span class="built_in">hash</span>查找</span><br><span class="line">Clone()</span><br></pre></td></tr></table></figure>


</li>
<li><p>动态代理的几种实现方式,分别说出他们的优缺点</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">代理分静态代理和动态代理两种,从设计模式上这两个属于代理模式</span><br><span class="line">静态代理的通用性不大,属于一种&quot;硬编码&quot;,这类代码的通用性不高,扩展成本大2</span><br><span class="line">动态代理如今常用的代理技术有三种:</span><br><span class="line">	1. Jdk自带的代理</span><br><span class="line">	2. CGLib提供的类库</span><br><span class="line">对比: </span><br><span class="line">	1. JDK实现了被代理对象的接口,CGLIib继承了被代理对象</span><br><span class="line">	2. 两种代理在运行期间都会生成字节码,JDK直接生成Class字节码,CGLib是使用ASM框架写Class.后者的实现更加复杂,生成代理类比JDk动态代理效率低</span><br><span class="line">	3. JDK的实现方式是使用反射机制,CGLib是使用FastClass机制(索引分配直接使用).因此比CGLib使用效率高.</span><br><span class="line"></span><br><span class="line">开发中根据实际需求合理使用就行</span><br></pre></td></tr></table></figure>

</li>
<li><p>如何使用在线调试用具Arthas</p>
</li>
<li><p>C10K问题</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C10K问题:一个优化网络套接字以同时处理大量客户端链接的问题.表示可以同时处理10k个并发连接.</span><br></pre></td></tr></table></figure>

</li>
<li><p>Http与Https的主要区别是什么</p>
<table>
<thead>
<tr>
<th>区别</th>
<th>Http</th>
<th>Https</th>
</tr>
</thead>
<tbody><tr>
<td>安全性</td>
<td>安全性较差</td>
<td>安全性较高,可防止关键信息被攻击</td>
</tr>
<tr>
<td>端口(默认)</td>
<td>80</td>
<td>443</td>
</tr>
<tr>
<td>协议</td>
<td>TCP&#x2F;IP</td>
<td>除了TCP&#x2F;IP,还有TLS&#x2F;SSl秘钥协议</td>
</tr>
<tr>
<td>前缀</td>
<td>http:&#x2F;&#x2F;</td>
<td>https:&#x2F;&#x2F;</td>
</tr>
<tr>
<td>用途</td>
<td>信息共享类网站,比如博客</td>
<td>用户保护性要求较高的网站,如电子商务平台</td>
</tr>
<tr>
<td>域名合法性</td>
<td>无需SSL证书</td>
<td>需要SSL证书</td>
</tr>
<tr>
<td>数据保护</td>
<td>无</td>
<td>有</td>
</tr>
<tr>
<td>数据加密</td>
<td>无</td>
<td>有</td>
</tr>
<tr>
<td>搜索排名</td>
<td>无关</td>
<td>有关</td>
</tr>
<tr>
<td>响应速度</td>
<td>快</td>
<td>慢于Http</td>
</tr>
</tbody></table>
</li>
<li><p>Java中线程间有哪些通信方式</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.volatile(告诉程序所有对改变变量的访问都需要从共享内存中获取,改变也必须同步刷新到共享内存中,保证线程的可见性)和synchronize(保证多个线程的时候,保证只有一个线程可以使用这个线程,保证线程的可见性和排他性)关键字</span><br><span class="line">2. 等待/通知机制  在Objct中两个方法,notify和<span class="built_in">wait</span></span><br><span class="line">3. 管道输入/输出机制</span><br><span class="line">4. Thread.<span class="built_in">join</span>()</span><br><span class="line">5. 使用ThreadLocal</span><br></pre></td></tr></table></figure>

</li>
<li><p>简单说说你了解的类加载器,可以打破双亲委派机制,如何打破?</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">启动类加载器:加载JDK中的lib目录中的类,被虚拟机认可</span><br><span class="line">扩展类加载器:加载JDk中的etc目录下的类</span><br><span class="line">应用程序类加载器:负责加载用户途径classpath上的类库</span><br><span class="line">自定义类加载器:通过继承java.lang.CLassLoad实现自定义类加载</span><br><span class="line"></span><br><span class="line">为什么是向上委托,先下委派,其实是ClassLoad类中写的,所以如果想要破双亲委派机制也很简单,只需要重写我们的ClassLoad方法就可以了</span><br><span class="line"></span><br><span class="line">Tomcat是如何打破类加载器的</span><br><span class="line">	首先tomcat会有很多的web的程序,所以要把每个web程序使用的类库隔离出来,所以每一个web都有一个独立的webAppClassLoad,tomcat中的WebAppClassLoad打破了双亲委派机制,首先自己尝试去加载某个类,如果找不到,在代理给父类加载器,其目的优先加载web应用程序定义的类.</span><br></pre></td></tr></table></figure>

</li>
<li><p>有没有两个不相同的值的Hashcode一样呢</p>
<p> &#x3D;&#x3D;重写了equials方法,一定要重写它的hashCode方法&#x3D;&#x3D;</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">有可能一样比如Aa与BB</span><br><span class="line">规律:</span><br><span class="line">	- 两个值的equals相等,那么环境认为两个值一定相等</span><br><span class="line">	- 两个值的equals不相等,两个值的hashcode有可能相等</span><br><span class="line">	- 如果两个值的hashCode相等,两个值不一定相等equals</span><br><span class="line">	- 两个值对象hashCode不相等,两个值一定不equals</span><br><span class="line">在比较中先进行hashCode()比较,然后在进行equeals比较,这样在数量很大的时候可以大大提高效率</span><br><span class="line"></span><br><span class="line">equels是是根据对象的特征进行重写的，有时候特征相同，但<span class="built_in">hash</span>值不同，也不是一个对象。 所以两个都重写才能保障是同一个对象</span><br></pre></td></tr></table></figure>

</li>
<li><p>如何完成海量数据的检索</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">倒排索引    关键字 </span><br><span class="line"></span><br><span class="line">关键字的种子URl,然后解析种子url,而一些url中会有一些超链接进行链接,这些超链接就形成了一张大网,一致重复,先检查超链接是否重复过,如果没有重复就解析,重复就跳过.</span><br><span class="line">词是有限,但是组合的语句是无限的,所以就记录词</span><br><span class="line">在解析超链接的时候,就会出现这样的情况,如果是英文就拆分单词,如果是中文分词器就拆分成名字,形成文档矩阵,这些矩阵的重合区域就是需要的内容.</span><br><span class="line">这就是倒排索引</span><br></pre></td></tr></table></figure>
</li>
<li><p>Error与Exception的区别,CheckExpection与RuntimeExpection的区别</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Error与Exception都是继承了Throwable,而RuntimeException继承Exception.在Java中只有Throwable异常才可以被抛出(throw)或者捕获(catch)</span><br><span class="line"></span><br><span class="line">Error是一些非正常的异常,这种情况下导致程序处以一种不可恢复状态.</span><br><span class="line">Exception是一些正常情况下可以遇到的状态,这种状态的异常可以被捕获或者抛出</span><br><span class="line"></span><br><span class="line">CheckedException的基类是Exception,但是RuntimeException的基类是RuntimeException,但是RuntimeException的父类是Exception</span><br><span class="line"></span><br><span class="line">CheckedException的异常必须捕获或者抛出,但是RuntimeException的的异常就没有相关的要求.这样对于明显不会异常的代码段就不必处理了.</span><br></pre></td></tr></table></figure>


</li>
<li><p>如何利用10行代码实现负载均衡</p>
</li>
</ol>
<pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">重定向负载均衡</span><br><span class="line">DNS负载均衡 两次负载均衡, 一次DNS,一次</span><br></pre></td></tr></table></figure>
</code></pre>
<ol start="21">
<li><p>什么是ServerLess</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">字面意思就是:无服务,实际意思就是我们开发者不用去关心服务器,就像我们后端开发者不用考虑内存问题,因为这被java的垃圾回收机制解决</span><br><span class="line"></span><br><span class="line">愿景:</span><br><span class="line"></span><br><span class="line">价值:1. 在很多的服务器中识别和筛选有问题的服务器,打通日志和监控系统,在内存不够的时候会自动分配内存</span><br><span class="line">	2. 可伸缩架构,实现自动弹性,自动扩容</span><br><span class="line">	3. 按照实际资源使用付费</span><br></pre></td></tr></table></figure>


</li>
<li><p>Atomiclnteger在高并发下性能不好吗?</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">    ```</span><br><span class="line"></span><br><span class="line">23. 线程安全的概念</span><br><span class="line"></span><br><span class="line">    ```bash</span><br><span class="line">    通常我们意义上说的线程安全指的是线程相对安全</span><br><span class="line">    </span><br><span class="line">    一般情况下,线程的安全程度分为两个等级,为线程安全和不是线程安全</span><br><span class="line">    细分为5个等级:</span><br><span class="line">    	- 不可变	final,等修饰的	数据不可以修改,绝对安全</span><br><span class="line">    	- 绝对线程安全	这个定义其实是很严格的，一个类要达到“不管运行时环境如何，调用者都不需要任何额外的同步措施”通常需要付出很大的代价。</span><br><span class="line">    	- 相对线程安全(线程安全)</span><br><span class="line">    		在java语言中，大部分的线程安全类都属于相对线程安全的，例如Vector、HashTable、Collections的synchronizedCollection()方法保证的集合。</span><br><span class="line">    	- 线程兼容(不是线程安全)</span><br><span class="line">    		线程兼容是指对象本身并不是线程安全的，但是可以通过在调用端正确地使用同步手段来保证对象在并发环境下可以安全地使用。Java API中大部分的类都是属于线程兼容的。如与前面的Vector和HashTable相对应的集合类ArrayList和HashMap等。</span><br><span class="line">        - 线程对立(为了防止死锁出现,这种方法已经很少出现了)</span><br></pre></td></tr></table></figure>

<p>线程安全实现方法:</p>
<p><img src="/2022/11/11/JAVA%E9%9D%A2%E8%AF%95%E9%A2%98/JAVA%E9%9D%A2%E8%AF%95%E9%A2%98%5Cimage-20230210001359438.png" alt="image-20230210001359438"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>Mysql面试</title>
    <url>/2023/02/10/Mysql%E9%9D%A2%E8%AF%95/</url>
    <content><![CDATA[<h4 id="1-SQL有哪些优化着手点-索引的最左前缀原则的含义是啊没"><a href="#1-SQL有哪些优化着手点-索引的最左前缀原则的含义是啊没" class="headerlink" title="1. SQL有哪些优化着手点,索引的最左前缀原则的含义是啊没"></a>1. SQL有哪些优化着手点,索引的最左前缀原则的含义是啊没</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SQL的优化着手点</span><br><span class="line"> - 优化查询的选择,连接和排序操作</span><br><span class="line"> - 优化查询中使用的索引,报错删除无用索引,调整索引,创建新索引</span><br><span class="line"> - 优化查询中使用的语句,包括对子查询的进行优化,使用连接代替子查询</span><br><span class="line"> - 优化查询中使用的聚合函数,包括使用索引优化,使用分组连接待机聚合函数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">至于最左前缀原则就是常用的字段尽量发在最左边,就像我们常使用的主键<span class="built_in">id</span>,其实主键也是一个索引,要实现最左前缀的话,可以为表添加想要的索引,但是合理的索引的添加虽然是表的查询更加有效率,但是表数据的更新操作和维护效率变低</span><br></pre></td></tr></table></figure>





<h4 id="2-IP地址应该在数据库中如何存储"><a href="#2-IP地址应该在数据库中如何存储" class="headerlink" title="2. IP地址应该在数据库中如何存储"></a>2. IP地址应该在数据库中如何存储</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">首先IP地址的长度最少都是0.0.0.0,也就是7个字符,是用varchar来存储的最少都要7个字节,所以在我们可以使用int类型来存储IP地址,而且int是4个字节,这就可以节约空间</span><br><span class="line"></span><br><span class="line">Mysql中有函数可以对IP数值就行相互转换 INET_NTOA() 将IP转换为整数</span><br><span class="line">算法,第一位乘以256三次方,第二位乘以256二次方,第三位乘以256一次方法,第四位乘以256零次方</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h4 id="3-分库分表之后，id主键该如何处理"><a href="#3-分库分表之后，id主键该如何处理" class="headerlink" title="3. 分库分表之后，id主键该如何处理"></a>3. 分库分表之后，id主键该如何处理</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">第一种:数据库<span class="built_in">id</span>自增,设置步长,但是对于一些重合的步长就很难解决</span><br><span class="line">第二种:Redis生成<span class="built_in">id</span>,通过redis的INCR自增的原子操作命令,就可以保证数据ID肯定唯一有序,本质与数据库的实现一致</span><br><span class="line">	- 优点:整体的吞吐量肯定比数据库要好的</span><br><span class="line">	- 缺点:宕机的时候,由于数据存在内存中,容易造成数据的丢失,找回最新的<span class="built_in">id</span>比较麻烦</span><br><span class="line">	适用场景:比较适合计数场景,比如,访问数量,订单流水号(日期+流水号)等</span><br><span class="line">第三种:UUID,GUID生成<span class="built_in">id</span></span><br><span class="line">	- 优点:性能非常好,本地声称,没有网络消耗</span><br><span class="line">	- 缺点:空间占用过大(32)位,作为主键,性能也太差了</span><br><span class="line"></span><br><span class="line">第四种:snowFlake雪花算法</span><br><span class="line">	多集群或跨机群使用,响应时间快,低延迟,高性能每一个机器大概10k数据/秒,响应时间在2ms内</span><br><span class="line">    生成方式</span><br><span class="line">		指定日期时间差(毫秒级) 41位</span><br><span class="line">		机群ID+机器ID,10位</span><br><span class="line">		序列 12位</span><br><span class="line">	优点:</span><br><span class="line">	 - 时间为在高位,这就可以是<span class="built_in">id</span>是趋势增长的</span><br><span class="line">	 - 不依赖第三方系统,以服务的方式部署,稳定性更高,生成ID的性能也是非常高的</span><br><span class="line">	 - 根据自身业务灵活分配bit位</span><br><span class="line">	 缺陷:</span><br><span class="line">	 - 过于依赖机器时钟,如果机器时钟发生改变会倒是重复发号,这样的后果非常严重</span><br><span class="line">	 </span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="4-如何实现Mysql的读写分离操作"><a href="#4-如何实现Mysql的读写分离操作" class="headerlink" title="4. 如何实现Mysql的读写分离操作"></a>4. 如何实现Mysql的读写分离操作</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">基于主从复制架构,简单来说就是一个主库挂起多个从库,主库上写入数据,主库会吧数据同步到从库</span><br><span class="line"></span><br><span class="line">MySQL的主从复制原理是什么?</span><br><span class="line">	简单来说就是我们在主库写入的数据会被记录到binLog日志中,然后从库在从binLog中读取,然后重新把数据写入到从库中.</span><br><span class="line">	这就是说明了一个问题,从库同步主库数据的过程时串行过程,这就说明在主库并行的操作在从库是串行执行的,这就会导致在数据同步过程会,会有延时</span><br><span class="line">	而且在主机突然宕机后,有可能会导致数据丢失,然后这就引入了个方法去解决这个延迟,第一是 半同步复制,第二个并行复制</span><br><span class="line">	- 半同步复制: 主库写入bingLog日志后强制要求执行到从库中,直到从库中有返回一个ack,这样主库就知道从库写操作完成</span><br><span class="line">	- 并发复制: 从库开启多个线程去读取bingLog日志,这样就可以是延迟降低,但是还是无法避难延迟</span><br></pre></td></tr></table></figure>



<h4 id="5-我们为什么要做分库分表"><a href="#5-我们为什么要做分库分表" class="headerlink" title="5.我们为什么要做分库分表"></a>5.我们为什么要做分库分表</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">解决高并发的手段之一</span><br><span class="line">刚开始数据字段少的时候为了开发速度,就会让业务跟数据一起,当数据很大后就需要分库分表来提高效率,使用频率高的一张表,使用频率低的一张表,提高效率</span><br><span class="line">还有就是根据数据量级来拆,根据使用频率拆</span><br><span class="line">业务侧:</span><br><span class="line">数据侧:</span><br></pre></td></tr></table></figure>



<h4 id="6-数据库的隔离级别-MvCC"><a href="#6-数据库的隔离级别-MvCC" class="headerlink" title="6. 数据库的隔离级别,MvCC"></a>6. 数据库的隔离级别,MvCC</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">事务的四个特性:</span><br><span class="line"> - 原子性:要么成功,要么失败</span><br><span class="line"> - 一致性:最重要的就是结果一致性,最终结果是不可变的</span><br><span class="line"> - 持久性:事务的提交,对数据的修改是永久的,即是系统故障也不会丢失</span><br><span class="line"> - 隔离性:</span><br><span class="line">数据概念:脏读,幻读,不可重复读</span><br><span class="line">脏读:读到了未提交的数据</span><br><span class="line">幻读:两个进程,一个进程读到了数据,但是另一个进程同时又更改了数据</span><br><span class="line">不可重读:两次读到的数据不一致</span><br><span class="line"></span><br><span class="line">LBCC 也可以解决数据丢失问题,基于锁的并发控制</span><br><span class="line">	同一时间,只允许一条事务修改当前数据,其他事务必须等待所锁的释放之后才可以操作.</span><br><span class="line">	</span><br><span class="line">MVCC --&gt; Multi-Version Concurrency Control 多版本并发控制，MVCC 是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问；在编程语言中实现事务内存。</span><br><span class="line">也可以解决数据丢失问题,MVCC是在读取数据史,读取到了同一时间下的另一个进程的副本,但是想要操作数据必须等待另一个进程吧数据提交后,才可以操作数据</span><br></pre></td></tr></table></figure>

<h4 id="7-MySQL中SQL的执行过程"><a href="#7-MySQL中SQL的执行过程" class="headerlink" title="7.MySQL中SQL的执行过程"></a>7.MySQL中SQL的执行过程</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">首先,当我们编写一条sql语句后执行后,会向缓冲器中查找数据,(<span class="built_in">hash</span>值来查找,这就要求sql语句是一样的,连空格,字母大小写都要一样),如果缓存没有就会给解析器,在到预处理器,然后根据索引来到查询优化器,最后执行计划,得出执行结果</span><br></pre></td></tr></table></figure>

<h4 id="8-Mysql存储引擎-MyISAM与InnoDB区别"><a href="#8-Mysql存储引擎-MyISAM与InnoDB区别" class="headerlink" title="8.Mysql存储引擎:MyISAM与InnoDB区别"></a>8.Mysql存储引擎:MyISAM与InnoDB区别</h4><table>
<thead>
<tr>
<th>区别</th>
<th>MyISAM</th>
<th>InnoDB</th>
</tr>
</thead>
<tbody><tr>
<td>事务</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>锁支持</td>
<td>表锁</td>
<td>行级锁定,表级锁定,锁定力度小并发能力高</td>
</tr>
<tr>
<td>Select</td>
<td>更快</td>
<td></td>
</tr>
<tr>
<td>Update,insert,Delete</td>
<td></td>
<td>更快</td>
</tr>
<tr>
<td>select count()计数</td>
<td>内部有计数器</td>
<td>内部无计数器</td>
</tr>
<tr>
<td>索引实现</td>
<td>B+数,堆表</td>
<td>B+树,索引组织表</td>
</tr>
<tr>
<td>hash索引</td>
<td>不支持</td>
<td>支持</td>
</tr>
</tbody></table>
<h4 id="9-索引创建原则"><a href="#9-索引创建原则" class="headerlink" title="9.索引创建原则"></a>9.索引创建原则</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. 最左匹配原则</span><br><span class="line">2. 频繁作为查询条件的字段才去做索引</span><br><span class="line">3. 更新频繁字段不适合创建索引</span><br><span class="line">4. 区分度太低不适合</span><br><span class="line">5. 尽量的扩展索引,不要新建索引</span><br></pre></td></tr></table></figure>

<h4 id="10-Mysql为什么使用的是B-树而不是B树"><a href="#10-Mysql为什么使用的是B-树而不是B树" class="headerlink" title="10. Mysql为什么使用的是B+树而不是B树"></a>10. Mysql为什么使用的是B+树而不是B树</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">首先B+树的特点是,节点存放的是键和值,越靠近根节点的节点的使用频率越高,而B+的特点是,节点只存放键,而不存放值,而且B+的叶子节点之间是有双向箭头指向的,而B树则没有</span><br><span class="line"></span><br><span class="line">B树要对树的每一层都需要进行检索,适合随机检索的场景,而B+树适合顺序检索和随机检索,所以Mysql用的B+树,而不是B树</span><br></pre></td></tr></table></figure>

<p><img src="/2023/02/10/Mysql%E9%9D%A2%E8%AF%95/Hexo\hexoblog\source_posts\Mysql面试\image-20230213155600198.png" alt="image-20230213155600198"></p>
<p><img src="/2023/02/10/Mysql%E9%9D%A2%E8%AF%95/Hexo\hexoblog\source_posts\Mysql面试\image-20230213155531088.png" alt="image-20230213155531088"></p>
<h4 id="11-数据库的三大范式"><a href="#11-数据库的三大范式" class="headerlink" title="11.数据库的三大范式"></a>11.数据库的三大范式</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">第一范式:确保每列保持原子性(保证每一列都不可以拆分就行)</span><br><span class="line">第二范式:确保表中的没列都和主键相关</span><br><span class="line">第三范式:确保每列都和主键列直接相关,而不是间接相关</span><br><span class="line"></span><br><span class="line">eg: 学生,课程,学院</span><br><span class="line">学生表中有学生学号,姓名,学生出生日期,如果我们认为出生日期不可以拆分,那么就符合满足第一范式</span><br><span class="line"></span><br><span class="line">学生表中有学号,课程,学分,姓名,表中的学号与课程信息与主键之间必然有一个是不可以与主键相关的,那么就不能说这个表符合第二范式。而如果需要让这个表符合第二范式，正确的做法就是单独做出一张学生表和一张课程表，这样就可以符合第二范式了。</span><br><span class="line"></span><br><span class="line">学生表中，有学生姓名，学生学号，学院，学院电话，那么它就不符合第三范式，因为学院电话应该是在学院表中的，这里有所以它不符合第三范式</span><br><span class="line"></span><br><span class="line">一般来说，我们设计的表都要符合第三范式，这样就没有冗余了，但是没有冗余的表不一定就是最好的表，在我们的一些日常设计中，为了效率，会特意的降低范式要求，设计一些不符合第三范式的表。</span><br><span class="line">这就是空间换时间的概念。</span><br></pre></td></tr></table></figure>



<h4 id="12-Mysql表锁，页面锁，行锁的作用和优缺点？"><a href="#12-Mysql表锁，页面锁，行锁的作用和优缺点？" class="headerlink" title="12.Mysql表锁，页面锁，行锁的作用和优缺点？"></a>12.Mysql表锁，页面锁，行锁的作用和优缺点？</h4><p><strong>三个方面：开销，锁范围，出现死锁概率，并发</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.表锁 </span><br><span class="line">	优点：开销小，效率快，不会出现死锁现象，</span><br><span class="line">	缺点：锁定范围大，锁冲突概率高，并发很低</span><br><span class="line">	只有在设计很多张表的时候才会去表锁</span><br><span class="line">2.行锁</span><br><span class="line">	只有Innodb支持，锁是加在索引上面</span><br><span class="line">	优点：锁定力度比较小，相对与表锁来说，锁冲突概率也小</span><br><span class="line">	缺点：开销比较大，可能出现死锁，锁定力度小</span><br><span class="line">3.页锁</span><br><span class="line">	基于行锁与表锁之间的，</span><br><span class="line">	优缺点也明显，它的优缺点也是介于行锁与表锁之间的</span><br><span class="line">	</span><br></pre></td></tr></table></figure>

<h4 id="13-MySQL中的redo-Log，binLog，undo-log区别和作用"><a href="#13-MySQL中的redo-Log，binLog，undo-log区别和作用" class="headerlink" title="13.MySQL中的redo Log，binLog，undo log区别和作用"></a>13.MySQL中的redo Log，binLog，undo log区别和作用</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.redolog(确保持久性)重复做日志</span><br><span class="line">	缓存和文件，前者在内存，后者在磁盘</span><br><span class="line">	在宕机后可以根据这个来，MySQL会根据这个来进行从重做，确保持久性这个特性</span><br><span class="line">2.binlog（记录DDl的情况）</span><br><span class="line">	主从复制，从库根据binlog来进行复制</span><br><span class="line">3.undo <span class="built_in">log</span> 			没做前日志</span><br><span class="line">	记录数据的逻辑变化，在发生变化的时候可以去回滚</span><br></pre></td></tr></table></figure>

<h4 id><a href="#" class="headerlink" title></a></h4><h4 id="14-在项目中缓存是怎么用的Redis"><a href="#14-在项目中缓存是怎么用的Redis" class="headerlink" title="14.在项目中缓存是怎么用的Redis"></a>14.在项目中缓存是怎么用的Redis</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在项目有中缓存是怎么用的，为什么要用缓存，缓存不当会造成什么后果？</span><br><span class="line">1. 缓存怎么使用？</span><br><span class="line">需要结合自己项目于使用一般是使用在一些</span><br><span class="line">	热点数据，商品信息</span><br><span class="line">	排行榜信息</span><br><span class="line">	用户状态中</span><br><span class="line">2. 为什么使用缓存？</span><br><span class="line">	读多写少的场景中，mysql是不是用来搞高并发的</span><br><span class="line">缓存的使围绕这高性能，高并发来讲</span><br><span class="line">3. 缓存不当的后果</span><br><span class="line"> 	- 缓存与数据库的双写不一致</span><br><span class="line"> 	- 缓存雪崩，缓存穿透，缓存击穿</span><br><span class="line"> 	- 缓存并发竞争</span><br></pre></td></tr></table></figure>

<h4 id="15、如果保持Redis的高并发和高可用？"><a href="#15、如果保持Redis的高并发和高可用？" class="headerlink" title="15、如果保持Redis的高并发和高可用？"></a>15、如果保持Redis的高并发和高可用？</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">如何保持Redis的高并发，高可用？Redis的主从复制原理，Redis的哨兵模式原理是什么</span><br><span class="line"></span><br><span class="line">Redis的高并发主要依赖的就是主从原理，一主多从，主写，从读</span><br><span class="line">Redis的高可用主要靠哨兵模式+主从框架就可以实现，任意一个宕机，都可以进行主从切换</span><br><span class="line"></span><br><span class="line">redis的主从复制</span><br><span class="line">	一个写的节点，连接多个读的节点,这样就可以提高读的吞吐量,但是不能解决写的吞吐量</span><br><span class="line"></span><br><span class="line">Redis replication--&gt;主从架构--&gt;读写分离--&gt;水平扩容支撑高并发</span><br><span class="line"></span><br><span class="line">Redis replication的核心机制:</span><br><span class="line">	一台master node主机可以连接多个salve node 从机</span><br><span class="line">	salve node也可以连接 salve node</span><br><span class="line">	在master node的数据是异步方式同步到salve node 上的</span><br><span class="line">	salve node工作的时候是不会影响master node工作的,当然也不会影响自己的操作,因为它同步的时候用的是旧的数据集,然后同步完成后,会让新的数据集取代旧的数据集,只有那个时候,salve node才会对外停止服务</span><br><span class="line"></span><br><span class="line">主从复制必须开启master的数据的持久化(此时数据是在内存中的),防止在宕机的时候,当master node的数据是空的时候,salve做复制也导致master的数据也是空的</span><br><span class="line"></span><br><span class="line">master也是多种备份文件的方案,在本地文件丢失的时候随机选取一个rdb文件进行文件的恢复,确保在启动的时候数据不是空的</span><br><span class="line"></span><br><span class="line">Redis主从复制的核心:</span><br><span class="line">	salve首次链接master,触发全量复制,后续链接触发增量复制</span><br><span class="line">	主从复制的断点续传</span><br><span class="line">		首先是在salve从master中复制文件的时候,master和salve都会保存一个replica offset和一个master run <span class="built_in">id</span>,如果复制过程中,master 和salve的连接断了,下次salve 会master 从上次replica offset中开始继续复制,如果找不到offset就会触发全量复制</span><br><span class="line">		</span><br><span class="line">过期key处理</span><br><span class="line">	salve的key是不会过期,只有收到master发送的可以把数据删除数据才会吧数据删除</span><br><span class="line"></span><br><span class="line">高可用:主备切换</span><br><span class="line">	哨兵模式</span><br></pre></td></tr></table></figure>

<p><img src="/2023/02/10/Mysql%E9%9D%A2%E8%AF%95/Hexo\hexoblog\source_posts\Mysql面试\image-20230213165716826.png" alt="image-20230213165716826"></p>
<p><img src="/2023/02/10/Mysql%E9%9D%A2%E8%AF%95/Hexo\hexoblog\source_posts\Mysql面试\image-20230213165941029.png" alt="image-20230213165941029"></p>
<h4 id="16-做持久化配置吗-如何配置的"><a href="#16-做持久化配置吗-如何配置的" class="headerlink" title="16.做持久化配置吗,如何配置的"></a>16.做持久化配置吗,如何配置的</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">持久化的两种方式:</span><br><span class="line">	- RDB持久化机制:简称RDB,是对数据进行周期性的持久化</span><br><span class="line">	_ AOF:对每一条数据的命令作为日志,Redis重启的时候,回放AOF日志汇总的写入指令来重新构建整个数据集</span><br></pre></td></tr></table></figure>

<h4 id="17-什么是Redis缓存雪崩-缓存穿透-缓存击穿"><a href="#17-什么是Redis缓存雪崩-缓存穿透-缓存击穿" class="headerlink" title="17.什么是Redis缓存雪崩,缓存穿透,缓存击穿"></a>17.什么是Redis缓存雪崩,缓存穿透,缓存击穿</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">缓存雪崩:主要就是说在一些情况写,缓存宕机了,而且又是在高峰期,突然进来5000个请求,这5000个请求全都落在数据中,而不是在缓存中,从而导致服务器从后台崩溃</span><br><span class="line">	解决办法:减少缓存宕机的可能----&gt;主从机构---&gt;哨兵模式</span><br><span class="line">			或者设置数据库进行数据限流</span><br><span class="line">			</span><br><span class="line">缓存穿透:就是在黑客攻击服务器,我们的缓存中没有黑客需要的数据在缓冲中是无法命中的,而这些黑客的那些请求就会把压力给到数据库,而数据库处理不了这些请求,这就是缓存穿透</span><br><span class="line">	解决方法:如果是相同的值进来的,在第一次值进来的时候,从Redis查不到数据,就生成一个找不到的结果提示,然后设置一个过期时间,然后下次这个值进来查找数据,就把这个数据返还给他.</span><br><span class="line">	如果是不同的值进来的,就得用到布隆过滤器了,如果查找的值不在缓存过滤器中,就直接返回一个不存在的,如果是在布隆过滤器中,就继续向缓存中查找</span><br><span class="line">	布隆过滤器起到的作用就是一个过滤的作用,防止缓存的压力给到数据库.如果在布隆过滤器中没有,就说明在缓存中没有,直接返回一个没有的值</span><br><span class="line">	</span><br><span class="line">缓存击穿:在我们的Redis缓存中,不可能把所有的数据都设置为永不过期,有Redis的配置决定删除数据的规则,击穿就是在Redis刚好删除一个热点数据的时候,刚好有大量的该数据查询,这就会把压力都给到数据库中,数据库如果无法承受压力,就会导致服务器从后台崩溃.</span><br><span class="line">	解决方法:1.如果数据是基本保持不变的,那么就把这个数据的过期时间设置为永不过期</span><br><span class="line">		2.如果数据是更新不频繁的,且缓存刷新耗时较少的情况下,采用基于Redis跟zookeeper等中间件互斥的分布式锁,或者本地互斥以保证仅少量的请求能请求数据库并重新构建缓存,其余线程则在锁释放后能访问到新缓存.</span><br><span class="line">		3.数据更新频繁或者缓存刷新的流程耗时较长,可以利用定时线程在缓存过期前主动的重新构建缓存或者延后缓存的过期时间,以保证所有的请求能一直访问到对应的缓存</span><br><span class="line">	</span><br></pre></td></tr></table></figure>

<h4 id="18-Redis的内存用完了会怎么办"><a href="#18-Redis的内存用完了会怎么办" class="headerlink" title="18.Redis的内存用完了会怎么办?"></a>18.Redis的内存用完了会怎么办?</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Redis在物理上运行快的原因是Redis数据的存储是在内存中的,所以它运行比较快.所以就有了以下的问题,如果内存满了,Redis 是如何去解决的.</span><br><span class="line">Reids内存满了总体有8中解决方法,</span><br><span class="line">第一种就是不淘汰,那么一般这样的结果就是服务器瘫痪</span><br><span class="line"></span><br><span class="line">第二种就是淘汰不用的数据,而淘汰数据的方式总体分为一下两个方式.volatile和allkeys</span><br><span class="line">	- volatile</span><br><span class="line">		1. volatile-ttl 在筛选数据的时候是按照数据的过期时间去删除数据</span><br><span class="line">		2. volatile-random 在设置过期时间的数据中随机的进行筛选</span><br><span class="line">		3. volatile-lru 利用lru算法进行对过期时间的键值对进行比对,它是根据访问时间的方式进行删除</span><br><span class="line">		4. volatile-lfu 利用lfu算法对过期时间的键值对键比对,它是根据访问量和访问时间结合起来进行删除</span><br><span class="line">	- allkeys</span><br><span class="line">	 	5. allkeys-random	在数据中随机进行选择并删除</span><br><span class="line">	 	6. allkeys-lru	lru算法在所有数据中进行筛选</span><br><span class="line">	 	7. allkeys-lfu</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="19-为什么选择的是Redis-而不是其他的想Memcached之类的缓存中间件呢"><a href="#19-为什么选择的是Redis-而不是其他的想Memcached之类的缓存中间件呢" class="headerlink" title="19.为什么选择的是Redis,而不是其他的想Memcached之类的缓存中间件呢"></a>19.为什么选择的是Redis,而不是其他的想Memcached之类的缓存中间件呢</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">总体上从6个方面来进行比较说明</span><br><span class="line">	- 1.数据结构上来说Redis兼容多种存储方式,总体也是用key-value的方式进行存储,但是它不仅可以用键值对方式存储,还可以是用<span class="built_in">hash</span>,map之类的存值,而Memcached就比较单调,只能用键值对方式</span><br><span class="line">	- 2.内存上来说,Redis可以在物理内存满了的时候,使用虚拟内存来存储数据,而Memcached就不行</span><br><span class="line">	- 3.分布式 Memcached可以做到一主多从,而Redis不仅可以做到一主多从,还可以做到一主一从,还支持集群模式</span><br><span class="line">	- 4.存储数据安全 Redis 可以把数据持久化到磁盘中,比较安全</span><br><span class="line">	- 5.单key容量不同 Redis 的单key可以存储512m内存,而Memcached只能1m</span><br><span class="line">	- 6.灾难恢复 这个与第4 相关,因为Redis可以通过RDB或者AOF的方式来在发生一些事故的时候进行数据恢复</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="20-Redis是如何查找出慢查询记录的-如何对Redis-进行性能优化"><a href="#20-Redis是如何查找出慢查询记录的-如何对Redis-进行性能优化" class="headerlink" title="20.Redis是如何查找出慢查询记录的?如何对Redis 进行性能优化?"></a>20.Redis是如何查找出慢查询记录的?如何对Redis 进行性能优化?</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">查找出Redis慢查询操作:两个命令,1个是slowlog_log_slower_than,用于设置慢查询的评定时间,单位是微妙</span><br><span class="line">另一个是:slowlog-max-len,用来配置慢查询日志的最大记录数</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.缩短键值对的存储长度,Redis中的1个key 默认可以存储512m数据,但是数据越大,查询时间就越长</span><br><span class="line">2.使用lazy free(延迟删除) 特性</span><br><span class="line">3.设置键值对的过期时间</span><br><span class="line">4.兼职耗时长的查询命令</span><br><span class="line">5.使用slowlog(慢日志)优化耗时命令</span><br><span class="line">6.避免大量数据的同时失效</span><br><span class="line">7.限制Redis内存大小</span><br><span class="line">8.检查数据持久策略</span><br><span class="line">9.使用分布式价架构来增加读写速度</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
  </entry>
  <entry>
    <title>分布式微服务</title>
    <url>/2023/02/17/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h4 id="1-分布式锁在项目中使用过吗"><a href="#1-分布式锁在项目中使用过吗" class="headerlink" title="1.分布式锁在项目中使用过吗?"></a>1.分布式锁在项目中使用过吗?</h4><p>在单体应用中,<strong>锁的作用</strong>就是<strong>解决公共资源共享问题</strong>,而在分布式中也是如此,分布式锁的作用就解决分布式公共资源共享问题.</p>
<p>分布式锁具备的一下<strong>条件</strong>:</p>
<ul>
<li><p>分布式环境中,一个方法在同一时间内只能被一个机器的一个线程执行</p>
</li>
<li><p>高可用的获取锁与释放锁</p>
</li>
<li><p>高性能的获取锁与释放锁</p>
</li>
<li><p>具有可重入刑(可理解为重新进入,有多于一个任务并发使用,而不必担心数据错误)</p>
</li>
<li><p>具备锁失效机制,即自动解锁,防止死锁(比如设置锁过期时间的方式)</p>
</li>
<li><p>具备非阻塞锁特性,即没有获取到锁将直接返回锁失败</p>
<p>  可以使用Redis用的<strong>比较多</strong>,也会用zookeeper,在Redis中,在分布式中难免使用分布式锁,执行命令是单线程的,lua脚本提交方式,确保原子性操作</p>
</li>
</ul>
<h4 id="2-什么是微服务"><a href="#2-什么是微服务" class="headerlink" title="2.什么是微服务"></a>2.什么是微服务</h4><p>定义:微服务架构是一个分布式系统,按照业务划分为不同的服务单元,解决单体性能不足等问题</p>
<p>微服务架构是指开发商应用的一种架构形式或者称为一种架构风格,通过微服务,可将大型应用分解成多个独立的组件,其中每个组件都有格子的责任领域,每一个组件都可以独立部署,组件之间是松耦合,在处理一个用户请求时,基于微服务的应用可能会调节许多内部微服务来沟通生成响应.</p>
<p>&#x3D;&#x3D;优势&#x3D;&#x3D;:</p>
<ol>
<li>敏捷性</li>
<li>灵活扩展</li>
<li>轻松部署</li>
<li>技术自由</li>
<li>课重复使用代码</li>
<li>弹性</li>
</ol>
<h5 id="3-微服务之间如何独立通讯的"><a href="#3-微服务之间如何独立通讯的" class="headerlink" title="3. 微服务之间如何独立通讯的"></a>3. 微服务之间如何独立通讯的</h5><ul>
<li>REST Http协议</li>
</ul>
<ol>
<li>表现形式:xml或者html</li>
<li>客户端与服务端之间的交互杂请求之间是无状态的,从客户端到服务端的每个请求都必须包含理解请求所必须的信息</li>
</ol>
<ul>
<li><p>RPC TCP协议(比http性能高)</p>
</li>
<li><p>RPC(第三种方式)</p>
</li>
</ul>
<h4 id="3-SpringBoot与springcloud-谈谈对它们的理解"><a href="#3-SpringBoot与springcloud-谈谈对它们的理解" class="headerlink" title="3.SpringBoot与springcloud,谈谈对它们的理解"></a>3.SpringBoot与springcloud,谈谈对它们的理解</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SpringBoot</span><br><span class="line">	- 1.相比于以前的spring+tomcat来说,springboot是一个很重要的一个改革,以前Spring+tomcat,先要吧项目打成war包,然后才可以部署到tomcat中,而且,目录的要求很严格,必须得有以前的lib,clsses,WEB-INF,而且大量xml配置.而SpringBoot中集成了tomcat,直接只用就行,只需要添加一个starter-web依赖就行,而且使用的是jar包</span><br><span class="line">	- 2.相比于spring来说,难度直线下降,springBoot中默认添加了很多必要依赖,不像Spring的配置地狱,各种xml,Annotation配置让人头痛</span><br><span class="line">	- 3.springBoot是个微框架,没有提供相应的服务发现与注册的配套功能,没有外围监控集成方案,没有外围安全管理方案,所以在微服务架构中,还需要springCloud来配和一起使用</span><br><span class="line">	总结:springBoot是为快速启动且最小化配置的spring应用设计,并且它具有构建生产级别的应用的一套视图.</span><br><span class="line">	</span><br><span class="line">SpringCloud</span><br><span class="line"> 	- 相比与SpringBoot是Spring的最小化启动来说,这个SpringCloud就实现了基于springBoot的微服务解决方案,它为开发则提供很多工具,用于快速构架分布式系统的一些通用模式,比如:配置管理,注册中心,服务发现,限流,网关,链路追踪等</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-如何限流-怎么做-怎么实现"><a href="#4-如何限流-怎么做-怎么实现" class="headerlink" title="4.如何限流,怎么做,怎么实现"></a>4.如何限流,怎么做,怎么实现</h4>]]></content>
  </entry>
  <entry>
    <title>多线程</title>
    <url>/2023/02/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B-1/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
